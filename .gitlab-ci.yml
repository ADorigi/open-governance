image: golang:1.19

variables:
  GOPRIVATE: gitlab.com/keibiengine,github.com/kaytu-io
  GOPATH: ${CI_PROJECT_DIR}/.go
  GOCACHE: ${CI_PROJECT_DIR}/.cache
  GOOS: linux
  GOARCH: amd64

stages:
  - build
  - lint
  - test
  - deploy

.go-cache:
  before_script:
    - mkdir -p .go
    - mkdir -p .cache
    - echo -e "machine gitlab.com login gitlab-ci-token password ${CI_JOB_TOKEN}" > ~/.netrc
    - echo -e "machine github.com login ${GITHUB_CI_TOKEN}" > ~/.netrc
  cache:
    - key: go-cache
      paths:
        - .go/pkg/mod/
        - .cache/
      policy: pull

.go-cache-pullpush:
  before_script:
    - mkdir -p .go
    - mkdir -p .cache
    - echo -e "machine gitlab.com login gitlab-ci-token password ${CI_JOB_TOKEN}" > ~/.netrc
  cache:
    - key: go-cache
      paths:
        - .go/pkg/mod/
        - .cache/
      policy: pull-push

.lint-cache:
  variables:
    GOLANGCI_LINT_CACHE: ${CI_PROJECT_DIR}/.linter-cache
  before_script:
    - mkdir -p .go
    - mkdir -p .cache
    - mkdir -p .linter-cache
    - echo -e "machine gitlab.com login gitlab-ci-token password ${CI_JOB_TOKEN}" > ~/.netrc
  cache:
    - key: linter-cache
      paths:
        - .linter-cache/
        - .go/pkg/mod/
        - .cache/
      policy: pull

.lint-cache-pullpush:
  variables:
    GOLANGCI_LINT_CACHE: ${CI_PROJECT_DIR}/.linter-cache
  before_script:
    - mkdir -p .go
    - mkdir -p .cache
    - mkdir -p .linter-cache
    - echo -e "machine gitlab.com login gitlab-ci-token password ${CI_JOB_TOKEN}" > ~/.netrc
  cache:
    - key: linter-cache
      paths:
        - .linter-cache/
        - .go/pkg/mod/
        - .cache/
      policy: pull-push

build-mr:
  stage: build
  extends: .go-cache
  only:
    - merge_requests
  artifacts:
    paths:
      - build/
    expire_in: 1 hour
  script:
    - make build

build-main:
  stage: build
  extends: .go-cache-pullpush
  only:
    - main
  artifacts:
    paths:
      - build/
      - services
    expire_in: 1 hour
  script:
    - make build

build-main-all:
  stage: build
  extends: .go-cache-pullpush
  only:
    - main
  artifacts:
    paths:
      - build/
    expire_in: 1 hour
  script:
    - make build-all
  when: manual

golangci-lint-mr:
  stage: lint
  extends: .lint-cache
  only:
    - merge_requests
  image:
    name: golangci/golangci-lint:v1.52
    entrypoint: [""]
  script:
    - golangci-lint run -v

#golangci-lint-main:
#  stage: lint
#  extends: .lint-cache-pullpush
#  only:
#    - main
#  image:
#    name: golangci/golangci-lint:v1.45
#    entrypoint: [""]
#  script:
#    - golangci-lint run -v

#test:
#  stage: test
#  extends: .go-cache
#  only:
#    - main
#    - merge_requests
#  services:
#    - docker:dind
#  variables:
#    DOCKER_HOST: tcp://docker:2376
#    DOCKER_TLS_CERTDIR: "/certs"
#    DOCKER_TLS_VERIFY: 1
#    DOCKER_CERT_PATH: "$DOCKER_TLS_CERTDIR/client"
#    DOCKERTEST_HOST: docker
#  before_script:
#    - echo -e "machine gitlab.com login gitlab-ci-token password ${CI_JOB_TOKEN}" > ~/.netrc
#  script:
#    - go install gotest.tools/gotestsum@v1.8.0
#    - .go/bin/gotestsum --junitfile report.xml --format testname
#  allow_failure: true
#  cache:
#    - key: go-cache
#      paths:
#        - .go/pkg/mod/
#        - .cache/
#      policy: pull
#  artifacts:
#    when: always
#    reports:
#      junit: report.xml

sver-tags:
  stage: deploy
  only:
    - main
  variables:
    SVER_IMAGE_VERSION: "1.3.9" # Optional. The version of the sver docker image to use.
  image:
    name: "ghcr.io/aserto-dev/sver:${SVER_IMAGE_VERSION}"
    entrypoint: [""]
  before_script:
    - git status --short
    - git remote set-url origin https://oauth2:$CI_ACCESS_TOKEN@gitlab.com/$CI_PROJECT_PATH.git
  script:
    - set -x
    - ./scripts/sver.sh >> sver.env
    - source ./sver.env
    - git tag $SVER_VERSION
    - git push --tags -o ci.skip
  artifacts:
    reports:
      dotenv: sver.env

deploy: # This job runs in the deploy stage.
  stage: deploy # It only runs when *both* jobs in the test stage complete successfully.
  needs:
    - sver-tags
    - build-main
  dependencies:
    - sver-tags
    - build-main
  only:
    - main
  image:
    name: quay.io/podman/stable
  script:
    - ./scripts/dockerbuild

deploy-all: # This job runs in the deploy stage.
  stage: deploy # It only runs when *both* jobs in the test stage complete successfully.
  needs:
    - sver-tags
    - build-main-all
  dependencies:
    - sver-tags
    - build-main-all
  only:
    - main
  image:
    name: quay.io/podman/stable
  script:
    - podman login -u "${DO_API_TOKEN}" -p "${DO_API_TOKEN}" "registry.digitalocean.com/keibi"
    - podman build -f  docker/SteampipeServiceDockerfile . -t registry.digitalocean.com/keibi/steampipe-service:$SVER_VERSION
    - podman build -f  docker/AuthServiceDockerfile . -t registry.digitalocean.com/keibi/auth-service:$SVER_VERSION
    - podman build -f  docker/CheckupWorkerDockerfile . -t registry.digitalocean.com/keibi/checkup-worker:$SVER_VERSION
    - podman build -f  docker/ComplianceReportWorkerDockerfile . -t registry.digitalocean.com/keibi/compliance-report-worker:$SVER_VERSION
    - podman build -f  docker/ComplianceServiceDockerfile . -t registry.digitalocean.com/keibi/compliance-service:$SVER_VERSION
    - podman build -f  docker/DescribeSchedulerDockerfile . -t registry.digitalocean.com/keibi/describe-scheduler:$SVER_VERSION
    - podman build -f  docker/InsightWorkerDockerfile . -t registry.digitalocean.com/keibi/insight-worker:$SVER_VERSION
    - podman build -f  docker/InventoryServiceDockerfile . -t registry.digitalocean.com/keibi/inventory-service:$SVER_VERSION
    - podman build -f  docker/MetadataServiceDockerfile . -t registry.digitalocean.com/keibi/metadata-service:$SVER_VERSION
    - podman build -f  docker/MigratorDockerfile . -t registry.digitalocean.com/keibi/migrator:$SVER_VERSION
    - podman build -f  docker/OnboardServiceDockerfile . -t registry.digitalocean.com/keibi/onboard-service:$SVER_VERSION
    - podman build -f  docker/SummarizerWorkerDockerfile . -t registry.digitalocean.com/keibi/summarizer-worker:$SVER_VERSION
    - podman build -f  docker/SwaggerUIDockerfile . -t registry.digitalocean.com/keibi/swagger-ui:$SVER_VERSION
    - podman build -f  docker/WorkspaceServiceDockerfile . -t registry.digitalocean.com/keibi/workspace-service:$SVER_VERSION
    - podman build -f  docker/RedocDockerfile . -t registry.digitalocean.com/keibi/redoc:$SVER_VERSION
    - podman push registry.digitalocean.com/keibi/steampipe-service:$SVER_VERSION
    - podman push registry.digitalocean.com/keibi/auth-service:$SVER_VERSION
    - podman push registry.digitalocean.com/keibi/checkup-worker:$SVER_VERSION
    - podman push registry.digitalocean.com/keibi/compliance-report-worker:$SVER_VERSION
    - podman push registry.digitalocean.com/keibi/compliance-service:$SVER_VERSION
    - podman push registry.digitalocean.com/keibi/describe-scheduler:$SVER_VERSION
    - podman push registry.digitalocean.com/keibi/insight-worker:$SVER_VERSION
    - podman push registry.digitalocean.com/keibi/inventory-service:$SVER_VERSION
    - podman push registry.digitalocean.com/keibi/metadata-service:$SVER_VERSION
    - podman push registry.digitalocean.com/keibi/migrator:$SVER_VERSION
    - podman push registry.digitalocean.com/keibi/onboard-service:$SVER_VERSION
    - podman push registry.digitalocean.com/keibi/summarizer-worker:$SVER_VERSION
    - podman push registry.digitalocean.com/keibi/swagger-ui:$SVER_VERSION
    - podman push registry.digitalocean.com/keibi/workspace-service:$SVER_VERSION
    - podman push registry.digitalocean.com/keibi/redoc:$SVER_VERSION
  when: manual
