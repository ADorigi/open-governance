image: golang:latest

stages:
  - build
  - lint
  - test
  - deploy

.go-cache:
  variables:
    GOPATH: $CI_PROJECT_DIR/.go
    GOCACHE: $CI_PROJECT_DIR/.cache/linux
  before_script:
    - mkdir -p .go
    - mkdir -p .cache
  cache:
    - key: go-cache
      paths:
        - .go/pkg/mod/
        - .cache/

build:
  stage: build
  extends: .go-cache
  artifacts:
    paths:
      - build/
    expire_in: 1 hour
  script:
    - echo -e "machine gitlab.com login gitlab-ci-token password ${CI_JOB_TOKEN}" > ~/.netrc
    - make

golangci-lint:
  stage: lint
  image:
    name: golangci/golangci-lint:v1.45
    entrypoint: [""]
  extends: .go-cache
  variables:
    GOLANGCI_LINT_CACHE: ${CI_PROJECT_DIR}/.linter-cache
  cache:
    - key: linter-cache
      paths:
        - .linter-cache/
    - key: go-cache
      paths:
        - .go/pkg/mod/
        - .cache/
      policy: pull
  script:
    - golangci-lint run -v


test:
  stage: test
  extends: .go-cache
  services:
    - docker:dind
  variables:
    DOCKER_HOST: tcp://docker:2376
    DOCKER_TLS_CERTDIR: "/certs"
    DOCKER_TLS_VERIFY: 1
    DOCKER_CERT_PATH: "$DOCKER_TLS_CERTDIR/client"
    DOCKERTEST_HOST: docker
  script:
    - go test -v ./...
  allow_failure: true
  cache:
    - key: go-cache
      paths:
        - .go/pkg/mod/
        - .cache/
      policy: pull

sver-tags:
  stage: deploy
  only:
    - main
  variables:
    SVER_IMAGE_VERSION: "1" # Optional. The version of the sver docker image to use.
  image:
    name: 'ghcr.io/aserto-dev/sver:${SVER_IMAGE_VERSION}'
    entrypoint: [""]
  script:
    - ./scripts/sver.sh >> sver.env
    - source ./sver.env
    - git tag $SVER_VERSION &> /dev/null
    - git push "https://oauth2:${OAUTH_TOKEN}@gitlab.com/${CI_PROJECT_PATH}.git" --tags
  artifacts:
    reports:
      dotenv: sver.env

deploy: # This job runs in the deploy stage.
  stage: deploy # It only runs when *both* jobs in the test stage complete successfully.
  needs:
    - sver-tags
    - build
  dependencies:
    - sver-tags
    - build
  only:
    - main
  image:
    name: quay.io/podman/stable
  script:
    - podman login -u "${DO_API_TOKEN}" -p "${DO_API_TOKEN}" "registry.digitalocean.com/keibi"
    - podman build -f  docker/DescribeSchedulerDockerfile . -t registry.digitalocean.com/keibi/describe-scheduler:$SVER_VERSION
    - podman build -f  docker/DescribeWorkerDockerfile . -t registry.digitalocean.com/keibi/describe-worker:$SVER_VERSION
    - podman build -f  docker/DescribeCleanupWorkerDockerfile . -t registry.digitalocean.com/keibi/describe-cleanup-worker:$SVER_VERSION
    - podman build -f  docker/ComplianceReportWorkerDockerfile . -t registry.digitalocean.com/keibi/compliance-report-worker:$SVER_VERSION
    - podman build -f  docker/OnboardServiceDockerfile . -t registry.digitalocean.com/keibi/onboard-service:$SVER_VERSION
    - podman build -f  docker/InventoryServiceDockerfile . -t registry.digitalocean.com/keibi/inventory-service:$SVER_VERSION
    - podman build -f  docker/SwaggerUIDockerfile . -t registry.digitalocean.com/keibi/swagger-ui:$SVER_VERSION
    - podman build -f  docker/SteampipeServiceDockerfile . -t registry.digitalocean.com/keibi/steampipe-service:$SVER_VERSION
    - podman build -f  docker/AuthServiceDockerfile . -t registry.digitalocean.com/keibi/auth-service:$SVER_VERSION
    - podman push registry.digitalocean.com/keibi/describe-scheduler:$SVER_VERSION
    - podman push registry.digitalocean.com/keibi/describe-worker:$SVER_VERSION
    - podman push registry.digitalocean.com/keibi/describe-cleanup-worker:$SVER_VERSION
    - podman push registry.digitalocean.com/keibi/compliance-report-worker:$SVER_VERSION
    - podman push registry.digitalocean.com/keibi/onboard-service:$SVER_VERSION
    - podman push registry.digitalocean.com/keibi/inventory-service:$SVER_VERSION
    - podman push registry.digitalocean.com/keibi/swagger-ui:$SVER_VERSION
    - podman push registry.digitalocean.com/keibi/steampipe-service:$SVER_VERSION
    - podman push registry.digitalocean.com/keibi/auth-service:$SVER_VERSION
