# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Go

on:
  workflow_dispatch:
    inputs:
      servicesList:
        type: string
        description: 'List of services to build'
        required: false
        default: ''
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: registry.digitalocean.com
  # github.repository as <account>/<repo>
  IMAGE_NAME: keibi/temp

jobs:
  build:
    runs-on: ubuntu-latest-16-cores
    environment: golang
    env:
      SERVICE_LIST: ${{ github.event.inputs.servicesList }}
      GH_ACCESS_TOKEN: ${{ secrets.GH_ACCESS_TOKEN }}
    steps:
    - name: Install musl cc
      uses: awalsh128/cache-apt-pkgs-action@v1
      with:
        packages: musl-tools musl-dev musl
    - uses: actions/checkout@v3
      with:
        fetch-depth: 5
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version-file: './go.mod'
    - run: git config --global url.https://$GH_ACCESS_TOKEN@github.com/kaytu-io.insteadOf https://github.com/kaytu-io
    - name: Build services
      run: make build
    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: build
        path: build
  test-output:
    runs-on: ubuntu-latest
    needs:
      - build
    environment: golang
    env: {{ needs.build.outputs }}
    steps:
      - name: print env
        run: |
          printenv
  tag:
    runs-on: ubuntu-latest
    needs:
      - build
    environment: golang
    if: github.event_name != 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Tag version
        id: tag_version
        uses: mathieudutour/github-tag-action@v6
        with:
          github_token: ${{ secrets.GH_ACCESS_TOKEN }}
          release_branches: main
          tag_prefix: v
      - name: Set latest tag output
        run: |
          if [[ -z "${{ steps.tag_version.outputs.new_tag }}" ]]; then
            echo "latest_tag=${{ steps.tag_version.outputs.new_tag }}" >> "$GITHUB_OUTPUT"
          else
            echo "latest_tag=${{ steps.tag_version.outputs.previous_tag }}" >> "$GITHUB_OUTPUT"
          fi
  deploy-steampipe:
    runs-on: ubuntu-latest
    needs:
      - build
      - tag
    environment: docker
    if: needs.build.outputs.steampipe == 'true' && github.event_name != 'pull_request'
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    - name: Download artifact
      uses: actions/download-artifact@v3
      with:
          name: build
          path: build
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-region: ${{ vars.AWS_REGION }}
        role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
    - uses: docker/login-action@v2
      with:
        registry: ${{ vars.DOCKER_REGISTRY }}
    - name: Build and push Docker images
      uses: docker/build-push-action@v4
      with:
        push: true
        tags: ${{ vars.DOCKER_REGISTRY }}/steampipe-service:{{ needs.tag.outputs.latest_tag }}
        file: docker/SteampipeServiceDockerfile
        context: .
  deploy-auth-service:
    runs-on: ubuntu-latest
    needs:
      - build
      - tag
    environment: docker
    if: needs.build.outputs.auth-service == 'true' && github.event_name != 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: build
          path: build
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
      - uses: docker/login-action@v2
        with:
          registry: ${{ vars.DOCKER_REGISTRY }}
      - name: Build and push Docker images
        uses: docker/build-push-action@v4
        with:
          push: true
          tags: ${{ vars.DOCKER_REGISTRY }}/auth-service:{{ needs.tag.outputs.latest_tag }}
          file: docker/AuthServiceDockerfile
          context: .
  deploy-checkup-worker:
    runs-on: ubuntu-latest
    needs:
      - build
      - tag
    environment: docker
    if: needs.build.outputs.checkup-worker == 'true' && github.event_name != 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: build
          path: build
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
      - uses: docker/login-action@v2
        with:
          registry: ${{ vars.DOCKER_REGISTRY }}
      - name: Build and push Docker images
        uses: docker/build-push-action@v4
        with:
          push: true
          tags: ${{ vars.DOCKER_REGISTRY }}/checkup-worker:{{ needs.tag.outputs.latest_tag }}
          file: docker/CheckupWorkerDockerfile
          context: .
  deploy-compliance-report-worker:
    runs-on: ubuntu-latest
    needs:
      - build
      - tag
    environment: docker
    if: needs.build.outputs.compliance-report-worker == 'true' && github.event_name != 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: build
          path: build
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
      - uses: docker/login-action@v2
        with:
          registry: ${{ vars.DOCKER_REGISTRY }}
      - name: Build and push Docker images
        uses: docker/build-push-action@v4
        with:
          push: true
          tags: ${{ vars.DOCKER_REGISTRY }}/compliance-report-worker:{{ needs.tag.outputs.latest_tag }}
          file: docker/ComplianceReportWorkerDockerfile
          context: .
  deploy-compliance-service:
    runs-on: ubuntu-latest
    needs:
      - build
      - tag
    environment: docker
    if: needs.build.outputs.compliance-service == 'true' && github.event_name != 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: build
          path: build
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
      - uses: docker/login-action@v2
        with:
          registry: ${{ vars.DOCKER_REGISTRY }}
      - name: Build and push Docker images
        uses: docker/build-push-action@v4
        with:
          push: true
          tags: ${{ vars.DOCKER_REGISTRY }}/compliance-service:{{ needs.tag.outputs.latest_tag }}
          file: docker/ComplianceServiceDockerfile
          context: .
  deploy-describe-scheduler:
    runs-on: ubuntu-latest
    needs:
      - build
      - tag
    environment: docker
    if: needs.build.outputs.describe-scheduler == 'true' && github.event_name != 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: build
          path: build
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
      - uses: docker/login-action@v2
        with:
          registry: ${{ vars.DOCKER_REGISTRY }}
      - name: Build and push Docker images
        uses: docker/build-push-action@v4
        with:
          push: true
          tags: ${{ vars.DOCKER_REGISTRY }}/describe-scheduler:{{ needs.tag.outputs.latest_tag }}
          file: docker/DescribeSchedulerDockerfile
          context: .
  deploy-hopper:
    runs-on: ubuntu-latest
    needs:
      - build
      - tag
    environment: docker
    if: needs.build.outputs.hopper == 'true' && github.event_name != 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: build
          path: build
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
      - uses: docker/login-action@v2
        with:
          registry: ${{ vars.DOCKER_REGISTRY }}
      - name: Build and push Docker images
        uses: docker/build-push-action@v4
        with:
          push: true
          tags: ${{ vars.DOCKER_REGISTRY }}/hopper:{{ needs.tag.outputs.latest_tag }}
          file: docker/HopperDockerfile
          context: .
  deploy-reporter:
    runs-on: ubuntu-latest
    needs:
      - build
      - tag
    environment: docker
    if: needs.build.outputs.reporter == 'true' && github.event_name != 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: build
          path: build
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
      - uses: docker/login-action@v2
        with:
          registry: ${{ vars.DOCKER_REGISTRY }}
      - name: Build and push Docker images
        uses: docker/build-push-action@v4
        with:
          push: true
          tags: ${{ vars.DOCKER_REGISTRY }}/reporter:{{ needs.tag.outputs.latest_tag }}
          file: docker/ReporterDockerfile
          context: .
  deploy-insight-worker:
    runs-on: ubuntu-latest
    needs:
      - build
      - tag
    environment: docker
    if: needs.build.outputs.insight-worker == 'true' && github.event_name != 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: build
          path: build
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
      - uses: docker/login-action@v2
        with:
          registry: ${{ vars.DOCKER_REGISTRY }}
      - name: Build and push Docker images
        uses: docker/build-push-action@v4
        with:
          push: true
          tags: ${{ vars.DOCKER_REGISTRY }}/insight-worker:{{ needs.tag.outputs.latest_tag }}
          file: docker/InsightWorkerDockerfile
          context: .
  deploy-inventory-service:
    runs-on: ubuntu-latest
    needs:
      - build
      - tag
    environment: docker
    if: needs.build.outputs.inventory-service == 'true' && github.event_name != 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: build
          path: build
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
      - uses: docker/login-action@v2
        with:
          registry: ${{ vars.DOCKER_REGISTRY }}
      - name: Build and push Docker images
        uses: docker/build-push-action@v4
        with:
          push: true
          tags: ${{ vars.DOCKER_REGISTRY }}/inventory-service:{{ needs.tag.outputs.latest_tag }}
          file: docker/InventoryServiceDockerfile
          context: .
  deploy-metadata-service:
    runs-on: ubuntu-latest
    needs:
      - build
      - tag
    environment: docker
    if: needs.build.outputs.metadata-service == 'true' && github.event_name != 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: build
          path: build
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
      - uses: docker/login-action@v2
        with:
          registry: ${{ vars.DOCKER_REGISTRY }}
      - name: Build and push Docker images
        uses: docker/build-push-action@v4
        with:
          push: true
          tags: ${{ vars.DOCKER_REGISTRY }}/metadata-service:{{ needs.tag.outputs.latest_tag }}
          file: docker/MetadataServiceDockerfile
          context: .
  deploy-migrator-worker:
    runs-on: ubuntu-latest
    needs:
      - build
      - tag
    environment: docker
    if: needs.build.outputs.migrator-worker == 'true' && github.event_name != 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: build
          path: build
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
      - uses: docker/login-action@v2
        with:
          registry: ${{ vars.DOCKER_REGISTRY }}
      - name: Build and push Docker images
        uses: docker/build-push-action@v4
        with:
          push: true
          tags: ${{ vars.DOCKER_REGISTRY }}/migrator:{{ needs.tag.outputs.latest_tag }}
          file: docker/MigratorDockerfile
          context: .
  deploy-onboard-service:
    runs-on: ubuntu-latest
    needs:
      - build
      - tag
    environment: docker
    if: needs.build.outputs.onboard-service == 'true' && github.event_name != 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: build
          path: build
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
      - uses: docker/login-action@v2
        with:
          registry: ${{ vars.DOCKER_REGISTRY }}
      - name: Build and push Docker images
        uses: docker/build-push-action@v4
        with:
          push: true
          tags: ${{ vars.DOCKER_REGISTRY }}/onboard-service:{{ needs.tag.outputs.latest_tag }}
          file: docker/OnboardServiceDockerfile
          context: .
  deploy-summarizer-worker:
    runs-on: ubuntu-latest
    needs:
      - build
      - tag
    environment: docker
    if: needs.build.outputs.summarizer-worker == 'true' && github.event_name != 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: build
          path: build
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
      - uses: docker/login-action@v2
        with:
          registry: ${{ vars.DOCKER_REGISTRY }}
      - name: Build and push Docker images
        uses: docker/build-push-action@v4
        with:
          push: true
          tags: ${{ vars.DOCKER_REGISTRY }}/summarizer-worker:{{ needs.tag.outputs.latest_tag }}
          file: docker/SummarizerWorkerDockerfile
          context: .
  deploy-swagger-ui:
    runs-on: ubuntu-latest
    needs:
      - build
      - tag
    environment: docker
    if: needs.build.outputs.swagger-ui == 'true' && github.event_name != 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: build
          path: build
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
      - uses: docker/login-action@v2
        with:
          registry: ${{ vars.DOCKER_REGISTRY }}
      - name: Build and push Docker images
        uses: docker/build-push-action@v4
        with:
          push: true
          tags: ${{ vars.DOCKER_REGISTRY }}/swagger-ui:{{ needs.tag.outputs.latest_tag }}
          file: docker/SwaggerUIDockerfile
          context: .
  deploy-redoc:
    runs-on: ubuntu-latest
    needs:
      - build
      - tag
    environment: docker
    if: needs.build.outputs.swagger-ui == 'true' && github.event_name != 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: build
          path: build
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
      - uses: docker/login-action@v2
        with:
          registry: ${{ vars.DOCKER_REGISTRY }}
      - name: Build and push Docker images
        uses: docker/build-push-action@v4
        with:
          push: true
          tags: ${{ vars.DOCKER_REGISTRY }}/redoc:{{ needs.tag.outputs.latest_tag }}
          file: docker/RedocDockerfile
          context: .
  deploy-workspace-service:
    runs-on: ubuntu-latest
    needs:
      - build
      - tag
    environment: docker
    if: needs.build.outputs.workspace-service == 'true' && github.event_name != 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: build
          path: build
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
      - uses: docker/login-action@v2
        with:
          registry: ${{ vars.DOCKER_REGISTRY }}
      - name: Build and push Docker images
        uses: docker/build-push-action@v4
        with:
          push: true
          tags: ${{ vars.DOCKER_REGISTRY }}/workspace-service:{{ needs.tag.outputs.latest_tag }}
          file: docker/WorkspaceServiceDockerfile
          context: .
