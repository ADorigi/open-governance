package cloudservice

import "strings"

const (
	cloudProviderIdx      = 0
	resourceTypePrefixIdx = 1
	serviceNameIdx        = 2
	categoryIdx           = 3
)

var mapping = [][]string{
	{"Azure", "Microsoft.AAD", "Azure Active Directory", "Identity"},
	{"Azure", "Microsoft.Addons", "Azure Core", "Other"},
	{"Azure", "Microsoft.App", "Azure Container Apps", "Container"},
	{"Azure", "Microsoft.ADHybridHealthService - registered", "Azure Active Directory", "Identity"},
	{"Azure", "Microsoft.Advisor", "Azure Advisor", "Security"},
	{"Azure", "Microsoft.AlertsManagement", "Azure Monitor", "Monitoring"},
	{"Azure", "Microsoft.AnalysisServices", "Azure Analysis Services", "Governance"},
	{"Azure", "Microsoft.ApiManagement", "API Management", "App Management"},
	{"Azure", "Microsoft.AppConfiguration", "Azure App Configuration", "App Management"},
	{"Azure", "Microsoft.AppPlatform", "Azure Spring Cloud", "App Env"},
	{"Azure", "Microsoft.Attestation", "Azure Attestation Service", "Governance"},
	{"Azure", "Microsoft.Authorization - registered", "Azure Resource Manager", "Management"},
	{"Azure", "Microsoft.Automation", "Automation", "Serverless"},
	{"Azure", "Microsoft.AutonomousSystems", "Autonomous Systems", "Serverless"},
	{"Azure", "Microsoft.AVS", "Azure VMware Solution", "Hybrid Cloud"},
	{"Azure", "Microsoft.AzureActiveDirectory", "Azure Active Directory B2C", "Identity"},
	{"Azure", "Microsoft.AzureArcData", "Azure Arc-enabled data services", "Database"},
	{"Azure", "Microsoft.AzureData", "SQL Server registry", "Database"},
	{"Azure", "Microsoft.AzureStack", "Azure Core", "Other"},
	{"Azure", "Microsoft.AzureStackHCI", "Azure Stack HCI", "Other"},
	{"Azure", "Microsoft.Batch", "Batch", "Serverless"},
	{"Azure", "Microsoft.Billing - registered", "Cost Management and Billing", "Governance"},
	{"Azure", "Microsoft.BingMaps", "Bing Maps", "Other"},
	{"Azure", "Microsoft.Blockchain", "Azure Blockchain Service", "Other"},
	{"Azure", "Microsoft.BlockchainTokens", "Azure Blockchain Tokens", "Other"},
	{"Azure", "Microsoft.Blueprint", "Azure Blueprints", "Governance"},
	{"Azure", "Microsoft.BotService", "Azure Bot Service", "Governance"},
	{"Azure", "Microsoft.Cache", "Azure Cache for Redis", "Data Services"},
	{"Azure", "Microsoft.Capacity", "Azure Core", "Other"},
	{"Azure", "Microsoft.Cdn", "Content Delivery Network", "Networking"},
	{"Azure", "Microsoft.CertificateRegistration", "App Service Certificates", "App Env (PaaS)"},
	{"Azure", "Microsoft.ChangeAnalysis", "Azure Monitor", "Monitoring"},
	{"Azure", "Microsoft.ClassicCompute", "Classic deployment model virtual machine", "Classic"},
	{"Azure", "Microsoft.ClassicInfrastructureMigrate", "Classic deployment model migration", "Classic"},
	{"Azure", "Microsoft.ClassicNetwork", "Classic deployment model virtual network", "Classic"},
	{"Azure", "Microsoft.ClassicStorage", "Classic deployment model storage", "Classic"},
	{"Azure", "Microsoft.ClassicSubscription - registered", "Classic deployment model", "Classic"},
	{"Azure", "Microsoft.CognitiveServices", "Cognitive Services", "AI + ML"},
	{"Azure", "Microsoft.Commerce - registered", "Azure Core", "Other"},
	{"Azure", "Microsoft.Compute", "Virtual Machines", "Infrastructure"},
	{"Azure", "Microsoft.Compute", "Virtual Machine Scale Sets", "Elastic"},
	{"Azure", "Microsoft.Consumption - registered", "Cost Management", "Governance"},
	{"Azure", "Microsoft.ContainerInstance", "Container Instances", "Container"},
	{"Azure", "Microsoft.ContainerRegistry", "Container Registry", "Container"},
	{"Azure", "Microsoft.ContainerService", "Azure Kubernetes Service (AKS)", "Container"},
	{"Azure", "Microsoft.CostManagement - registered", "Cost Management", "Governance"},
	{"Azure", "Microsoft.CostManagementExports", "Cost Management", "Governance"},
	{"Azure", "Microsoft.CustomerLockbox", "Customer Lockbox for Microsoft Azure", "Security"},
	{"Azure", "Microsoft.CustomProviders", "Azure Custom Providers", "Governance"},
	{"Azure", "Microsoft.DataBox", "Azure Data Box", "Data Services"},
	{"Azure", "Microsoft.DataBoxEdge", "Azure Stack Edge", "Data Services"},
	{"Azure", "Microsoft.Databricks", "Azure Databricks", "Data Services"},
	{"Azure", "Microsoft.DataCatalog", "Data Catalog", "Data Services"},
	{"Azure", "Microsoft.DataFactory", "Data Factory", "Data Services"},
	{"Azure", "Microsoft.DataLakeAnalytics", "Data Lake Analytics", "Data Services"},
	{"Azure", "Microsoft.DataLakeStore", "Azure Data Lake Storage Gen2", "Data Services"},
	{"Azure", "Microsoft.DataMigration", "Azure Database Migration Service", "Data Services"},
	{"Azure", "Microsoft.DataProtection", "Data Protection", "Security"},
	{"Azure", "Microsoft.DataShare", "Azure Data Share", "Data Services"},
	{"Azure", "Microsoft.DBforMariaDB", "Azure Database for MariaDB", "Database"},
	{"Azure", "Microsoft.DBforMySQL", "Azure Database for MySQL", "Database"},
	{"Azure", "Microsoft.DBforPostgreSQL", "Azure Database for PostgreSQL", "Database"},
	{"Azure", "Microsoft.DesktopVirtualization", "Azure Virtual Desktop", "EUC"},
	{"Azure", "Microsoft.Devices", "Azure IoT Hub", "IoT"},
	{"Azure", "Microsoft.Devices", "Azure IoT Hub Device Provisioning Service", "IoT"},
	{"Azure", "Microsoft.DeviceUpdate", "Device Update for IoT Hub", "IoT"},
	{"Azure", "Microsoft.DevOps", "Azure DevOps", "DevOps"},
	{"Azure", "Microsoft.DevSpaces", "Azure Dev Spaces", "DevOps"},
	{"Azure", "Microsoft.DevTestLab", "Azure Lab Services", "DevOps"},
	{"Azure", "Microsoft.DigitalTwins", "Azure Digital Twins", "Other"},
	{"Azure", "Microsoft.DocumentDB", "Azure Cosmos DB", "Database"},
	{"Azure", "Microsoft.DomainRegistration", "App Service", "App Env"},
	{"Azure", "Microsoft.DynamicsLcs", "Lifecycle Services", "Database"},
	{"Azure", "Microsoft.EnterpriseKnowledgeGraph", "Enterprise Knowledge Graph", "Database"},
	{"Azure", "Microsoft.EventGrid", "Event Grid", "Messaging"},
	{"Azure", "Microsoft.EventHub", "Event Hubs", "Messaging"},
	{"Azure", "Microsoft.Features - registered", "Azure Resource Manager", "Governance"},
	{"Azure", "Microsoft.GuestConfiguration", "Azure Policy", "Security"},
	{"Azure", "Microsoft.HanaOnAzure", "SAP HANA on Azure Large Instances", "Other"},
	{"Azure", "Microsoft.HardwareSecurityModules", "Azure Dedicated HSM", "Other"},
	{"Azure", "Microsoft.HDInsight", "HDInsight", "Big Data"},
	{"Azure", "Microsoft.HealthcareApis (Azure API for FHIR)", "Azure API for FHIR", "Governance"},
	{"Azure", "Microsoft.HealthcareApis (Healthcare APIs)", "Healthcare APIs", "Governance"},
	{"Azure", "Microsoft.HybridCompute", "Azure Arc-enabled servers", "Hybrid Cloud"},
	{"Azure", "Microsoft.HybridData", "StorSimple", "Storage"},
	{"Azure", "Microsoft.HybridNetwork", "Network Function Manager", "Networking"},
	{"Azure", "Microsoft.ImportExport", "Azure Import/Export", "Hybrid Cloud"},
	{"Azure", "Microsoft.Insights", "Azure Monitor", "Monitoring"},
	{"Azure", "Microsoft.IoTCentral", "Azure IoT Central", "IoT"},
	{"Azure", "Microsoft.IoTSpaces", "Azure Digital Twins", "IoT"},
	{"Azure", "Microsoft.Intune", "Azure Monitor", "Monitoring"},
	{"Azure", "Microsoft.KeyVault", "Key Vault", "Security"},
	{"Azure", "Microsoft.Kubernetes", "Azure Arc-enabled Kubernetes", "Container"},
	{"Azure", "Microsoft.KubernetesConfiguration", "Azure Arc-enabled Kubernetes", "Container"},
	{"Azure", "Microsoft.Kusto", "Azure Data Explorer", "Data Services"},
	{"Azure", "Microsoft.LabServices", "Azure Lab Services", "DevOps"},
	{"Azure", "Microsoft.Logic", "Logic Apps", "App Env"},
	{"Azure", "Microsoft.MachineLearning", "Machine Learning Studio", "AI + ML"},
	{"Azure", "Microsoft.MachineLearningServices", "Azure Machine Learning", "AI + ML"},
	{"Azure", "Microsoft.Maintenance", "Azure Maintenance", "Management"},
	{"Azure", "Microsoft.ManagedIdentity", "Managed identities for Azure resources", "Identity"},
	{"Azure", "Microsoft.ManagedNetwork", "Virtual networks managed by PaaS services", "Networking"},
	{"Azure", "Microsoft.ManagedServices", "Azure Lighthouse", "Management"},
	{"Azure", "Microsoft.Management", "Management Groups", "Management"},
	{"Azure", "Microsoft.Maps", "Azure Maps", "SaaS"},
	{"Azure", "Microsoft.Marketplace", "Azure Core", "Other"},
	{"Azure", "Microsoft.MarketplaceApps", "Azure Core", "Other"},
	{"Azure", "Microsoft.MarketplaceOrdering - registered", "Azure Core", "Other"},
	{"Azure", "Microsoft.Media", "Media Services", "Media"},
	{"Azure", "Microsoft.Microservices4Spring", "Azure Spring Cloud", "App Env"},
	{"Azure", "Microsoft.Migrate", "Azure Migrate", "Migration"},
	{"Azure", "Microsoft.MixedReality", "Azure Spatial Anchors", "AI + ML"},
	{"Azure", "Microsoft.NetApp", "Azure NetApp Files", "Network Storage"},
	{"Azure", "Microsoft.Network", "Application Gateway", "Networking"},
	{"Azure", "Microsoft.Network", "Azure Bastion", "Networking"},
	{"Azure", "Microsoft.Network", "Azure DDoS Protection", "Networking"},
	{"Azure", "Microsoft.Network", "Azure DNS", "Networking"},
	{"Azure", "Microsoft.Network", "Azure ExpressRoute", "Networking"},
	{"Azure", "Microsoft.Network", "Azure Firewall", "Networking"},
	{"Azure", "Microsoft.Network", "Azure Front Door Service", "Networking"},
	{"Azure", "Microsoft.Network", "Azure Private Link", "Networking"},
	{"Azure", "Microsoft.Network", "Azure Route Server", "Networking"},
	{"Azure", "Microsoft.Network", "Load Balancer", "Networking"},
	{"Azure", "Microsoft.Network", "Network Watcher", "Networking"},
	{"Azure", "Microsoft.Network", "Traffic Manager", "Networking"},
	{"Azure", "Microsoft.Network", "Virtual Network", "Networking"},
	{"Azure", "Microsoft.Network", "Virtual Network NAT", "Networking"},
	{"Azure", "Microsoft.Network", "Virtual WAN", "Networking"},
	{"Azure", "Microsoft.Network", "VPN Gateway", "Networking"},
	{"Azure", "Microsoft.Notebooks", "Azure Notebooks", "Other"},
	{"Azure", "Microsoft.NotificationHubs", "Notification Hubs", "Monitoring"},
	{"Azure", "Microsoft.ObjectStore", "Object Store", "Storage"},
	{"Azure", "Microsoft.OffAzure", "Azure Migrate", "Migration"},
	{"Azure", "Microsoft.OperationalInsights", "Azure Monitor", "Monitoring"},
	{"Azure", "Microsoft.OperationsManagement", "Azure Monitor", "Monitoring"},
	{"Azure", "Microsoft.Peering", "Azure Peering Service", "Networking"},
	{"Azure", "Microsoft.PolicyInsights", "Azure Policy", "Governance"},
	{"Azure", "Microsoft.Portal - registered", "Azure portal", "Other"},
	{"Azure", "Microsoft.PowerBI", "Power BI", "Analytics"},
	{"Azure", "Microsoft.PowerBIDedicated", "Power BI Embedded", "Analytics"},
	{"Azure", "Microsoft.PowerPlatform", "Power Platform", "Analytics"},
	{"Azure", "Microsoft.ProjectBabylon", "Azure Data Catalog", "Data Services"},
	{"Azure", "Microsoft.Quantum", "Azure Quantum", "Data Services"},
	{"Azure", "Microsoft.RecoveryServices", "Azure Site Recovery", "Resiliency"},
	{"Azure", "Microsoft.RedHatOpenShift", "Azure Red Hat OpenShift", "Other"},
	{"Azure", "Microsoft.Relay", "Azure Relay", "Other"},
	{"Azure", "Microsoft.ResourceGraph - registered", "Azure Resource Graph", "Governance"},
	{"Azure", "Microsoft.ResourceHealth", "Azure Service Health", "Monitoring"},
	{"Azure", "Microsoft.Resources - registered", "Azure Resource Manager", "Other"},
	{"Azure", "Microsoft.SaaS", "Azure Core", "Other"},
	{"Azure", "Microsoft.Scheduler", "Scheduler", "Automation"},
	{"Azure", "Microsoft.Search", "Azure Cognitive Search", "AI + ML"},
	{"Azure", "Microsoft.Security", "Security Center", "Security"},
	{"Azure", "Microsoft.SecurityInsights", "Microsoft Sentinel", "Security"},
	{"Azure", "Microsoft.SerialConsole - registered", "Azure Serial Console for Windows", "Other"},
	{"Azure", "Microsoft.ServiceBus", "Service Bus", "Messaging"},
	{"Azure", "Microsoft.ServiceFabric", "Service Fabric", "Managed Platform"},
	{"Azure", "Microsoft.Services", "Azure Core", "Other"},
	{"Azure", "Microsoft.SignalRService", "Azure SignalR Service", "AI + ML"},
	{"Azure", "Microsoft.SoftwarePlan", "License", "Other"},
	{"Azure", "Microsoft.Solutions", "Azure Managed Applications", "Other"},
	{"Azure", "Microsoft.Sql", "Azure SQL Database", "Database"},
	{"Azure", "Microsoft.Sql", "Azure SQL Managed Instance", "Database"},
	{"Azure", "Microsoft.Sql", "Azure Synapse Analytics", "Analytics"},
	{"Azure", "Microsoft.SqlVirtualMachine", "SQL Server on Azure Virtual Machines", "Database"},
	{"Azure", "Microsoft.Storage", "Storage", "Storage"},
	{"Azure", "Microsoft.StorageCache", "Azure HPC Cache", "Other"},
	{"Azure", "Microsoft.StorageSync", "Storage", "Storage"},
	{"Azure", "Microsoft.StorSimple", "StorSimple", "Storage"},
	{"Azure", "Microsoft.StreamAnalytics", "Azure Stream Analytics", "Analytics"},
	{"Azure", "Microsoft.Subscription", "Azure Core", "Subscription"},
	{"Azure", "microsoft.support - registered", "Azure Core", "Other"},
	{"Azure", "Microsoft.Synapse", "Azure Synapse Analytics", "Analytics"},
	{"Azure", "Microsoft.TimeSeriesInsights", "Azure Time Series Insights", "Database"},
	{"Azure", "Microsoft.Token", "Token", "Security"},
	{"Azure", "Microsoft.VirtualMachineImages", "Azure Image Builder", "Infrastructure"},
	{"Azure", "microsoft.visualstudio", "Azure DevOps", "DevOps"},
	{"Azure", "Microsoft.VMware", "Azure VMware Solution", "Hybrid Cloud"},
	{"Azure", "Microsoft.VMwareCloudSimple", "Azure VMware Solution by CloudSimple", "Hybrid Cloud"},
	{"Azure", "Microsoft.VSOnline", "Azure DevOps", "DevOps"},
	{"Azure", "Microsoft.Web", "App Service", "App Env"},
	{"Azure", "Microsoft.Web", "Azure Functions", "Serverless"},
	{"Azure", "Microsoft.WindowsDefenderATP", "Microsoft Defender Advanced Threat Protection", "Security"},
	{"Azure", "Microsoft.WindowsESU", "Extended Security Updates", "Other"},
	{"Azure", "Microsoft.WindowsIoT", "Windows 10 IoT Azure Core Services", "IoT"},
	{"Azure", "Microsoft.WorkloadMonitor", "Azure Monitor", "Monitoring"},
	{"AWS", "AWS::CertificateManager::Account", "Certificate Manager Account", "Security"},
	{"AWS", "AWS::CertificateManager::Certificate", "Certificate Manager Certificate", "Security"},
	{"AWS", "AWS::ACMPCA::Certificate", "Private Certificate Authority Certificate", "Security"},
	{"AWS", "AWS::ACMPCA::CertificateAuthority", "Private Certificate Authority CertificateAuthority", "Security"},
	{"AWS", "AWS::ACMPCA::CertificateAuthorityActivation", "Private Certificate Authority CertificateAuthorityActivation", "Security"},
	{"AWS", "AWS::ACMPCA::Permission", "Private Certificate Authority Permission", "Security"},
	{"AWS", "AWS::Amplify::App", "Amplify App", "DevOps"},
	{"AWS", "AWS::Amplify::Branch", "Amplify Branch", "DevOps"},
	{"AWS", "AWS::Amplify::Domain", "Amplify Domain", "DevOps"},
	{"AWS", "AWS::AmplifyUIBuilder::Component", "AmplifyUIBuilder Component", "DevOps"},
	{"AWS", "AWS::AmplifyUIBuilder::Theme", "AmplifyUIBuilder Theme", "DevOps"},
	{"AWS", "AWS::ApiGateway::Account", "API Gateway Account", "Networking"},
	{"AWS", "AWS::ApiGateway::ApiKey", "API Gateway ApiKey", "Networking"},
	{"AWS", "AWS::ApiGateway::Authorizer", "API Gateway Authorizer", "Networking"},
	{"AWS", "AWS::ApiGateway::BasePathMapping", "API Gateway BasePathMapping", "Networking"},
	{"AWS", "AWS::ApiGateway::ClientCertificate", "API Gateway ClientCertificate", "Networking"},
	{"AWS", "AWS::ApiGateway::Deployment", "API Gateway Deployment", "Networking"},
	{"AWS", "AWS::ApiGateway::DocumentationPart", "API Gateway DocumentationPart", "Networking"},
	{"AWS", "AWS::ApiGateway::DocumentationVersion", "API Gateway DocumentationVersion", "Networking"},
	{"AWS", "AWS::ApiGateway::DomainName", "API Gateway DomainName", "Networking"},
	{"AWS", "AWS::ApiGateway::GatewayResponse", "API Gateway GatewayResponse", "Networking"},
	{"AWS", "AWS::ApiGateway::Method", "API Gateway Method", "Networking"},
	{"AWS", "AWS::ApiGateway::Model", "API Gateway Model", "Networking"},
	{"AWS", "AWS::ApiGateway::RequestValidator", "API Gateway RequestValidator", "Networking"},
	{"AWS", "AWS::ApiGateway::Resource", "API Gateway Resource", "Networking"},
	{"AWS", "AWS::ApiGateway::RestApi", "API Gateway RestApi", "Networking"},
	{"AWS", "AWS::ApiGateway::Stage", "API Gateway Stage", "Networking"},
	{"AWS", "AWS::ApiGateway::UsagePlan", "API Gateway UsagePlan", "Networking"},
	{"AWS", "AWS::ApiGateway::UsagePlanKey", "API Gateway UsagePlanKey", "Networking"},
	{"AWS", "AWS::ApiGateway::VpcLink", "API Gateway VpcLink", "Networking"},
	{"AWS", "AWS::ApiGatewayV2::Api", "API Gateway V2 Api", "Networking"},
	{"AWS", "AWS::ApiGatewayV2::ApiGatewayManagedOverrides", "API Gateway V2 ApiGatewayManagedOverrides", "Networking"},
	{"AWS", "AWS::ApiGatewayV2::ApiMapping", "API Gateway V2 ApiMapping", "Networking"},
	{"AWS", "AWS::ApiGatewayV2::Authorizer", "API Gateway V2 Authorizer", "Networking"},
	{"AWS", "AWS::ApiGatewayV2::Deployment", "API Gateway V2 Deployment", "Networking"},
	{"AWS", "AWS::ApiGatewayV2::DomainName", "API Gateway V2 DomainName", "Networking"},
	{"AWS", "AWS::ApiGatewayV2::Integration", "API Gateway V2 Integration", "Networking"},
	{"AWS", "AWS::ApiGatewayV2::IntegrationResponse", "API Gateway V2 IntegrationResponse", "Networking"},
	{"AWS", "AWS::ApiGatewayV2::Model", "API Gateway V2 Model", "Networking"},
	{"AWS", "AWS::ApiGatewayV2::Route", "API Gateway V2 Route", "Networking"},
	{"AWS", "AWS::ApiGatewayV2::RouteResponse", "API Gateway V2 RouteResponse", "Networking"},
	{"AWS", "AWS::ApiGatewayV2::Stage", "API Gateway V2 Stage", "Networking"},
	{"AWS", "AWS::ApiGatewayV2::VpcLink", "API Gateway V2 VpcLink", "Networking"},
	{"AWS", "AWS::AppConfig::Application", "AppConfig Application", "Governance"},
	{"AWS", "AWS::AppConfig::ConfigurationProfile", "AppConfig ConfigurationProfile", "Governance"},
	{"AWS", "AWS::AppConfig::Deployment", "AppConfig Deployment", "Governance"},
	{"AWS", "AWS::AppConfig::DeploymentStrategy", "AppConfig DeploymentStrategy", "Governance"},
	{"AWS", "AWS::AppConfig::Environment", "AppConfig Environment", "Governance"},
	{"AWS", "AWS::AppConfig::HostedConfigurationVersion", "AppConfig HostedConfigurationVersion", "Governance"},
	{"AWS", "AWS::AppFlow::ConnectorProfile", "AppFlow ConnectorProfile", "Application"},
	{"AWS", "AWS::AppFlow::Flow", "AppFlow Flow", "Application"},
	{"AWS", "AWS::AppIntegrations::EventIntegration", "AppIntegrations EventIntegration", "Application"},
	{"AWS", "AWS::ApplicationAutoScaling::ScalableTarget", "Application Auto Scaling ScalableTarget", "Application"},
	{"AWS", "AWS::ApplicationAutoScaling::ScalingPolicy", "Application Auto Scaling ScalingPolicy", "Application"},
	{"AWS", "AWS::AppMesh::GatewayRoute", "App Mesh GatewayRoute", "Application"},
	{"AWS", "AWS::AppMesh::Mesh", "App Mesh Mesh", "Application"},
	{"AWS", "AWS::AppMesh::Route", "App Mesh Route", "Application"},
	{"AWS", "AWS::AppMesh::VirtualGateway", "App Mesh VirtualGateway", "Application"},
	{"AWS", "AWS::AppMesh::VirtualNode", "App Mesh VirtualNode", "Application"},
	{"AWS", "AWS::AppMesh::VirtualRouter", "App Mesh VirtualRouter", "Application"},
	{"AWS", "AWS::AppMesh::VirtualService", "App Mesh VirtualService", "Application"},
	{"AWS", "AWS::AppRunner::Connection", "App Runner Connection", "Application"},
	{"AWS", "AWS::AppRunner::autoscalingconfiguration", "App Runner Autoscaling Configuration", "Application"},
	{"AWS", "AWS::AppRunner::Service", "App Runner Service", "Application"},
	{"AWS", "AWS::AppSync::ApiCache", "AppSync ApiCache", "EUC"},
	{"AWS", "AWS::AppSync::ApiKey", "AppSync ApiKey", "EUC"},
	{"AWS", "AWS::AppSync::DataSource", "AppSync DataSource", "EUC"},
	{"AWS", "AWS::AppSync::DomainName", "AppSync DomainName", "EUC"},
	{"AWS", "AWS::AppSync::DomainNameApiAssociation", "AppSync DomainNameApiAssociation", "EUC"},
	{"AWS", "AWS::AppSync::FunctionConfiguration", "AppSync FunctionConfiguration", "EUC"},
	{"AWS", "AWS::AppSync::GraphQLApi", "AppSync GraphQLApi", "EUC"},
	{"AWS", "AWS::AppSync::GraphQLSchema", "AppSync GraphQLSchema", "EUC"},
	{"AWS", "AWS::AppSync::Resolver", "AppSync Resolver", "EUC"},
	{"AWS", "AWS::APS::RuleGroupsNamespace", "Managed Prometheus RuleGroupsNamespace", "Monitoring"},
	{"AWS", "AWS::APS::Workspace", "Managed Prometheus Workspace", "Monitoring"},
	{"AWS", "AWS::SSO::Assignment", "AWS SSO Assignment", "Identity"},
	{"AWS", "AWS::SSO::InstanceAccessControlAttributeConfiguration", "AWS SSO InstanceAccessControlAttributeConfiguration", "Identity"},
	{"AWS", "AWS::SSO::PermissionSet", "AWS SSO PermissionSet", "Identity"},
	{"AWS", "AWS::StepFunctions::Activity", "Step Functions Activity", "Automation"},
	{"AWS", "AWS::StepFunctions::StateMachine", "Step Functions StateMachine", "Automation"},
	{"AWS", "AWS::SSM::Association", "SSM Association", "Management"},
	{"AWS", "AWS::SSM::Document", "SSM Document", "Management"},
	{"AWS", "AWS::SSM::MaintenanceWindow", "SSM MaintenanceWindow", "Management"},
	{"AWS", "AWS::SSM::MaintenanceWindowTarget", "SSM MaintenanceWindowTarget", "Management"},
	{"AWS", "AWS::SSM::MaintenanceWindowTask", "SSM MaintenanceWindowTask", "Management"},
	{"AWS", "AWS::SSM::Parameter", "SSM Parameter", "Management"},
	{"AWS", "AWS::SSM::PatchBaseline", "SSM PatchBaseline", "Management"},
	{"AWS", "AWS::SSM::ResourceDataSync", "SSM ResourceDataSync", "Management"},
	{"AWS", "AWS::Timestream::Database", "Timestream Database", "Database"},
	{"AWS", "AWS::Timestream::ScheduledQuery", "Timestream ScheduledQuery", "Database"},
	{"AWS", "AWS::Timestream::Table", "Timestream Table", "Database"},
	{"AWS", "AWS::Transfer::Server", "Transfer Server", "Migration"},
	{"AWS", "AWS::Transfer::User", "Transfer User", "Migration"},
	{"AWS", "AWS::Transfer::Workflow", "Transfer Workflow", "Migration"},
	{"AWS", "AWS::WAF::ByteMatchSet", "WAF v1 ByteMatchSet", "Security"},
	{"AWS", "AWS::WAF::IPSet", "WAF v1 IPSet", "Security"},
	{"AWS", "AWS::WAF::Rule", "WAF v1 Rule", "Security"},
	{"AWS", "AWS::WAF::SizeConstraintSet", "WAF v1 SizeConstraintSet", "Security"},
	{"AWS", "AWS::WAF::SqlInjectionMatchSet", "WAF v1 SqlInjectionMatchSet", "Security"},
	{"AWS", "AWS::WAF::WebACL", "WAF v1 WebACL", "Security"},
	{"AWS", "AWS::WAF::XssMatchSet", "WAF v1 XssMatchSet", "Security"},
	{"AWS", "AWS::WAFRegional::ByteMatchSet", "Regional WAF ByteMatchSet", "Security"},
	{"AWS", "AWS::WAFRegional::GeoMatchSet", "Regional WAF GeoMatchSet", "Security"},
	{"AWS", "AWS::WAFRegional::IPSet", "Regional WAF IPSet", "Security"},
	{"AWS", "AWS::WAFRegional::RateBasedRule", "Regional WAF RateBasedRule", "Security"},
	{"AWS", "AWS::WAFRegional::RegexPatternSet", "Regional WAF RegexPatternSet", "Security"},
	{"AWS", "AWS::WAFRegional::Rule", "Regional WAF Rule", "Security"},
	{"AWS", "AWS::WAFRegional::SizeConstraintSet", "Regional WAF SizeConstraintSet", "Security"},
	{"AWS", "AWS::WAFRegional::SqlInjectionMatchSet", "Regional WAF SqlInjectionMatchSet", "Security"},
	{"AWS", "AWS::WAFRegional::WebACL", "Regional WAF WebACL", "Security"},
	{"AWS", "AWS::WAFRegional::WebACLAssociation", "Regional WAF WebACLAssociation", "Security"},
	{"AWS", "AWS::WAFRegional::XssMatchSet", "Regional WAF XssMatchSet", "Security"},
	{"AWS", "AWS::WAFv2::IPSet", "WAF v2 IPSet", "Security"},
	{"AWS", "AWS::WAFv2::LoggingConfiguration", "WAF v2 LoggingConfiguration", "Security"},
	{"AWS", "AWS::WAFv2::RegexPatternSet", "WAF v2 RegexPatternSet", "Security"},
	{"AWS", "AWS::WAFv2::RuleGroup", "WAF v2 RuleGroup", "Security"},
	{"AWS", "AWS::WAFv2::WebACL", "WAF v2 WebACL", "Security"},
	{"AWS", "AWS::WAFv2::WebACLAssociation", "WAF v2 WebACLAssociation", "Security"},
	{"AWS", "AWS::Wisdom::Assistant", "Wisdom Assistant", "Other"},
	{"AWS", "AWS::Wisdom::AssistantAssociation", "Wisdom AssistantAssociation", "Other"},
	{"AWS", "AWS::Wisdom::KnowledgeBase", "Wisdom KnowledgeBase", "Other"},
	{"AWS", "AWS::WorkSpaces::ConnectionAlias", "WorkSpaces ConnectionAlias", "EUC"},
	{"AWS", "AWS::WorkSpaces::Workspace", "WorkSpaces Workspace", "EUC"},
	{"AWS", "AWS::XRay::Group", "XRay Group", "Monitoring"},
	{"AWS", "AWS::XRay::SamplingRule", "XRay SamplingRule", "Monitoring"},
	{"AWS", "AWS::EC2::CapacityReservation", "EC2 CapacityReservation", "Infrastructure"},
	{"AWS", "AWS::EC2::CapacityReservationFleet", "EC2 CapacityReservationFleet", "Infrastructure"},
	{"AWS", "AWS::EC2::CarrierGateway", "EC2 CarrierGateway", "Networking"},
	{"AWS", "AWS::EC2::ClientVpnAuthorizationRule", "EC2 ClientVpnAuthorizationRule", "Networking"},
	{"AWS", "AWS::EC2::ClientVpnEndpoint", "EC2 ClientVpnEndpoint", "Networking"},
	{"AWS", "AWS::EC2::ClientVpnRoute", "EC2 ClientVpnRoute", "Networking"},
	{"AWS", "AWS::EC2::ClientVpnTargetNetworkAssociation", "EC2 ClientVpnTargetNetworkAssociation", "Networking"},
	{"AWS", "AWS::EC2::CustomerGateway", "EC2 CustomerGateway", "Networking"},
	{"AWS", "AWS::EC2::DHCPOptions", "EC2 DHCPOptions", "Networking"},
	{"AWS", "AWS::EC2::EC2Fleet", "EC2 EC2Fleet", "Infrastructure"},
	{"AWS", "AWS::EC2::EgressOnlyInternetGateway", "EC2 EgressOnlyInternetGateway", "Networking"},
	{"AWS", "AWS::EC2::EIP", "EC2 EIP", "Networking"},
	{"AWS", "AWS::EC2::EIPAssociation", "EC2 EIPAssociation", "Networking"},
	{"AWS", "AWS::EC2::EnclaveCertificateIamRoleAssociation", "EC2 EnclaveCertificateIamRoleAssociation", "Networking"},
	{"AWS", "AWS::EC2::FlowLog", "EC2 FlowLog", "Security"},
	{"AWS", "AWS::EC2::GatewayRouteTableAssociation", "EC2 GatewayRouteTableAssociation", "Networking"},
	{"AWS", "AWS::EC2::Host", "EC2 Host", "Infrastructure"},
	{"AWS", "AWS::EC2::Instance", "EC2 Instance", "Infrastructure"},
	{"AWS", "AWS::EC2::InternetGateway", "EC2 InternetGateway", "Networking"},
	{"AWS", "AWS::EC2::IPAM", "EC2 IPAM", "Networking"},
	{"AWS", "AWS::EC2::IPAMAllocation", "EC2 IPAMAllocation", "Networking"},
	{"AWS", "AWS::EC2::IPAMPool", "EC2 IPAMPool", "Networking"},
	{"AWS", "AWS::EC2::IPAMScope", "EC2 IPAMScope", "Networking"},
	{"AWS", "AWS::EC2::LaunchTemplate", "EC2 LaunchTemplate", "Infrastructure"},
	{"AWS", "AWS::EC2::LocalGatewayRoute", "EC2 LocalGatewayRoute", "Networking"},
	{"AWS", "AWS::EC2::LocalGatewayRouteTableVPCAssociation", "EC2 LocalGatewayRouteTableVPCAssociation", "Networking"},
	{"AWS", "AWS::EC2::NatGateway", "EC2 NatGateway", "Networking"},
	{"AWS", "AWS::EC2::NetworkAcl", "EC2 NetworkAcl", "Networking"},
	{"AWS", "AWS::EC2::NetworkAclEntry", "EC2 NetworkAclEntry", "Networking"},
	{"AWS", "AWS::EC2::NetworkInsightsAccessScope", "EC2 NetworkInsightsAccessScope", "Networking"},
	{"AWS", "AWS::EC2::NetworkInsightsAccessScopeAnalysis", "EC2 NetworkInsightsAccessScopeAnalysis", "Networking"},
	{"AWS", "AWS::EC2::NetworkInsightsAnalysis", "EC2 NetworkInsightsAnalysis", "Networking"},
	{"AWS", "AWS::EC2::NetworkInsightsPath", "EC2 NetworkInsightsPath", "Networking"},
	{"AWS", "AWS::EC2::NetworkInterface", "EC2 NetworkInterface", "Networking"},
	{"AWS", "AWS::EC2::NetworkInterfaceAttachment", "EC2 NetworkInterfaceAttachment", "Networking"},
	{"AWS", "AWS::EC2::NetworkInterfacePermission", "EC2 NetworkInterfacePermission", "Networking"},
	{"AWS", "AWS::EC2::PlacementGroup", "EC2 PlacementGroup", "Infrastructure"},
	{"AWS", "AWS::EC2::PrefixList", "EC2 PrefixList", "Infrastructure"},
	{"AWS", "AWS::EC2::Route", "EC2 Route", "Networking"},
	{"AWS", "AWS::EC2::RouteTable", "EC2 RouteTable", "Networking"},
	{"AWS", "AWS::EC2::SecurityGroup", "EC2 SecurityGroup", "Security"},
	{"AWS", "AWS::EC2::SecurityGroupEgress", "EC2 SecurityGroupEgress", "Security"},
	{"AWS", "AWS::EC2::SecurityGroupIngress", "EC2 SecurityGroupIngress", "Security"},
	{"AWS", "AWS::EC2::SpotFleet", "EC2 SpotFleet", "Networking"},
	{"AWS", "AWS::EC2::Subnet", "EC2 Subnet", "Networking"},
	{"AWS", "AWS::EC2::SubnetCidrBlock", "EC2 SubnetCidrBlock", "Networking"},
	{"AWS", "AWS::EC2::SubnetNetworkAclAssociation", "EC2 SubnetNetworkAclAssociation", "Networking"},
	{"AWS", "AWS::EC2::SubnetRouteTableAssociation", "EC2 SubnetRouteTableAssociation", "Networking"},
	{"AWS", "AWS::EC2::TrafficMirrorFilter", "EC2 TrafficMirrorFilter", "Networking"},
	{"AWS", "AWS::EC2::TrafficMirrorFilterRule", "EC2 TrafficMirrorFilterRule", "Networking"},
	{"AWS", "AWS::EC2::TrafficMirrorSession", "EC2 TrafficMirrorSession", "Networking"},
	{"AWS", "AWS::EC2::TrafficMirrorTarget", "EC2 TrafficMirrorTarget", "Networking"},
	{"AWS", "AWS::EC2::TransitGateway", "EC2 TransitGateway", "Networking"},
	{"AWS", "AWS::EC2::TransitGatewayAttachment", "EC2 TransitGatewayAttachment", "Networking"},
	{"AWS", "AWS::EC2::TransitGatewayConnect", "EC2 TransitGatewayConnect", "Networking"},
	{"AWS", "AWS::EC2::TransitGatewayMulticastDomain", "EC2 TransitGatewayMulticastDomain", "Networking"},
	{"AWS", "AWS::EC2::TransitGatewayMulticastDomainAssociation", "EC2 TransitGatewayMulticastDomainAssociation", "Networking"},
	{"AWS", "AWS::EC2::TransitGatewayMulticastGroupMember", "EC2 TransitGatewayMulticastGroupMember", "Networking"},
	{"AWS", "AWS::EC2::TransitGatewayMulticastGroupSource", "EC2 TransitGatewayMulticastGroupSource", "Networking"},
	{"AWS", "AWS::EC2::TransitGatewayPeeringAttachment", "EC2 TransitGatewayPeeringAttachment", "Networking"},
	{"AWS", "AWS::EC2::TransitGatewayRoute", "EC2 TransitGatewayRoute", "Networking"},
	{"AWS", "AWS::EC2::TransitGatewayRouteTable", "EC2 TransitGatewayRouteTable", "Networking"},
	{"AWS", "AWS::EC2::TransitGatewayRouteTableAssociation", "EC2 TransitGatewayRouteTableAssociation", "Networking"},
	{"AWS", "AWS::EC2::TransitGatewayRouteTablePropagation", "EC2 TransitGatewayRouteTablePropagation", "Networking"},
	{"AWS", "AWS::EC2::TransitGatewayVpcAttachment", "EC2 TransitGatewayVpcAttachment", "Networking"},
	{"AWS", "AWS::EC2::Volume", "EC2 Volume", "Storage"},
	{"AWS", "AWS::EC2::VolumeAttachment", "EC2 VolumeAttachment", "Storage"},
	{"AWS", "AWS::EC2::VPC", "EC2 VPC", "Networking"},
	{"AWS", "AWS::EC2::VPCCidrBlock", "EC2 VPCCidrBlock", "Networking"},
	{"AWS", "AWS::EC2::VPCDHCPOptionsAssociation", "EC2 VPCDHCPOptionsAssociation", "Networking"},
	{"AWS", "AWS::EC2::VPCEndpoint", "EC2 VPCEndpoint", "Networking"},
	{"AWS", "AWS::EC2::VPCEndpointConnectionNotification", "EC2 VPCEndpointConnectionNotification", "Networking"},
	{"AWS", "AWS::EC2::VPCEndpointService", "EC2 VPCEndpointService", "Networking"},
	{"AWS", "AWS::EC2::VPCEndpointServicePermissions", "EC2 VPCEndpointServicePermissions", "Networking"},
	{"AWS", "AWS::EC2::VPCGatewayAttachment", "EC2 VPCGatewayAttachment", "Networking"},
	{"AWS", "AWS::EC2::VPCPeeringConnection", "EC2 VPCPeeringConnection", "Networking"},
	{"AWS", "AWS::EC2::VPNConnection", "EC2 VPNConnection", "Networking"},
	{"AWS", "AWS::EC2::VPNConnectionRoute", "EC2 VPNConnectionRoute", "Networking"},
	{"AWS", "AWS::EC2::VPNGateway", "EC2 VPNGateway", "Networking"},
	{"AWS", "AWS::EC2::VPNGatewayRoutePropagation", "EC2 VPNGatewayRoutePropagation", "Networking"},
	{"AWS", "AWS::AutoScaling::AutoScalingGroup", "Auto Scaling Group", "Autoscaling"},
	{"AWS", "AWS::AutoScaling::LaunchConfiguration", "Auto Scaling LaunchConfiguration", "Autoscaling"},
	{"AWS", "AWS::AutoScaling::LifecycleHook", "Auto Scaling LifecycleHook", "Autoscaling"},
	{"AWS", "AWS::AutoScaling::ScalingPolicy", "Auto Scaling ScalingPolicy", "Autoscaling"},
	{"AWS", "AWS::AutoScaling::ScheduledAction", "Auto Scaling ScheduledAction", "Autoscaling"},
	{"AWS", "AWS::AutoScaling::WarmPool", "Auto Scaling WarmPool", "Autoscaling"},
	{"AWS", "AWS::ECR::PublicRepository", "ECR PublicRepository", "Container"},
	{"AWS", "AWS::ECR::RegistryPolicy", "ECR RegistryPolicy", "Container"},
	{"AWS", "AWS::ECR::ReplicationConfiguration", "ECR ReplicationConfiguration", "Container"},
	{"AWS", "AWS::ECR::Repository", "ECR Repository", "Container"},
	{"AWS", "AWS::ECS::CapacityProvider", "ECS CapacityProvider", "Container"},
	{"AWS", "AWS::ECS::Cluster", "ECS Cluster", "Container"},
	{"AWS", "AWS::ECS::ClusterCapacityProviderAssociations", "ECS ClusterCapacityProviderAssociations", "Container"},
	{"AWS", "AWS::ECS::PrimaryTaskSet", "ECS PrimaryTaskSet", "Container"},
	{"AWS", "AWS::ECS::Service", "ECS Service", "Container"},
	{"AWS", "AWS::ECS::TaskDefinition", "ECS TaskDefinition", "Container"},
	{"AWS", "AWS::ECS::TaskSet", "ECS TaskSet", "Container"},
	{"AWS", "AWS::EFS::AccessPoint", "EFS AccessPoint", "Container"},
	{"AWS", "AWS::EFS::FileSystem", "EFS FileSystem", "Container"},
	{"AWS", "AWS::EFS::MountTarget", "EFS MountTarget", "Container"},
	{"AWS", "AWS::EFS::AccessPoint", "EFS AccessPoint", "Container"},
	{"AWS", "AWS::EFS::FileSystem", "EFS FileSystem", "Container"},
	{"AWS", "AWS::EFS::MountTarget", "EFS MountTarget", "Container"},
	{"AWS", "AWS::EKS::Addon", "EKS Addon", "Container"},
	{"AWS", "AWS::EKS::Cluster", "EKS Cluster", "Container"},
	{"AWS", "AWS::EKS::FargateProfile", "EKS FargateProfile", "Container"},
	{"AWS", "AWS::EKS::Nodegroup", "EKS Nodegroup", "Container"},
	{"AWS", "AWS::ElasticBeanstalk::Application", "Elastic Beanstalk Application", "App Env"},
	{"AWS", "AWS::ElasticBeanstalk::ApplicationVersion", "Elastic Beanstalk ApplicationVersion", "App Env"},
	{"AWS", "AWS::ElasticBeanstalk::ConfigurationTemplate", "Elastic Beanstalk ConfigurationTemplate", "App Env"},
	{"AWS", "AWS::ElasticBeanstalk::Environment", "Elastic Beanstalk Environment", "App Env"},
	{"AWS", "AWS::elasticfilesystem::", "Elastic Fileshare", "Managed Fileshare"},
	{"AWS", "AWS::ElasticLoadBalancing::LoadBalancer", "ELB LoadBalancer", "Networking"},
	{"AWS", "AWS::ElasticLoadBalancingV2::Listener", "ELB v2 Listener", "Networking"},
	{"AWS", "AWS::ElasticLoadBalancingV2::ListenerCertificate", "ELB v3 ListenerCertificate", "Networking"},
	{"AWS", "AWS::ElasticLoadBalancingV2::ListenerRule", "ELB v4 ListenerRule", "Networking"},
	{"AWS", "AWS::ElasticLoadBalancingV2::LoadBalancer", "ELB v5 LoadBalancer", "Networking"},
	{"AWS", "AWS::ElasticLoadBalancingV2::TargetGroup", "ELB v6 TargetGroup", "Networking"},
	{"AWS", "AWS::EMR::Cluster", "EMR Cluster", "Bigdata"},
	{"AWS", "AWS::EMR::InstanceFleetConfig", "EMR InstanceFleetConfig", "Bigdata"},
	{"AWS", "AWS::EMR::InstanceGroupConfig", "EMR InstanceGroupConfig", "Bigdata"},
	{"AWS", "AWS::EMR::SecurityConfiguration", "EMR SecurityConfiguration", "Bigdata"},
	{"AWS", "AWS::EMR::Step", "EMR Step", "Bigdata"},
	{"AWS", "AWS::EMR::Studio", "EMR Studio", "Bigdata"},
	{"AWS", "AWS::EMR::StudioSessionMapping", "EMR StudioSessionMapping", "Bigdata"},
	{"AWS", "AWS::EMRContainers::VirtualCluster", "EMR Containers VirtualCluster", "Bigdata"},
	{"AWS", "AWS::ElastiCache::CacheCluster", "ElastiCache CacheCluster", "Managed Platform"},
	{"AWS", "AWS::ElastiCache::GlobalReplicationGroup", "ElastiCache GlobalReplicationGroup", "Managed Platform"},
	{"AWS", "AWS::ElastiCache::ParameterGroup", "ElastiCache ParameterGroup", "Managed Platform"},
	{"AWS", "AWS::ElastiCache::ReplicationGroup", "ElastiCache ReplicationGroup", "Managed Platform"},
	{"AWS", "AWS::ElastiCache::SecurityGroup", "ElastiCache SecurityGroup", "Managed Platform"},
	{"AWS", "AWS::ElastiCache::SecurityGroupIngress", "ElastiCache SecurityGroupIngress", "Managed Platform"},
	{"AWS", "AWS::ElastiCache::SubnetGroup", "ElastiCache SubnetGroup", "Managed Platform"},
	{"AWS", "AWS::ElastiCache::User", "ElastiCache User", "Managed Platform"},
	{"AWS", "AWS::ElastiCache::UserGroup", "ElastiCache UserGroup", "Managed Platform"},
	{"AWS", "AWS::Events::ApiDestination", "Events ApiDestination", "Messaging"},
	{"AWS", "AWS::Events::Archive", "Events Archive", "Messaging"},
	{"AWS", "AWS::Events::Connection", "Events Connection", "Messaging"},
	{"AWS", "AWS::Events::EventBus", "Events EventBus", "Messaging"},
	{"AWS", "AWS::Events::EventBusPolicy", "Events EventBusPolicy", "Messaging"},
	{"AWS", "AWS::Events::Rule", "Events Rule", "Messaging"},
	{"AWS", "AWS::EventSchemas::Discoverer", "Event Schemas Discoverer", "Messaging"},
	{"AWS", "AWS::EventSchemas::Registry", "Event Schemas Registry", "Messaging"},
	{"AWS", "AWS::EventSchemas::RegistryPolicy", "Event Schemas RegistryPolicy", "Messaging"},
	{"AWS", "AWS::EventSchemas::Schema", "Event Schemas Schema", "Messaging"},
	{"AWS", "AWS::Evidently::Experiment", "Evidently Experiment", "Other"},
	{"AWS", "AWS::Evidently::Feature", "Evidently Feature", "Other"},
	{"AWS", "AWS::Evidently::Launch", "Evidently Launch", "Other"},
	{"AWS", "AWS::Evidently::Project", "Evidently Project", "Other"},
	{"AWS", "AWS::FinSpace::Environment", "FinSpace Environment", "Other"},
	{"AWS", "AWS::FIS::ExperimentTemplate", "Fault Injection Simulator ExperimentTemplate", "Other"},
	{"AWS", "AWS::FMS::NotificationChannelAWS::FMS::Policy", "Firewall Manager NotificationChannelAWS::FMS::Policy", "Other"},
	{"AWS", "AWS::FraudDetector::Detector", "FraudDetector Detector", "Other"},
	{"AWS", "AWS::FraudDetector::EntityType", "FraudDetector EntityType", "Other"},
	{"AWS", "AWS::FraudDetector::EventType", "FraudDetector EventType", "Other"},
	{"AWS", "AWS::FraudDetector::Label", "FraudDetector Label", "Other"},
	{"AWS", "AWS::FraudDetector::Outcome", "FraudDetector Outcome", "Other"},
	{"AWS", "AWS::FraudDetector::Variable", "FraudDetector Variable", "Other"},
	{"AWS", "AWS::FSx::FileSystem", "FSx FileSystem", "Storage"},
	{"AWS", "AWS::FSx::Snapshot", "FSx Snapshot", "Storage"},
	{"AWS", "AWS::FSx::StorageVirtualMachine", "FSx StorageVirtualMachine", "Storage"},
	{"AWS", "AWS::FSx::Volume", "FSx Volume", "Storage"},
	{"AWS", "AWS::GameLift::Alias", "GameLift Alias", "Gaming"},
	{"AWS", "AWS::GameLift::Build", "GameLift Build", "Gaming"},
	{"AWS", "AWS::GameLift::Fleet", "GameLift Fleet", "Gaming"},
	{"AWS", "AWS::GameLift::GameServerGroup", "GameLift GameServerGroup", "Gaming"},
	{"AWS", "AWS::GameLift::GameSessionQueue", "GameLift GameSessionQueue", "Gaming"},
	{"AWS", "AWS::GameLift::MatchmakingConfiguration", "GameLift MatchmakingConfiguration", "Gaming"},
	{"AWS", "AWS::GameLift::MatchmakingRuleSet", "GameLift MatchmakingRuleSet", "Gaming"},
	{"AWS", "AWS::GameLift::Script", "GameLift Script", "Gaming"},
	{"AWS", "AWS::GlobalAccelerator::Accelerator", "Global Accelerator Accelerator", "Networking"},
	{"AWS", "AWS::GlobalAccelerator::EndpointGroup", "Global Accelerator EndpointGroup", "Networking"},
	{"AWS", "AWS::GlobalAccelerator::Listener", "Global Accelerator Listener", "Networking"},
	{"AWS", "AWS::Glue::Classifier", "Glue Classifier", "Serverless"},
	{"AWS", "AWS::Glue::Connection", "Glue Connection", "Serverless"},
	{"AWS", "AWS::Glue::Crawler", "Glue Crawler", "Serverless"},
	{"AWS", "AWS::Glue::Database", "Glue Database", "Serverless"},
	{"AWS", "AWS::Glue::DataCatalogEncryptionSettings", "Glue DataCatalogEncryptionSettings", "Serverless"},
	{"AWS", "AWS::Glue::DevEndpoint", "Glue DevEndpoint", "Serverless"},
	{"AWS", "AWS::Glue::Job", "Glue Job", "Serverless"},
	{"AWS", "AWS::Glue::MLTransform", "Glue MLTransform", "Serverless"},
	{"AWS", "AWS::Glue::Partition", "Glue Partition", "Serverless"},
	{"AWS", "AWS::Glue::Registry", "Glue Registry", "Serverless"},
	{"AWS", "AWS::Glue::Schema", "Glue Schema", "Serverless"},
	{"AWS", "AWS::Glue::SchemaVersion", "Glue SchemaVersion", "Serverless"},
	{"AWS", "AWS::Glue::SchemaVersionMetadata", "Glue SchemaVersionMetadata", "Serverless"},
	{"AWS", "AWS::Glue::SecurityConfiguration", "Glue SecurityConfiguration", "Serverless"},
	{"AWS", "AWS::Glue::Table", "Glue Table", "Serverless"},
	{"AWS", "AWS::Glue::Trigger", "Glue Trigger", "Serverless"},
	{"AWS", "AWS::Glue::Workflow", "Glue Workflow", "Serverless"},
	{"AWS", "AWS::GroundStation::Config", "GroundStation Config", "Other"},
	{"AWS", "AWS::GroundStation::DataflowEndpointGroup", "GroundStation DataflowEndpointGroup", "Other"},
	{"AWS", "AWS::GroundStation::MissionProfile", "GroundStation MissionProfile", "Other"},
	{"AWS", "AWS::GuardDuty::Detector", "GuardDuty Detector", "Security"},
	{"AWS", "AWS::GuardDuty::Filter", "GuardDuty Filter", "Security"},
	{"AWS", "AWS::GuardDuty::IPSet", "GuardDuty IPSet", "Security"},
	{"AWS", "AWS::GuardDuty::Master", "GuardDuty Master", "Security"},
	{"AWS", "AWS::GuardDuty::Member", "GuardDuty Member", "Security"},
	{"AWS", "AWS::GuardDuty::ThreatIntelSet", "GuardDuty ThreatIntelSet", "Security"},
	{"AWS", "AWS::HealthLake::FHIRDatastore", "Health Lake FHIRDatastore", "Security"},
	{"AWS", "AWS::IAM::AccessKey", "IAM AccessKey", "Identity"},
	{"AWS", "AWS::IAM::Group", "IAM Group", "Identity"},
	{"AWS", "AWS::IAM::InstanceProfile", "IAM InstanceProfile", "Identity"},
	{"AWS", "AWS::IAM::ManagedPolicy", "IAM ManagedPolicy", "Identity"},
	{"AWS", "AWS::IAM::OIDCProvider", "IAM OIDCProvider", "Identity"},
	{"AWS", "AWS::IAM::Policy", "IAM Policy", "Identity"},
	{"AWS", "AWS::IAM::Role", "IAM Role", "Identity"},
	{"AWS", "AWS::IAM::SAMLProvider", "IAM SAMLProvider", "Identity"},
	{"AWS", "AWS::IAM::ServerCertificate", "IAM ServerCertificate", "Identity"},
	{"AWS", "AWS::IAM::ServiceLinkedRole", "IAM ServiceLinkedRole", "Identity"},
	{"AWS", "AWS::IAM::User", "IAM User", "Identity"},
	{"AWS", "AWS::IAM::UserToGroupAddition", "IAM UserToGroupAddition", "Identity"},
	{"AWS", "AWS::IAM::VirtualMFADevice", "IAM VirtualMFADevice", "Identity"},
	{"AWS", "AWS::AccessAnalyzer::Analyzer", "AccessAnalyzer Analyzer", "Security"},
	{"AWS", "AWS::ImageBuilder::Component", "ImageBuilder Component", "Infrastructure"},
	{"AWS", "AWS::ImageBuilder::ContainerRecipe", "ImageBuilder ContainerRecipe", "Infrastructure"},
	{"AWS", "AWS::ImageBuilder::DistributionConfiguration", "ImageBuilder DistributionConfiguration", "Infrastructure"},
	{"AWS", "AWS::ImageBuilder::Image", "ImageBuilder Image", "Infrastructure"},
	{"AWS", "AWS::ImageBuilder::ImagePipeline", "ImageBuilder ImagePipeline", "Infrastructure"},
	{"AWS", "AWS::ImageBuilder::ImageRecipe", "ImageBuilder ImageRecipe", "Infrastructure"},
	{"AWS", "AWS::ImageBuilder::InfrastructureConfiguration", "ImageBuilder InfrastructureConfiguration", "Infrastructure"},
	{"AWS", "AWS::SSMIncidents::ReplicationSet", "SSMIncidents ReplicationSet", "Governance"},
	{"AWS", "AWS::SSMIncidents::ResponsePlan", "SSMIncidents ResponsePlan", "Governance"},
	{"AWS", "AWS::SSMContacts::Contact", "SSMContacts Contact", "Governance"},
	{"AWS", "AWS::SSMContacts::ContactChannel", "SSMContacts ContactChannel", "Governance"},
	{"AWS", "AWS::Inspector::AssessmentTarget", "Inspector AssessmentTarget", "Governance"},
	{"AWS", "AWS::Inspector::AssessmentTemplate", "Inspector AssessmentTemplate", "Governance"},
	{"AWS", "AWS::Inspector::ResourceGroup", "Inspector ResourceGroup", "Governance"},
	{"AWS", "AWS::InspectorV2::Filter", "InspectorV2 Filter", "Governance"},
	{"AWS", "AWS::IoT::AccountAuditConfiguration", "IoT AccountAuditConfiguration", "IoT"},
	{"AWS", "AWS::IoT::Authorizer", "IoT Authorizer", "IoT"},
	{"AWS", "AWS::IoT::Certificate", "IoT Certificate", "IoT"},
	{"AWS", "AWS::IoT::CustomMetric", "IoT CustomMetric", "IoT"},
	{"AWS", "AWS::IoT::Dimension", "IoT Dimension", "IoT"},
	{"AWS", "AWS::IoT::DomainConfiguration", "IoT DomainConfiguration", "IoT"},
	{"AWS", "AWS::IoT::FleetMetric", "IoT FleetMetric", "IoT"},
	{"AWS", "AWS::IoT::JobTemplate", "IoT JobTemplate", "IoT"},
	{"AWS", "AWS::IoT::Logging", "IoT Logging", "IoT"},
	{"AWS", "AWS::IoT::MitigationAction", "IoT MitigationAction", "IoT"},
	{"AWS", "AWS::IoT::Policy", "IoT Policy", "IoT"},
	{"AWS", "AWS::IoT::PolicyPrincipalAttachment", "IoT PolicyPrincipalAttachment", "IoT"},
	{"AWS", "AWS::IoT::ProvisioningTemplate", "IoT ProvisioningTemplate", "IoT"},
	{"AWS", "AWS::IoT::ResourceSpecificLogging", "IoT ResourceSpecificLogging", "IoT"},
	{"AWS", "AWS::IoT::ScheduledAudit", "IoT ScheduledAudit", "IoT"},
	{"AWS", "AWS::IoT::SecurityProfile", "IoT SecurityProfile", "IoT"},
	{"AWS", "AWS::IoT::Thing", "IoT Thing", "IoT"},
	{"AWS", "AWS::IoT::ThingPrincipalAttachment", "IoT ThingPrincipalAttachment", "IoT"},
	{"AWS", "AWS::IoT::TopicRule", "IoT TopicRule", "IoT"},
	{"AWS", "AWS::IoT::TopicRuleDestination", "IoT TopicRuleDestination", "IoT"},
	{"AWS", "AWS::IoT1Click::Device", "IoT1Click Device", "IoT"},
	{"AWS", "AWS::IoT1Click::Placement", "IoT1Click Placement", "IoT"},
	{"AWS", "AWS::IoT1Click::Project", "IoT1Click Project", "IoT"},
	{"AWS", "AWS::IoTAnalytics::Channel", "IoTAnalytics Channel", "IoT"},
	{"AWS", "AWS::IoTAnalytics::Dataset", "IoTAnalytics Dataset", "IoT"},
	{"AWS", "AWS::IoTAnalytics::Datastore", "IoTAnalytics Datastore", "IoT"},
	{"AWS", "AWS::IoTAnalytics::Pipeline", "IoTAnalytics Pipeline", "IoT"},
	{"AWS", "AWS::IoTAzure CoreDeviceAdvisor::SuiteDefinition", "IoTAzure CoreDeviceAdvisor SuiteDefinition", "IoT"},
	{"AWS", "AWS::IoTEvents::DetectorModel", "IoTEvents DetectorModel", "IoT"},
	{"AWS", "AWS::IoTEvents::Input", "IoTEvents Input", "IoT"},
	{"AWS", "AWS::IoTFleetHub::Application", "IoTFleetHub Application", "IoT"},
	{"AWS", "AWS::Greengrass::ConnectorDefinition", "Greengrass ConnectorDefinition", "IoT"},
	{"AWS", "AWS::Greengrass::ConnectorDefinitionVersion", "Greengrass ConnectorDefinitionVersion", "IoT"},
	{"AWS", "AWS::Greengrass::Azure CoreDefinition", "Greengrass Azure CoreDefinition", "IoT"},
	{"AWS", "AWS::Greengrass::Azure CoreDefinitionVersion", "Greengrass Azure CoreDefinitionVersion", "IoT"},
	{"AWS", "AWS::Greengrass::DeviceDefinition", "Greengrass DeviceDefinition", "IoT"},
	{"AWS", "AWS::Greengrass::DeviceDefinitionVersion", "Greengrass DeviceDefinitionVersion", "IoT"},
	{"AWS", "AWS::Greengrass::FunctionDefinition", "Greengrass FunctionDefinition", "IoT"},
	{"AWS", "AWS::Greengrass::FunctionDefinitionVersion", "Greengrass FunctionDefinitionVersion", "IoT"},
	{"AWS", "AWS::Greengrass::Group", "Greengrass Group", "IoT"},
	{"AWS", "AWS::Greengrass::GroupVersion", "Greengrass GroupVersion", "IoT"},
	{"AWS", "AWS::Greengrass::LoggerDefinition", "Greengrass LoggerDefinition", "IoT"},
	{"AWS", "AWS::Greengrass::LoggerDefinitionVersion", "Greengrass LoggerDefinitionVersion", "IoT"},
	{"AWS", "AWS::Greengrass::ResourceDefinition", "Greengrass ResourceDefinition", "IoT"},
	{"AWS", "AWS::Greengrass::ResourceDefinitionVersion", "Greengrass ResourceDefinitionVersion", "IoT"},
	{"AWS", "AWS::Greengrass::SubscriptionDefinition", "Greengrass SubscriptionDefinition", "IoT"},
	{"AWS", "AWS::Greengrass::SubscriptionDefinitionVersion", "Greengrass SubscriptionDefinitionVersion", "IoT"},
	{"AWS", "AWS::GreengrassV2::ComponentVersion", "GreengrassV2 ComponentVersion", "IoT"},
	{"AWS", "AWS::IoTSiteWise::AccessPolicy", "IoTSiteWise AccessPolicy", "IoT"},
	{"AWS", "AWS::IoTSiteWise::Asset", "IoTSiteWise Asset", "IoT"},
	{"AWS", "AWS::IoTSiteWise::AssetModel", "IoTSiteWise AssetModel", "IoT"},
	{"AWS", "AWS::IoTSiteWise::Dashboard", "IoTSiteWise Dashboard", "IoT"},
	{"AWS", "AWS::IoTSiteWise::Gateway", "IoTSiteWise Gateway", "IoT"},
	{"AWS", "AWS::IoTSiteWise::Portal", "IoTSiteWise Portal", "IoT"},
	{"AWS", "AWS::IoTSiteWise::Project", "IoTSiteWise Project", "IoT"},
	{"AWS", "AWS::IVS::Channel", "Interactive Video Service Channel", "Media"},
	{"AWS", "AWS::IVS::PlaybackKeyPair", "Interactive Video Service PlaybackKeyPair", "Media"},
	{"AWS", "AWS::IVS::RecordingConfiguration", "Interactive Video Service RecordingConfiguration", "Media"},
	{"AWS", "AWS::IVS::StreamKey", "Interactive Video Service StreamKey", "Media"},
	{"AWS", "AWS::SQS::Queue", "SQS Queue", "Messaging"},
	{"AWS", "AWS::SQS::QueuePolicy", "SQS QueuePolicy", "Messaging"},
	{"AWS", "AWS::SNS::Subscription", "SNS Subscription", "Messaging"},
	{"AWS", "AWS::SNS::Topic", "SNS Topic", "Messaging"},
	{"AWS", "AWS::SNS::TopicPolicy", "SNS TopicPolicy", "Messaging"},
	{"AWS", "AWS::SDB::Domain", "SimpleDB Domain", "Messaging"},
	{"AWS", "AWS::Signer::ProfilePermission", "Signer ProfilePermission", "Messaging"},
	{"AWS", "AWS::Signer::SigningProfile", "Signer SigningProfile", "Messaging"},
	{"AWS", "AWS::SES::ConfigurationSet", "SES ConfigurationSet", "Messaging"},
	{"AWS", "AWS::SES::ConfigurationSetEventDestination", "SES ConfigurationSetEventDestination", "Messaging"},
	{"AWS", "AWS::SES::ContactList", "SES ContactList", "Messaging"},
	{"AWS", "AWS::SES::ReceiptFilter", "SES ReceiptFilter", "Messaging"},
	{"AWS", "AWS::SES::ReceiptRule", "SES ReceiptRule", "Messaging"},
	{"AWS", "AWS::SES::ReceiptRuleSet", "SES ReceiptRuleSet", "Messaging"},
	{"AWS", "AWS::SES::Template", "SES Template", "Messaging"},
	{"AWS", "AWS::SecurityHub::Hub", "Security Hub Hub", "Security"},
	{"AWS", "AWS::ServiceCatalogAppRegistry::Application", "Service Catalog AppRegistry Application", "Governance"},
	{"AWS", "AWS::ServiceCatalogAppRegistry::AttributeGroup", "Service Catalog AppRegistry AttributeGroup", "Governance"},
	{"AWS", "AWS::ServiceCatalogAppRegistry::AttributeGroupAssociation", "Service Catalog AppRegistry AttributeGroupAssociation", "Governance"},
	{"AWS", "AWS::ServiceCatalogAppRegistry::ResourceAssociation", "Service Catalog AppRegistry ResourceAssociation", "Governance"},
	{"AWS", "AWS::ServiceCatalog::AcceptedPortfolioShare", "Service Catalog AcceptedPortfolioShare", "Governance"},
	{"AWS", "AWS::ServiceCatalog::CloudFormationProduct", "Service Catalog CloudFormationProduct", "Governance"},
	{"AWS", "AWS::ServiceCatalog::CloudFormationProvisionedProduct", "Service Catalog CloudFormationProvisionedProduct", "Governance"},
	{"AWS", "AWS::ServiceCatalog::LaunchNotificationConstraint", "Service Catalog LaunchNotificationConstraint", "Governance"},
	{"AWS", "AWS::ServiceCatalog::LaunchRoleConstraint", "Service Catalog LaunchRoleConstraint", "Governance"},
	{"AWS", "AWS::ServiceCatalog::LaunchTemplateConstraint", "Service Catalog LaunchTemplateConstraint", "Governance"},
	{"AWS", "AWS::ServiceCatalog::Portfolio", "Service Catalog Portfolio", "Governance"},
	{"AWS", "AWS::ServiceCatalog::PortfolioPrincipalAssociation", "Service Catalog PortfolioPrincipalAssociation", "Governance"},
	{"AWS", "AWS::ServiceCatalog::PortfolioProductAssociation", "Service Catalog PortfolioProductAssociation", "Governance"},
	{"AWS", "AWS::ServiceCatalog::PortfolioShare", "Service Catalog PortfolioShare", "Governance"},
	{"AWS", "AWS::ServiceCatalog::ResourceUpdateConstraint", "Service Catalog ResourceUpdateConstraint", "Governance"},
	{"AWS", "AWS::ServiceCatalog::ServiceAction", "Service Catalog ServiceAction", "Governance"},
	{"AWS", "AWS::ServiceCatalog::ServiceActionAssociation", "Service Catalog ServiceActionAssociation", "Governance"},
	{"AWS", "AWS::ServiceCatalog::StackSetConstraint", "Service Catalog StackSetConstraint", "Governance"},
	{"AWS", "AWS::ServiceCatalog::TagOption", "Service Catalog TagOption", "Governance"},
	{"AWS", "AWS::ServiceCatalog::TagOptionAssociation", "Service Catalog TagOptionAssociation", "Governance"},
	{"AWS", "AWS::SecretsManager::ResourcePolicy", "Secrets Manager ResourcePolicy", "Security"},
	{"AWS", "AWS::SecretsManager::RotationSchedule", "Secrets Manager RotationSchedule", "Security"},
	{"AWS", "AWS::SecretsManager::Secret", "Secrets Manager Secret", "Security"},
	{"AWS", "AWS::SecretsManager::SecretTargetAttachment", "Secrets Manager SecretTargetAttachment", "Security"},
	{"AWS", "AWS::SageMaker::App", "SageMaker App", "AI + ML"},
	{"AWS", "AWS::SageMaker::AppImageConfig", "SageMaker AppImageConfig", "AI + ML"},
	{"AWS", "AWS::SageMaker::CodeRepository", "SageMaker CodeRepository", "AI + ML"},
	{"AWS", "AWS::SageMaker::DataQualityJobDefinition", "SageMaker DataQualityJobDefinition", "AI + ML"},
	{"AWS", "AWS::SageMaker::Device", "SageMaker Device", "AI + ML"},
	{"AWS", "AWS::SageMaker::DeviceFleet", "SageMaker DeviceFleet", "AI + ML"},
	{"AWS", "AWS::SageMaker::Domain", "SageMaker Domain", "AI + ML"},
	{"AWS", "AWS::SageMaker::Endpoint", "SageMaker Endpoint", "AI + ML"},
	{"AWS", "AWS::SageMaker::EndpointConfig", "SageMaker EndpointConfig", "AI + ML"},
	{"AWS", "AWS::SageMaker::FeatureGroup", "SageMaker FeatureGroup", "AI + ML"},
	{"AWS", "AWS::SageMaker::Image", "SageMaker Image", "AI + ML"},
	{"AWS", "AWS::SageMaker::ImageVersion", "SageMaker ImageVersion", "AI + ML"},
	{"AWS", "AWS::SageMaker::Model", "SageMaker Model", "AI + ML"},
	{"AWS", "AWS::SageMaker::ModelBiasJobDefinition", "SageMaker ModelBiasJobDefinition", "AI + ML"},
	{"AWS", "AWS::SageMaker::ModelExplainabilityJobDefinition", "SageMaker ModelExplainabilityJobDefinition", "AI + ML"},
	{"AWS", "AWS::SageMaker::ModelPackageGroup", "SageMaker ModelPackageGroup", "AI + ML"},
	{"AWS", "AWS::SageMaker::ModelQualityJobDefinition", "SageMaker ModelQualityJobDefinition", "AI + ML"},
	{"AWS", "AWS::SageMaker::MonitoringSchedule", "SageMaker MonitoringSchedule", "AI + ML"},
	{"AWS", "AWS::SageMaker::NotebookInstance", "SageMaker NotebookInstance", "AI + ML"},
	{"AWS", "AWS::SageMaker::NotebookInstanceLifecycleConfig", "SageMaker NotebookInstanceLifecycleConfig", "AI + ML"},
	{"AWS", "AWS::SageMaker::Pipeline", "SageMaker Pipeline", "AI + ML"},
	{"AWS", "AWS::SageMaker::Project", "SageMaker Project", "AI + ML"},
	{"AWS", "AWS::SageMaker::UserProfile", "SageMaker UserProfile", "AI + ML"},
	{"AWS", "AWS::SageMaker::Workteam", "SageMaker Workteam", "AI + ML"},
	{"AWS", "AWS::S3Outposts::AccessPoint", "S3Outposts AccessPoint", "Storage"},
	{"AWS", "AWS::S3Outposts::Bucket", "S3Outposts Bucket", "Storage"},
	{"AWS", "AWS::S3Outposts::BucketPolicy", "S3Outposts BucketPolicy", "Storage"},
	{"AWS", "AWS::S3Outposts::Endpoint", "S3Outposts Endpoint", "Storage"},
	{"AWS", "AWS::S3ObjectLambda::AccessPoint", "S3ObjectLambda AccessPoint", "Storage"},
	{"AWS", "AWS::S3ObjectLambda::AccessPointPolicy", "S3ObjectLambda AccessPointPolicy", "Storage"},
	{"AWS", "AWS::S3::AccessPoint", "S3 AccessPoint", "Storage"},
	{"AWS", "AWS::S3::Bucket", "S3 Bucket", "Storage"},
	{"AWS", "AWS::S3::BucketPolicy", "S3 BucketPolicy", "Storage"},
	{"AWS", "AWS::S3::MultiRegionAccessPoint", "S3 MultiRegionAccessPoint", "Storage"},
	{"AWS", "AWS::S3::MultiRegionAccessPointPolicy", "S3 MultiRegionAccessPointPolicy", "Storage"},
	{"AWS", "AWS::S3::StorageLens", "S3 StorageLens", "Storage"},
	{"AWS", "AWS::RUM::AppMonitor", "CloudWatch RUM AppMonitor", "Other"},
	{"AWS", "AWS::Route53Resolver::FirewallDomainList", "Route53 Resolver FirewallDomainList", "Networking"},
	{"AWS", "AWS::Route53Resolver::FirewallRuleGroup", "Route53 Resolver FirewallRuleGroup", "Networking"},
	{"AWS", "AWS::Route53Resolver::FirewallRuleGroupAssociation", "Route53 Resolver FirewallRuleGroupAssociation", "Networking"},
	{"AWS", "AWS::Route53Resolver::ResolverConfig", "Route53 Resolver ResolverConfig", "Networking"},
	{"AWS", "AWS::Route53Resolver::ResolverDNSSECConfig", "Route53 Resolver ResolverDNSSECConfig", "Networking"},
	{"AWS", "AWS::Route53Resolver::ResolverEndpoint", "Route53 Resolver ResolverEndpoint", "Networking"},
	{"AWS", "AWS::Route53Resolver::ResolverQueryLoggingConfig", "Route53 Resolver ResolverQueryLoggingConfig", "Networking"},
	{"AWS", "AWS::Route53Resolver::ResolverQueryLoggingConfigAssociation", "Route53 Resolver ResolverQueryLoggingConfigAssociation", "Networking"},
	{"AWS", "AWS::Route53Resolver::ResolverRule", "Route53 Resolver ResolverRule", "Networking"},
	{"AWS", "AWS::Route53Resolver::ResolverRuleAssociation", "Route53 Resolver ResolverRuleAssociation", "Networking"},
	{"AWS", "AWS::Route53RecoveryReadiness::Cell", "Route53 Recovery Readiness Cell", "Networking"},
	{"AWS", "AWS::Route53RecoveryReadiness::ReadinessCheck", "Route53 Recovery Readiness ReadinessCheck", "Networking"},
	{"AWS", "AWS::Route53RecoveryReadiness::RecoveryGroup", "Route53 Recovery Readiness RecoveryGroup", "Networking"},
	{"AWS", "AWS::Route53RecoveryReadiness::ResourceSet", "Route53 Recovery Readiness ResourceSet", "Networking"},
	{"AWS", "AWS::Route53RecoveryControl::Cluster", "Route53 Recovery Control Cluster", "Networking"},
	{"AWS", "AWS::Route53RecoveryControl::ControlPanel", "Route53 Recovery Control ControlPanel", "Networking"},
	{"AWS", "AWS::Route53RecoveryControl::RoutingControl", "Route53 Recovery Control RoutingControl", "Networking"},
	{"AWS", "AWS::Route53RecoveryControl::SafetyRule", "Route53 Recovery Control SafetyRule", "Networking"},
	{"AWS", "AWS::Route53::DNSSEC", "Route53 DNSSEC", "Networking"},
	{"AWS", "AWS::Route53::HealthCheck", "Route53 HealthCheck", "Networking"},
	{"AWS", "AWS::Route53::HostedZone", "Route53 HostedZone", "Networking"},
	{"AWS", "AWS::Route53::KeySigningKey", "Route53 KeySigningKey", "Networking"},
	{"AWS", "AWS::Route53::RecordSet", "Route53 RecordSet", "Networking"},
	{"AWS", "AWS::Route53::RecordSetGroup", "Route53 RecordSetGroup", "Networking"},
	{"AWS", "AWS::RoboMaker::Fleet", "RoboMaker Fleet", "Other"},
	{"AWS", "AWS::RoboMaker::Robot", "RoboMaker Robot", "Other"},
	{"AWS", "AWS::RoboMaker::RobotApplication", "RoboMaker RobotApplication", "Other"},
	{"AWS", "AWS::RoboMaker::RobotApplicationVersion", "RoboMaker RobotApplicationVersion", "Other"},
	{"AWS", "AWS::RoboMaker::SimulationApplication", "RoboMaker SimulationApplication", "Other"},
	{"AWS", "AWS::RoboMaker::SimulationApplicationVersion", "RoboMaker SimulationApplicationVersion", "Other"},
	{"AWS", "AWS::ResourceGroups::Group", "Resource Groups Group", "Governance"},
	{"AWS", "AWS::ResilienceHub::App", "Resilience Hub App", "Other"},
	{"AWS", "AWS::ResilienceHub::ResiliencyPolicy", "Resilience Hub ResiliencyPolicy", "Other"},
	{"AWS", "AWS::Rekognition::Project", "Rekognition Project", "Other"},
	{"AWS", "AWS::RefactorSpaces::Application", "Refactor Spaces Application", "Other"},
	{"AWS", "AWS::RefactorSpaces::Environment", "Refactor Spaces Environment", "Other"},
	{"AWS", "AWS::RefactorSpaces::Route", "Refactor Spaces Route", "Other"},
	{"AWS", "AWS::RefactorSpaces::Service", "Refactor Spaces Service", "Other"},
	{"AWS", "AWS::Redshift::Cluster", "Redshift Cluster", "Database"},
	{"AWS", "AWS::Redshift::ClusterParameterGroup", "Redshift ClusterParameterGroup", "Database"},
	{"AWS", "AWS::Redshift::ClusterSecurityGroup", "Redshift ClusterSecurityGroup", "Database"},
	{"AWS", "AWS::Redshift::ClusterSecurityGroupIngress", "Redshift ClusterSecurityGroupIngress", "Database"},
	{"AWS", "AWS::Redshift::ClusterSubnetGroup", "Redshift ClusterSubnetGroup", "Database"},
	{"AWS", "AWS::Redshift::EndpointAccess", "Redshift EndpointAccess", "Database"},
	{"AWS", "AWS::Redshift::EndpointAuthorization", "Redshift EndpointAuthorization", "Database"},
	{"AWS", "AWS::Redshift::EventSubscription", "Redshift EventSubscription", "Database"},
	{"AWS", "AWS::Redshift::ScheduledAction", "Redshift ScheduledAction", "Database"},
	{"AWS", "AWS::RDS::DBCluster", "RDS DBCluster", "Database"},
	{"AWS", "AWS::RDS::DBClusterParameterGroup", "RDS DBClusterParameterGroup", "Database"},
	{"AWS", "AWS::RDS::DBInstance", "RDS DBInstance", "Database"},
	{"AWS", "AWS::RDS::DBParameterGroup", "RDS DBParameterGroup", "Database"},
	{"AWS", "AWS::RDS::DBProxy", "RDS DBProxy", "Database"},
	{"AWS", "AWS::RDS::DBProxyEndpoint", "RDS DBProxyEndpoint", "Database"},
	{"AWS", "AWS::RDS::DBProxyTargetGroup", "RDS DBProxyTargetGroup", "Database"},
	{"AWS", "AWS::RDS::DBSecurityGroup", "RDS DBSecurityGroup", "Database"},
	{"AWS", "AWS::RDS::DBSecurityGroupIngress", "RDS DBSecurityGroupIngress", "Database"},
	{"AWS", "AWS::RDS::DBSubnetGroup", "RDS DBSubnetGroup", "Database"},
	{"AWS", "AWS::RDS::EventSubscription", "RDS EventSubscription", "Database"},
	{"AWS", "AWS::RDS::GlobalCluster", "RDS GlobalCluster", "Database"},
	{"AWS", "AWS::RDS::OptionGroup", "RDS OptionGroup", "Database"},
	{"AWS", "AWS::RAM::ResourceShare", "Resource Access Manager (RAM) ResourceShare", "Management"},
	{"AWS", "AWS::QuickSight::Analysis", "QuickSight Analysis", "Analytics"},
	{"AWS", "AWS::QuickSight::Dashboard", "QuickSight Dashboard", "Analytics"},
	{"AWS", "AWS::QuickSight::DataSet", "QuickSight DataSet", "Analytics"},
	{"AWS", "AWS::QuickSight::DataSource", "QuickSight DataSource", "Analytics"},
	{"AWS", "AWS::QuickSight::Template", "QuickSight Template", "Analytics"},
	{"AWS", "AWS::QuickSight::Theme", "QuickSight Theme", "Analytics"},
	{"AWS", "AWS::QLDB::Ledger", "Quantum Ledger Database (QLDB) Ledger", "Analytics"},
	{"AWS", "AWS::QLDB::Stream", "Quantum Ledger Database (QLDB) Stream", "Analytics"},
	{"AWS", "AWS::PinpointEmail::ConfigurationSet", "Pinpoint Email ConfigurationSet", "Other"},
	{"AWS", "AWS::PinpointEmail::ConfigurationSetEventDestination", "Pinpoint Email ConfigurationSetEventDestination", "Other"},
	{"AWS", "AWS::PinpointEmail::DedicatedIpPool", "Pinpoint Email DedicatedIpPool", "Other"},
	{"AWS", "AWS::PinpointEmail::Identity", "Pinpoint Email Identity", "Other"},
	{"AWS", "AWS::Pinpoint::ADMChannel", "Pinpoint ADMChannel", "Other"},
	{"AWS", "AWS::Pinpoint::APNSChannel", "Pinpoint APNSChannel", "Other"},
	{"AWS", "AWS::Pinpoint::APNSSandboxChannel", "Pinpoint APNSSandboxChannel", "Other"},
	{"AWS", "AWS::Pinpoint::APNSVoipChannel", "Pinpoint APNSVoipChannel", "Other"},
	{"AWS", "AWS::Pinpoint::APNSVoipSandboxChannel", "Pinpoint APNSVoipSandboxChannel", "Other"},
	{"AWS", "AWS::Pinpoint::App", "Pinpoint App", "Other"},
	{"AWS", "AWS::Pinpoint::ApplicationSettings", "Pinpoint ApplicationSettings", "Other"},
	{"AWS", "AWS::Pinpoint::BaiduChannel", "Pinpoint BaiduChannel", "Other"},
	{"AWS", "AWS::Pinpoint::Campaign", "Pinpoint Campaign", "Other"},
	{"AWS", "AWS::Pinpoint::EmailChannel", "Pinpoint EmailChannel", "Other"},
	{"AWS", "AWS::Pinpoint::EmailTemplate", "Pinpoint EmailTemplate", "Other"},
	{"AWS", "AWS::Pinpoint::EventStream", "Pinpoint EventStream", "Other"},
	{"AWS", "AWS::Pinpoint::GCMChannel", "Pinpoint GCMChannel", "Other"},
	{"AWS", "AWS::Pinpoint::InAppTemplate", "Pinpoint InAppTemplate", "Other"},
	{"AWS", "AWS::Pinpoint::PushTemplate", "Pinpoint PushTemplate", "Other"},
	{"AWS", "AWS::Pinpoint::Segment", "Pinpoint Segment", "Other"},
	{"AWS", "AWS::Pinpoint::SMSChannel", "Pinpoint SMSChannel", "Other"},
	{"AWS", "AWS::Pinpoint::SmsTemplate", "Pinpoint SmsTemplate", "Other"},
	{"AWS", "AWS::Pinpoint::VoiceChannel", "Pinpoint VoiceChannel", "Other"},
	{"AWS", "AWS::Panorama::ApplicationInstance", "Panorama ApplicationInstance", "Other"},
	{"AWS", "AWS::Panorama::Package", "Panorama Package", "Other"},
	{"AWS", "AWS::Panorama::PackageVersion", "Panorama PackageVersion", "Other"},
	{"AWS", "AWS::OpsWorksCM::Server", "OpsWork Configuration Manager Server", "Ops"},
	{"AWS", "AWS::OpsWorks::App", "OpsWorks App", "Ops"},
	{"AWS", "AWS::OpsWorks::ElasticLoadBalancerAttachment", "OpsWorks ElasticLoadBalancerAttachment", "Ops"},
	{"AWS", "AWS::OpsWorks::Instance", "OpsWorks Instance", "Ops"},
	{"AWS", "AWS::OpsWorks::Layer", "OpsWorks Layer", "Ops"},
	{"AWS", "AWS::OpsWorks::Stack", "OpsWorks Stack", "Ops"},
	{"AWS", "AWS::OpsWorks::UserProfile", "OpsWorks UserProfile", "Ops"},
	{"AWS", "AWS::OpsWorks::Volume", "OpsWorks Volume", "Ops"},
	{"AWS", "AWS::OpenSearchService::Domain", "OpenSearchService Domain", "Ops"},
	{"AWS", "AWS::Elasticsearch::Domain", "Elasticsearch Domain", "Database"},
	{"AWS", "AWS::NimbleStudio::LaunchProfile", "NimbleStudio LaunchProfile", "Management"},
	{"AWS", "AWS::NimbleStudio::StreamingImage", "NimbleStudio StreamingImage", "Management"},
	{"AWS", "AWS::NimbleStudio::Studio", "NimbleStudio Studio", "Management"},
	{"AWS", "AWS::NimbleStudio::StudioComponent", "NimbleStudio StudioComponent", "Management"},
	{"AWS", "AWS::NetworkManager::CustomerGatewayAssociation", "NetworkManager CustomerGatewayAssociation", "Networking"},
	{"AWS", "AWS::NetworkManager::Device", "NetworkManager Device", "Networking"},
	{"AWS", "AWS::NetworkManager::GlobalNetwork", "NetworkManager GlobalNetwork", "Networking"},
	{"AWS", "AWS::NetworkManager::Link", "NetworkManager Link", "Networking"},
	{"AWS", "AWS::NetworkManager::LinkAssociation", "NetworkManager LinkAssociation", "Networking"},
	{"AWS", "AWS::NetworkManager::Site", "NetworkManager Site", "Networking"},
	{"AWS", "AWS::NetworkManager::TransitGatewayRegistration", "NetworkManager TransitGatewayRegistration", "Networking"},
	{"AWS", "AWS::NetworkFirewall::Firewall", "NetworkFirewall Firewall", "Security"},
	{"AWS", "AWS::NetworkFirewall::FirewallPolicy", "NetworkFirewall FirewallPolicy", "Security"},
	{"AWS", "AWS::NetworkFirewall::LoggingConfiguration", "NetworkFirewall LoggingConfiguration", "Security"},
	{"AWS", "AWS::NetworkFirewall::RuleGroup", "NetworkFirewall RuleGroup", "Security"},
	{"AWS", "AWS::Neptune::DBCluster", "Neptune DBCluster", "Database"},
	{"AWS", "AWS::Neptune::DBClusterParameterGroup", "Neptune DBClusterParameterGroup", "Database"},
	{"AWS", "AWS::Neptune::DBInstance", "Neptune DBInstance", "Database"},
	{"AWS", "AWS::Neptune::DBParameterGroup", "Neptune DBParameterGroup", "Database"},
	{"AWS", "AWS::Neptune::DBSubnetGroup", "Neptune DBSubnetGroup", "Database"},
	{"AWS", "AWS::MWAA::Environment", "Managed Airflow Environment", "Database"},
	{"AWS", "AWS::MemoryDB::ACL", "MemoryDB ACL", "Database"},
	{"AWS", "AWS::MemoryDB::Cluster", "MemoryDB Cluster", "Database"},
	{"AWS", "AWS::MemoryDB::ParameterGroup", "MemoryDB ParameterGroup", "Database"},
	{"AWS", "AWS::MemoryDB::SubnetGroup", "MemoryDB SubnetGroup", "Database"},
	{"AWS", "AWS::MemoryDB::User", "MemoryDB User", "Database"},
	{"AWS", "AWS::AmazonMQ::Broker", "AmazonMQ Broker", "Messaging"},
	{"AWS", "AWS::AmazonMQ::Configuration", "AmazonMQ Configuration", "Messaging"},
	{"AWS", "AWS::AmazonMQ::ConfigurationAssociation", "AmazonMQ ConfigurationAssociation", "Messaging"},
	{"AWS", "AWS::MediaStore::Container", "MediaStore Container", "Media"},
	{"AWS", "AWS::MediaPackage::Asset", "Media Package Asset", "Media"},
	{"AWS", "AWS::MediaPackage::Channel", "Media Package Channel", "Media"},
	{"AWS", "AWS::MediaPackage::OriginEndpoint", "Media Package OriginEndpoint", "Media"},
	{"AWS", "AWS::MediaPackage::PackagingConfiguration", "Media Package PackagingConfiguration", "Media"},
	{"AWS", "AWS::MediaPackage::PackagingGroup", "Media Package PackagingGroup", "Media"},
	{"AWS", "AWS::MediaLive::Channel", "Media Live Channel", "Media"},
	{"AWS", "AWS::MediaLive::Input", "Media Live Input", "Media"},
	{"AWS", "AWS::MediaLive::InputSecurityGroup", "Media Live InputSecurityGroup", "Media"},
	{"AWS", "AWS::MediaConvert::JobTemplate", "Media Convert JobTemplate", "Media"},
	{"AWS", "AWS::MediaConvert::Preset", "Media Convert Preset", "Media"},
	{"AWS", "AWS::MediaConvert::Queue", "Media Convert Queue", "Media"},
	{"AWS", "AWS::MediaConnect::Flow", "Media Connect Flow", "Media"},
	{"AWS", "AWS::MediaConnect::FlowEntitlement", "Media Connect FlowEntitlement", "Media"},
	{"AWS", "AWS::MediaConnect::FlowOutput", "Media Connect FlowOutput", "Media"},
	{"AWS", "AWS::MediaConnect::FlowSource", "Media Connect FlowSource", "Media"},
	{"AWS", "AWS::MediaConnect::FlowVpcInterface", "Media Connect FlowVpcInterface", "Media"},
	{"AWS", "AWS::ManagedBlockchain::Member", "Managed Blockchain Member", "Other"},
	{"AWS", "AWS::ManagedBlockchain::Node", "Managed Blockchain Node", "Other"},
	{"AWS", "AWS::Macie::CustomDataIdentifier", "Macie CustomDataIdentifier", "Security"},
	{"AWS", "AWS::Macie::FindingsFilter", "Macie FindingsFilter", "Security"},
	{"AWS", "AWS::Macie::Session", "Macie Session", "Security"},
	{"AWS", "AWS::LookoutVision::Project", "LookoutVision Project", "Other"},
	{"AWS", "AWS::LookoutMetrics::Alert", "Lookout Metrics Alert", "Other"},
	{"AWS", "AWS::LookoutMetrics::AnomalyDetector", "Lookout Metrics AnomalyDetector", "Other"},
	{"AWS", "AWS::LookoutEquipment::InferenceScheduler", "Lookout Equipment InferenceScheduler", "Other"},
	{"AWS", "AWS::Location::GeofenceCollection", "Location GeofenceCollection", "Other"},
	{"AWS", "AWS::Location::Map", "Location Map", "Other"},
	{"AWS", "AWS::Location::PlaceIndex", "Location PlaceIndex", "Other"},
	{"AWS", "AWS::Location::RouteCalculator", "Location RouteCalculator", "Other"},
	{"AWS", "AWS::Location::Tracker", "Location Tracker", "Other"},
	{"AWS", "AWS::Location::TrackerConsumer", "Location TrackerConsumer", "Other"},
	{"AWS", "AWS::Lightsail::Alarm", "Lightsail Alarm", "App Env"},
	{"AWS", "AWS::Lightsail::Bucket", "Lightsail Bucket", "App Env"},
	{"AWS", "AWS::Lightsail::Certificate", "Lightsail Certificate", "App Env"},
	{"AWS", "AWS::Lightsail::Container", "Lightsail Container", "App Env"},
	{"AWS", "AWS::Lightsail::Database", "Lightsail Database", "App Env"},
	{"AWS", "AWS::Lightsail::Disk", "Lightsail Disk", "App Env"},
	{"AWS", "AWS::Lightsail::Distribution", "Lightsail Distribution", "App Env"},
	{"AWS", "AWS::Lightsail::Instance", "Lightsail Instance", "App Env"},
	{"AWS", "AWS::Lightsail::LoadBalancer", "Lightsail LoadBalancer", "App Env"},
	{"AWS", "AWS::Lightsail::LoadBalancerTlsCertificate", "Lightsail LoadBalancerTlsCertificate", "App Env"},
	{"AWS", "AWS::Lightsail::StaticIp", "Lightsail StaticIp", "App Env"},
	{"AWS", "AWS::LicenseManager::Grant", "License Manager Grant", "Management"},
	{"AWS", "AWS::LicenseManager::License", "License Manager License", "Management"},
	{"AWS", "AWS::Lex::Bot", "Lex Bot", "AI + ML"},
	{"AWS", "AWS::Lex::BotAlias", "Lex BotAlias", "AI + ML"},
	{"AWS", "AWS::Lex::BotVersion", "Lex BotVersion", "AI + ML"},
	{"AWS", "AWS::Lex::ResourcePolicy", "Lex ResourcePolicy", "AI + ML"},
	{"AWS", "AWS::Lambda::Alias", "Lambda Alias", "Serverless"},
	{"AWS", "AWS::Lambda::CodeSigningConfig", "Lambda CodeSigningConfig", "Serverless"},
	{"AWS", "AWS::Lambda::EventInvokeConfig", "Lambda EventInvokeConfig", "Serverless"},
	{"AWS", "AWS::Lambda::EventSourceMapping", "Lambda EventSourceMapping", "Serverless"},
	{"AWS", "AWS::Lambda::Function", "Lambda Function", "Serverless"},
	{"AWS", "AWS::Lambda::LayerVersion", "Lambda LayerVersion", "Serverless"},
	{"AWS", "AWS::Lambda::LayerVersionPermission", "Lambda LayerVersionPermission", "Serverless"},
	{"AWS", "AWS::Lambda::Permission", "Lambda Permission", "Serverless"},
	{"AWS", "AWS::Lambda::Version", "Lambda Version", "Serverless"},
	{"AWS", "AWS::LakeFormation::DataLakeSettings", "LakeFormation DataLakeSettings", "Management"},
	{"AWS", "AWS::LakeFormation::Permissions", "LakeFormation Permissions", "Management"},
	{"AWS", "AWS::LakeFormation::Resource", "LakeFormation Resource", "Management"},
	{"AWS", "AWS::KMS::Alias", "KMS Alias", "Security"},
	{"AWS", "AWS::KMS::Key", "KMS Key", "Security"},
	{"AWS", "AWS::KMS::ReplicaKey", "KMS ReplicaKey", "Security"},
	{"AWS", "AWS::KinesisFirehose::DeliveryStream", "Kinesis Firehose DeliveryStream", "Database"},
	{"AWS", "AWS::KinesisAnalyticsV2::Application", "Kinesis Analytics (V2) Application", "Database"},
	{"AWS", "AWS::KinesisAnalyticsV2::ApplicationCloudWatchLoggingOption", "Kinesis Analytics (V2) ApplicationCloudWatchLoggingOption", "Database"},
	{"AWS", "AWS::KinesisAnalyticsV2::ApplicationOutput", "Kinesis Analytics (V2) ApplicationOutput", "Database"},
	{"AWS", "AWS::KinesisAnalyticsV2::ApplicationReferenceDataSource", "Kinesis Analytics (V2) ApplicationReferenceDataSource", "Database"},
	{"AWS", "AWS::Cassandra::Keyspace", "Keyspaces (Cassandra) Keyspace", "Database"},
	{"AWS", "AWS::Cassandra::Table", "Keyspaces (Cassandra) Table", "Database"},
	{"AWS", "AWS::Kendra::DataSource", "Kendra DataSource", "Database"},
	{"AWS", "AWS::Kendra::Faq", "Kendra Faq", "Database"},
	{"AWS", "AWS::Kendra::Index", "Kendra Index", "Database"},
	{"AWS", "aws::cloudwatch::", "CloudWatch RUM AppMonitor", "Monitoring"},
	{"AWS", "aws::drs::", "Elastic Disaster Recovery", "Resiliency"},
	{"AWS", "aws::kafkaconnect::", "Managed Streaming for Kafka", "Messaging"},
	{"AWS", "aws::airflow::", "Managed Workflow for Airflow", "Workflow"},
	{"AWS", "aws::organization::", "Organization", "Management"},
	{"AWS", "aws::swf::", "Simple Workflow", "Management"},
	{"AWS", "aws::sqlworkbench::", "SQL Workbench", "Data Services"},
	{"AWS", "aws::shield::", "Shield", "Security"},
}

func findRecord(resourceType string) []string {
	resourceType = strings.ToLower(resourceType)
	for _, v := range mapping {
		if strings.HasPrefix(resourceType, strings.ToLower(v[resourceTypePrefixIdx])) {
			return v
		}
	}
	return nil
}

func CategoryByResourceType(resourceType string) string {
	record := findRecord(resourceType)
	if record != nil {
		return record[categoryIdx]
	}
	return ""
}

func CloudProviderByResourceType(resourceType string) string {
	record := findRecord(resourceType)
	if record != nil {
		return record[cloudProviderIdx]
	}
	return ""
}

func ServiceNameByResourceType(resourceType string) string {
	record := findRecord(resourceType)
	if record != nil {
		return record[serviceNameIdx]
	}
	return ""
}
