package cloudservice

import (
	"strings"

	"gitlab.com/keibiengine/keibi-engine/pkg/source"
)

type ResourceType struct {
	Provider           source.Type
	ResourceTypePrefix string
	Service            string
	Category           string
	Common             bool
}

// use these regex for replace to convert CSV into the code:
// ^\s+([\w]+),([\s-\(\)\w:./]+),([\s-\(\)\w:./]+),([\+\s-\(\)\w:./]+),([-\(\)\w:./]+)$ -> {"$1","$2","$3","$4",$5},
// Yes},$ -> true},
// No},$ -> false},

type ResourceTypeName struct {
	Provider     source.Type
	ResourceType string
	Name         string
}

type ServiceName struct {
	Provider           source.Type
	ResourceTypePrefix string
	Name               string
}

var resourceTypeNameConvertMap = []ResourceTypeName{
	{"AWS", "AWS::AccessAnalyzer::Analyzer", "AccessAnalyzer Analyzer"},
	{"AWS", "AWS::ACMPCA::Certificate", "Private Certificate"},
	{"AWS", "AWS::ACMPCA::CertificateAuthority", "Private Certificate Authority"},
	{"AWS", "AWS::Amplify::App", "Amplify App"},
	{"AWS", "AWS::ApiGateway::Account", "API Gateway Account"},
	{"AWS", "AWS::ApiGateway::Resource", "API Gateway Resource"},
	{"AWS", "AWS::ApiGateway::RestApi", "API Gateway Rest API"},
	{"AWS", "AWS::ApiGatewayV2::Api", "API Gateway V2 API"},
	{"AWS", "AWS::AppConfig::Application", "AppConfig Application"},
	{"AWS", "AWS::AppConfig::Environment", "AppConfig Environment"},
	{"AWS", "AWS::ApplicationInsights::Application", "Application Insights Application"},
	{"AWS", "AWS::AppMesh::VirtualGateway", "AppMesh Virtual Gateway"},
	{"AWS", "AWS::AppMesh::VirtualService", "AppMesh Virtual Service"},
	{"AWS", "AWS::AppRunner::Service", "AppRunner Service"},
	{"AWS", "AWS::AppStream::Application", "AppStream Application"},
	{"AWS", "AWS::AppStream::User", "AppStream User"},
	{"AWS", "AWS::AppSync::Resolver", "AppSync Resolver"},
	{"AWS", "AWS::APS::Workspace", "APS Workspace"},
	{"AWS", "AWS::Athena::DataCatalog", "Athena Data Catalog"},
	{"AWS", "AWS::Athena::NamedQuery", "Athena Named Query"},
	{"AWS", "AWS::Athena::PreparedStatement", "Athena Prepared Statement"},
	{"AWS", "AWS::Athena::WorkGroup", "Athena Work Group"},
	{"AWS", "AWS::AuditManager::Assessment", "Audit Manager Assessment"},
	{"AWS", "AWS::AutoScaling::AutoScalingGroup", "AutoScaling AutoScalingGroup"},
	{"AWS", "AWS::AutoScaling::LaunchConfiguration", "AutoScaling LaunchConfiguration"},
	{"AWS", "AWS::AutoScaling::LifecycleHook", "AutoScaling LifecycleHook"},
	{"AWS", "AWS::AutoScaling::ScheduledAction", "AutoScaling ScheduledAction"},
	{"AWS", "AWS::AutoScaling::WarmPool", "AutoScaling WarmPool"},
	{"AWS", "AWS::Backup::BackupPlan", "Backup Plan"},
	{"AWS", "AWS::Backup::BackupSelection", "Backup Selection"},
	{"AWS", "AWS::Backup::BackupVault", "Backup Vault"},
	{"AWS", "AWS::Backup::Framework", "Backup Framework"},
	{"AWS", "AWS::Batch::ComputeEnvironment", "Batch Compute Environment"},
	{"AWS", "AWS::Batch::JobDefinition", "Batch Job Definition"},
	{"AWS", "AWS::Batch::JobQueue", "Batch Job Queue"},
	{"AWS", "AWS::BillingConductor::BillingGroup", "Billing Conductor BillingGroup"},
	{"AWS", "AWS::BillingConductor::CustomLineItem", "Billing Conductor CustomLineItem"},
	{"AWS", "AWS::BillingConductor::PricingRule", "Billing Conductor PricingRule"},
	{"AWS", "AWS::Budgets::Budget", "Budgets Budget"},
	{"AWS", "AWS::Budgets::BudgetsAction", "Budgets BudgetsAction"},
	{"AWS", "AWS::Cassandra::Keyspace", "Cassandra Keyspace"},
	{"AWS", "AWS::Cassandra::Table", "Cassandra Table"},
	{"AWS", "AWS::CE::AnomalyMonitor", "CE Anomaly Monitor"},
	{"AWS", "AWS::CE::AnomalySubscription", "CE Anomaly Subscription"},
	{"AWS", "AWS::CE::CostCategory", "CE Cost Category"},
	{"AWS", "AWS::CertificateManager::Account", "Certificate Manager Account"},
	{"AWS", "AWS::CertificateManager::Certificate", "Certificate Manager Certificate"},
	{"AWS", "AWS::Chatbot::SlackChannelConfiguration", "Chatbot Slack Channel Configuration"},
	{"AWS", "AWS::Cloud9::EnvironmentEC2", "Cloud9 Environment EC2"},
	{"AWS", "AWS::CloudFormation::CustomResource", "CloudFormation Custom Resource"},
	{"AWS", "AWS::CloudFormation::HookTypeConfig", "CloudFormation Hook Type Config"},
	{"AWS", "AWS::CloudFormation::Macro", "CloudFormation Macro"},
	{"AWS", "AWS::CloudFormation::Publisher", "CloudFormation Publisher"},
	{"AWS", "AWS::CloudFormation::Stack", "CloudFormation Stack"},
	{"AWS", "AWS::CloudFormation::StackSet", "CloudFormation StackSet"},
	{"AWS", "AWS::CloudFormation::TypeActivation", "CloudFormation Type Activation"},
	{"AWS", "AWS::CloudFormation::WaitCondition", "CloudFormation Wait Condition"},
	{"AWS", "AWS::CloudFormation::WaitConditionHandle", "CloudFormation Wait Condition Handle"},
	{"AWS", "AWS::CloudFront::CloudFrontOriginAccessIdentity", "CloudFront Origin Access Identity"},
	{"AWS", "AWS::CloudFront::Distribution", "CloudFront Distribution"},
	{"AWS", "AWS::CloudFront::Function", "CloudFront Function"},
	{"AWS", "AWS::CloudFront::KeyGroup", "CloudFront KeyGroup"},
	{"AWS", "AWS::CloudFront::PublicKey", "CloudFront Public Key"},
	{"AWS", "AWS::CloudFront::RealtimeLogConfig", "CloudFront Realtime Log Config"},
	{"AWS", "AWS::CloudFront::StreamingDistribution", "CloudFront Streaming Distribution"},
	{"AWS", "AWS::CloudTrail::EventDataStore", "CloudTrail Event Data Store"},
	{"AWS", "AWS::CloudTrail::Trail", "CloudTrail Trail"},
	{"AWS", "AWS::CloudWatch::Alarm", "CloudWatch Alarm"},
	{"AWS", "AWS::CloudWatch::AnomalyDetector", "CloudWatch Anamoly Detector"},
	{"AWS", "AWS::CloudWatch::CompositeAlarm", "CloudWatch Composite Alarm"},
	{"AWS", "AWS::CloudWatch::Dashboard", "CloudWatch Dashboard"},
	{"AWS", "AWS::CloudWatch::InsightRule", "CloudWatch InsightRule"},
	{"AWS", "AWS::CloudWatch::MetricStream", "CloudWatch Metric Stream"},
	{"AWS", "AWS::CodeArtifact::Domain", "Code Artifact Domain"},
	{"AWS", "AWS::CodeArtifact::Repository", "Code Artifact Repository"},
	{"AWS", "AWS::CodeBuild::Project", "CodeBuild Project"},
	{"AWS", "AWS::CodeBuild::ReportGroup", "CodeBuild Report Group"},
	{"AWS", "AWS::CodeBuild::SourceCredential", "CodeBuild Source Credential"},
	{"AWS", "AWS::CodeCommit::Repository", "CodeCommit Repository"},
	{"AWS", "AWS::CodeDeploy::Application", "CodeDeploy Application"},
	{"AWS", "AWS::CodeDeploy::DeploymentConfig", "CodeDeploy Deployment Config"},
	{"AWS", "AWS::CodeDeploy::DeploymentGroup", "CodeDeploy Deployment Group"},
	{"AWS", "AWS::CodePipeline::CustomActionType", "CodePipeline Custom Action Type"},
	{"AWS", "AWS::CodePipeline::Pipeline", "CodePipeline Pipeline"},
	{"AWS", "AWS::CodePipeline::Webhook", "CodePipeline Webhook"},
	{"AWS", "AWS::CodeStar::GitHubRepository", "CodeStar GitHub Repository"},
	{"AWS", "AWS::CodeStarConnections::Connection", "CodeStar Connection"},
	{"AWS", "AWS::CodeStarNotifications::NotificationRule", "CodeStar Notification Rule"},
	{"AWS", "AWS::Cognito::IdentityPool", "Cognito Identity Pool"},
	{"AWS", "AWS::Cognito::UserPool", "Cognito User PoolÂ "},
	{"AWS", "AWS::Cognito::UserPoolClient", "Cognito User Pool Client"},
	{"AWS", "AWS::Cognito::UserPoolDomain", "Cognito User Pool Domain"},
	{"AWS", "AWS::Cognito::UserPoolGroup", "Cognito User Pool Group"},
	{"AWS", "AWS::Cognito::UserPoolIdentityProvider", "Cognito User Pool Identity Provider"},
	{"AWS", "AWS::Cognito::UserPoolResourceServer", "Cognito User Pool Resource Server"},
	{"AWS", "AWS::Cognito::UserPoolUser", "Cognito User Pool User"},
	{"AWS", "AWS::Config::AggregationAuthorization", "Config Aggregation Authorization"},
	{"AWS", "AWS::Config::ConfigRule", "Config Rule"},
	{"AWS", "AWS::Config::ConfigurationAggregator", "Config Configuration Aggregator"},
	{"AWS", "AWS::Config::ConfigurationRecorder", "Config Configuration Recorder"},
	{"AWS", "AWS::Config::ConformancePack", "Config Conformance Pack"},
	{"AWS", "AWS::Config::DeliveryChannel", "Config Delivery Channel"},
	{"AWS", "AWS::Config::OrganizationConfigRule", "Config Organization Config Rule"},
	{"AWS", "AWS::Config::OrganizationConformancePack", "Config Organization Conformance Pack"},
	{"AWS", "AWS::Config::RemediationConfiguration", "Config Remediation Configuration"},
	{"AWS", "AWS::Config::StoredQuery", "Config Stored Query"},
	{"AWS", "AWS::Connect::ContactFlow", "Connect Contact Flow"},
	{"AWS", "AWS::Connect::ContactFlowModule", "Connect Contact Flow Module"},
	{"AWS", "AWS::Connect::HoursOfOperation", "Connect HoursOfOperation"},
	{"AWS", "AWS::Connect::PhoneNumber", "Connect Phone Number"},
	{"AWS", "AWS::Connect::QuickConnect", "Connect Quick Connect"},
	{"AWS", "AWS::Connect::TaskTemplate", "Connect TaskTemplate"},
	{"AWS", "AWS::Connect::User", "Connect User"},
	{"AWS", "AWS::Connect::UserHierarchyGroup", "Connect User Hierarchy Group"},
	{"AWS", "AWS::ConnectCampaigns::Campaign", "ConnectCampaigns Campaign"},
	{"AWS", "AWS::CustomerProfiles::Domain", "CustomerProfiles Domain"},
	{"AWS", "AWS::DataBrew::Dataset", "DataBrew Dataset"},
	{"AWS", "AWS::DataBrew::Job", "DataBrew Job"},
	{"AWS", "AWS::DataBrew::Project", "DataBrew Project"},
	{"AWS", "AWS::DataBrew::Recipe", "DataBrew Recipe"},
	{"AWS", "AWS::DataBrew::Ruleset", "DataBrew Ruleset"},
	{"AWS", "AWS::DataBrew::Schedule", "DataBrew Schedule"},
	{"AWS", "AWS::DataPipeline::Pipeline", "DataPipeline Pipeline"},
	{"AWS", "AWS::DataSync::Agent", "DataSync Agent"},
	{"AWS", "AWS::DataSync::LocationEFS", "DataSync LocationEFS"},
	{"AWS", "AWS::DataSync::LocationFSxLustre", "DataSync LocationFSxLustre"},
	{"AWS", "AWS::DataSync::LocationFSxONTAP", "DataSync LocationFSxONTAP"},
	{"AWS", "AWS::DataSync::LocationFSxOpenZFS", "DataSync LocationFSxOpenZFS"},
	{"AWS", "AWS::DataSync::LocationFSxWindows", "DataSync LocationFSxWindows"},
	{"AWS", "AWS::DataSync::LocationHDFS", "DataSync LocationHDFS"},
	{"AWS", "AWS::DataSync::LocationNFS", "DataSync LocationNFS"},
	{"AWS", "AWS::DataSync::LocationObjectStorage", "DataSync LocationObjectStorage"},
	{"AWS", "AWS::DataSync::LocationS3", "DataSync LocationS3"},
	{"AWS", "AWS::DataSync::LocationSMB", "DataSync LocationSMB"},
	{"AWS", "AWS::DataSync::Task", "DataSync Task"},
	{"AWS", "AWS::DAX::Cluster", "DAX Cluster"},
	{"AWS", "AWS::DAX::ParameterGroup", "DAX ParameterGroup"},
	{"AWS", "AWS::DAX::SubnetGroup", "DAX SubnetGroup"},
	{"AWS", "AWS::Detective::Graph", "Detective Graph"},
	{"AWS", "AWS::Detective::MemberInvitation", "Detective MemberInvitation"},
	{"AWS", "AWS::DeviceFarm::DevicePool", "DeviceFarm DevicePool"},
	{"AWS", "AWS::DeviceFarm::Project", "DeviceFarm Project"},
	{"AWS", "AWS::DeviceFarm::TestGridProject", "DeviceFarm TestGridProject"},
	{"AWS", "AWS::DeviceFarm::VPCEConfiguration", "DeviceFarm VPCEConfiguration"},
	{"AWS", "AWS::DevOpsGuru::NotificationChannel", "DevOpsGuru NotificationChannel"},
	{"AWS", "AWS::DevOpsGuru::ResourceCollection", "DevOpsGuru ResourceCollection"},
	{"AWS", "AWS::DirectoryService::MicrosoftAD", "DirectoryService MicrosoftAD"},
	{"AWS", "AWS::DirectoryService::SimpleAD", "DirectoryService SimpleAD"},
	{"AWS", "AWS::DMS::Certificate", "DMS Certificate"},
	{"AWS", "AWS::DMS::Endpoint", "DMS Endpoint"},
	{"AWS", "AWS::DMS::EventSubscription", "DMS EventSubscription"},
	{"AWS", "AWS::DMS::ReplicationInstance", "DMS ReplicationInstance"},
	{"AWS", "AWS::DMS::ReplicationSubnetGroup", "DMS ReplicationSubnetGroup"},
	{"AWS", "AWS::DMS::ReplicationTask", "DMS ReplicationTask"},
	{"AWS", "AWS::DocDB::DBCluster", "DocDB DBCluster"},
	{"AWS", "AWS::DocDB::DBInstance", "DocDB DBInstance"},
	{"AWS", "AWS::DocDB::DBSubnetGroup", "DocDB DBSubnetGroup"},
	{"AWS", "AWS::DynamoDB::GlobalTable", "DynamoDB GlobalTable"},
	{"AWS", "AWS::DynamoDB::Table", "DynamoDB Table"},
	{"AWS", "AWS::EC2::CarrierGateway", "EC2 Carrier Gateway"},
	{"AWS", "AWS::EC2::ClientVpnEndpoint", "EC2 Client VPN Endpoint"},
	{"AWS", "AWS::EC2::CustomerGateway", "EC2 Customer Gateway"},
	{"AWS", "AWS::EC2::DHCPOptions", "EC2 DHCP Options"},
	{"AWS", "AWS::EC2::EC2Fleet", "EC2 EC2 Fleet"},
	{"AWS", "AWS::EC2::EgressOnlyInternetGateway", "EC2 EgressOnly Internet Gateway"},
	{"AWS", "AWS::EC2::EIP", "EC2 Elastic IP"},
	{"AWS", "AWS::EC2::FlowLog", "EC2 FlowLog"},
	{"AWS", "AWS::EC2::Host", "EC2 Host"},
	{"AWS", "AWS::EC2::Instance", "EC2 Instance"},
	{"AWS", "AWS::EC2::InternetGateway", "EC2 InternetGateway"},
	{"AWS", "AWS::EC2::IPAM", "EC2 IPAM"},
	{"AWS", "AWS::EC2::IPAMPool", "EC2 IPAMPool"},
	{"AWS", "AWS::EC2::KeyPair", "EC2 KeyPair"},
	{"AWS", "AWS::EC2::LocalGatewayRoute", "EC2 LocalGatewayRoute"},
	{"AWS", "AWS::EC2::NatGateway", "EC2 NAT Gateway"},
	{"AWS", "AWS::EC2::NetworkAcl", "EC2 Network ACL"},
	{"AWS", "AWS::EC2::NetworkInterface", "EC2 NetworkInterface"},
	{"AWS", "AWS::EC2::PlacementGroup", "EC2 PlacementGroup"},
	{"AWS", "AWS::EC2::PrefixList", "EC2 PrefixList"},
	{"AWS", "AWS::EC2::Route", "EC2 Route"},
	{"AWS", "AWS::EC2::RouteTable", "EC2 RouteTable"},
	{"AWS", "AWS::EC2::SecurityGroup", "EC2 SecurityGroup"},
	{"AWS", "AWS::EC2::SecurityGroupEgress", "EC2 SecurityGroup Egress"},
	{"AWS", "AWS::EC2::SecurityGroupIngress", "EC2 SecurityGroup Ingress"},
	{"AWS", "AWS::EC2::SpotFleet", "EC2 SpotFleet"},
	{"AWS", "AWS::EC2::Subnet", "EC2 Subnet"},
	{"AWS", "AWS::EC2::SubnetCidrBlock", "EC2 Subnet Cidr Block"},
	{"AWS", "AWS::EC2::TrafficMirrorFilter", "EC2 Traffic Mirror Filter"},
	{"AWS", "AWS::EC2::TrafficMirrorFilterRule", "EC2 Traffic Mirror FilterRule"},
	{"AWS", "AWS::EC2::TrafficMirrorSession", "EC2 Traffic Mirror Session"},
	{"AWS", "AWS::EC2::TrafficMirrorTarget", "EC2 Traffic Mirror Target"},
	{"AWS", "AWS::EC2::TransitGateway", "EC2 Transit GatewayÂ "},
	{"AWS", "AWS::EC2::TransitGatewayConnect", "EC2 Transit Gateway Connect"},
	{"AWS", "AWS::EC2::TransitGatewayMulticastDomain", "EC2 Transit Gateway MulticastDomain"},
	{"AWS", "AWS::EC2::TransitGatewayMulticastGroupMember", "EC2 Transit Gateway MulticastGroupMember"},
	{"AWS", "AWS::EC2::TransitGatewayMulticastGroupSource", "EC2 Transit Gateway MulticastGroupSource"},
	{"AWS", "AWS::EC2::TransitGatewayRoute", "EC2 Transit Gateway Route"},
	{"AWS", "AWS::EC2::TransitGatewayRouteTable", "EC2 Transit Gateway RouteTable"},
	{"AWS", "AWS::EC2::TransitGatewayRouteTablePropagation", "EC2 Transit Gateway RouteTablePropagation"},
	{"AWS", "AWS::EC2::Volume", "EC2 Volume"},
	{"AWS", "AWS::EC2::VPC", "EC2 VPC"},
	{"AWS", "AWS::EC2::VPCCidrBlock", "EC2 VPC Cidr Block"},
	{"AWS", "AWS::EC2::VPCEndpoint", "EC2 VPC Endpoint"},
	{"AWS", "AWS::EC2::VPCEndpointConnectionNotification", "EC2 VPC EndpointConnectionNotification"},
	{"AWS", "AWS::EC2::VPCPeeringConnection", "EC2 VPC PeeringConnection"},
	{"AWS", "AWS::EC2::VPNConnection", "EC2 VPN Connection"},
	{"AWS", "AWS::EC2::VPNConnectionRoute", "EC2 VPN ConnectionRoute"},
	{"AWS", "AWS::EC2::VPNGateway", "EC2 VPN Gateway"},
	{"AWS", "AWS::EC2::VPNGatewayRoutePropagation", "EC2 VPN GatewayRoutePropagation"},
	{"AWS", "AWS::ECR::PublicRepository", "ECR PublicRepository"},
	{"AWS", "AWS::ECR::PullThroughCacheRule", "ECR PullThroughCacheRule"},
	{"AWS", "AWS::ECR::ReplicationConfiguration", "ECR ReplicationConfiguration"},
	{"AWS", "AWS::ECR::Repository", "ECR Repository"},
	{"AWS", "AWS::ECS::CapacityProvider", "ECS CapacityProvider"},
	{"AWS", "AWS::ECS::Cluster", "ECS Cluster"},
	{"AWS", "AWS::ECS::PrimaryTaskSet", "ECS PrimaryTaskSet"},
	{"AWS", "AWS::ECS::Service", "ECS Service"},
	{"AWS", "AWS::ECS::TaskDefinition", "ECS TaskDefinition"},
	{"AWS", "AWS::ECS::TaskSet", "ECS TaskSet"},
	{"AWS", "AWS::EFS::AccessPoint", "EFS AccessPoint"},
	{"AWS", "AWS::EFS::FileSystem", "EFS FileSystem"},
	{"AWS", "AWS::EFS::MountTarget", "EFS MountTarget"},
	{"AWS", "AWS::EKS::Addon", "EKS Addon"},
	{"AWS", "AWS::EKS::Cluster", "EKS Cluster"},
	{"AWS", "AWS::EKS::IdentityProviderConfig", "EKS IdentityProviderConfig"},
	{"AWS", "AWS::EKS::Nodegroup", "EKS Nodegroup"},
	{"AWS", "AWS::ElastiCache::CacheCluster", "ElastiCache CacheCluster"},
	{"AWS", "AWS::ElastiCache::ReplicationGroup", "ElastiCache ReplicationGroup"},
	{"AWS", "AWS::ElastiCache::User", "ElastiCache User"},
	{"AWS", "AWS::ElastiCache::UserGroup", "ElastiCache UserGroup"},
	{"AWS", "AWS::ElasticBeanstalk::Application", "ElasticBeanstalk Application"},
	{"AWS", "AWS::ElasticBeanstalk::Environment", "ElasticBeanstalk Environment"},
	{"AWS", "AWS::ElasticLoadBalancing::LoadBalancer", "ElasticLoadBalancing LoadBalancer"},
	{"AWS", "AWS::ElasticLoadBalancingV2::Listener", "ElasticLoadBalancingV2 Listener"},
	{"AWS", "AWS::ElasticLoadBalancingV2::LoadBalancer", "ElasticLoadBalancingV2 LoadBalancer"},
	{"AWS", "AWS::ElasticLoadBalancingV2::TargetGroup", "ElasticLoadBalancingV2 TargetGroup"},
	{"AWS", "AWS::EMR::Cluster", "EMR Cluster"},
	{"AWS", "AWS::EMR::Step", "EMR Step"},
	{"AWS", "AWS::EMR::Studio", "EMR Studio"},
	{"AWS", "AWS::EMR::StudioSessionMapping", "EMR StudioSessionMapping"},
	{"AWS", "AWS::EMRContainers::VirtualCluster", "EMRContainers VirtualCluster"},
	{"AWS", "AWS::EMRServerless::Application", "EMRServerless Application"},
	{"AWS", "AWS::Events::Archive", "Events Archive"},
	{"AWS", "AWS::Events::Connection", "Events Connection"},
	{"AWS", "AWS::Events::Endpoint", "Events Endpoint"},
	{"AWS", "AWS::Events::EventBus", "Events EventBus"},
	{"AWS", "AWS::Events::Rule", "Events Rule"},
	{"AWS", "AWS::EventSchemas::Discoverer", "EventSchemas Discoverer"},
	{"AWS", "AWS::EventSchemas::Registry", "EventSchemas Registry"},
	{"AWS", "AWS::EventSchemas::Schema", "EventSchemas Schema"},
	{"AWS", "AWS::Evidently::Experiment", "Evidently Experiment"},
	{"AWS", "AWS::Evidently::Feature", "Evidently Feature"},
	{"AWS", "AWS::Evidently::Launch", "Evidently Launch"},
	{"AWS", "AWS::Evidently::Project", "Evidently Project"},
	{"AWS", "AWS::FinSpace::Environment", "FinSpace Environment"},
	{"AWS", "AWS::FMS::NotificationChannel", "FMS NotificationChannel"},
	{"AWS", "AWS::Forecast::Dataset", "Forecast Dataset"},
	{"AWS", "AWS::Forecast::DatasetGroup", "Forecast DatasetGroup"},
	{"AWS", "AWS::FraudDetector::Detector", "FraudDetector Detector"},
	{"AWS", "AWS::FraudDetector::EventType", "FraudDetector EventType"},
	{"AWS", "AWS::FraudDetector::Outcome", "FraudDetector Outcome"},
	{"AWS", "AWS::FSx::FileSystem", "FSx FileSystem"},
	{"AWS", "AWS::FSx::StorageVirtualMachine", "FSx StorageVirtualMachine"},
	{"AWS", "AWS::FSx::Volume", "FSx Volume"},
	{"AWS", "AWS::GameLift::Build", "GameLift Build"},
	{"AWS", "AWS::GameLift::Fleet", "GameLift Fleet"},
	{"AWS", "AWS::GameLift::GameServerGroup", "GameLift GameServerGroup"},
	{"AWS", "AWS::GameLift::GameSessionQueue", "GameLift GameSessionQueue"},
	{"AWS", "AWS::GameLift::Script", "GameLift Script"},
	{"AWS", "AWS::GlobalAccelerator::Accelerator", "GlobalAccelerator Accelerator"},
	{"AWS", "AWS::Glue::Crawler", "Glue Crawler"},
	{"AWS", "AWS::Glue::Database", "Glue Database"},
	{"AWS", "AWS::Glue::Job", "Glue Job"},
	{"AWS", "AWS::Glue::Partition", "Glue Partition"},
	{"AWS", "AWS::Glue::Registry", "Glue Registry"},
	{"AWS", "AWS::Glue::Schema", "Glue Schema"},
	{"AWS", "AWS::Glue::Table", "Glue Table"},
	{"AWS", "AWS::Greengrass::Group", "Greengrass Group"},
	{"AWS", "AWS::GroundStation::Config", "GroundStation Config"},
	{"AWS", "AWS::GroundStation::DataflowEndpointGroup", "GroundStation DataflowEndpointGroup"},
	{"AWS", "AWS::GuardDuty::Detector", "GuardDuty Detector"},
	{"AWS", "AWS::GuardDuty::Filter", "GuardDuty Filter"},
	{"AWS", "AWS::GuardDuty::IPSet", "GuardDuty IPSet"},
	{"AWS", "AWS::GuardDuty::Master", "GuardDuty Master"},
	{"AWS", "AWS::GuardDuty::Member", "GuardDuty Member"},
	{"AWS", "AWS::GuardDuty::ThreatIntelSet", "GuardDuty ThreatIntelSet"},
	{"AWS", "AWS::HealthLake::FHIRDatastore", "HealthLake FHIRDatastore"},
	{"AWS", "AWS::IAM::AccessKey", "IAM AccessKey"},
	{"AWS", "AWS::IAM::Group", "IAM Group"},
	{"AWS", "AWS::IAM::OIDCProvider", "IAM OIDCProvider"},
	{"AWS", "AWS::IAM::Policy", "IAM Policy"},
	{"AWS", "AWS::IAM::Role", "IAM Role"},
	{"AWS", "AWS::IAM::User", "IAM User"},
	{"AWS", "AWS::IAM::VirtualMFADevice", "IAM VirtualMFADevice"},
	{"AWS", "AWS::ImageBuilder::Image", "ImageBuilder Image"},
	{"AWS", "AWS::Inspector::AssessmentTarget", "Inspector AssessmentTarget"},
	{"AWS", "AWS::Inspector::ResourceGroup", "Inspector ResourceGroup"},
	{"AWS", "AWS::InspectorV2::Filter", "InspectorV2 Filter"},
	{"AWS", "AWS::IVS::Channel", "IVS Channel"},
	{"AWS", "AWS::IVS::PlaybackKeyPair", "IVS PlaybackKeyPair"},
	{"AWS", "AWS::IVS::RecordingConfiguration", "IVS RecordingConfiguration"},
	{"AWS", "AWS::IVS::StreamKey", "IVS StreamKey"},
	{"AWS", "AWS::Kendra::DataSource", "Kendra DataSource"},
	{"AWS", "AWS::Kendra::Faq", "Kendra Faq"},
	{"AWS", "AWS::Kendra::Index", "Kendra Index"},
	{"AWS", "AWS::Kinesis::Stream", "Kinesis Stream"},
	{"AWS", "AWS::Kinesis::StreamConsumer", "Kinesis StreamConsumer"},
	{"AWS", "AWS::KinesisAnalytics::Application", "KinesisAnalytics Application"},
	{"AWS", "AWS::KinesisAnalyticsV2::Application", "KinesisAnalyticsV2 Application"},
	{"AWS", "AWS::KinesisFirehose::DeliveryStream", "KinesisFirehose DeliveryStream"},
	{"AWS", "AWS::KinesisVideo::SignalingChannel", "KinesisVideo SignalingChannel"},
	{"AWS", "AWS::KinesisVideo::Stream", "KinesisVideo Stream"},
	{"AWS", "AWS::KMS::Alias", "KMS Alias"},
	{"AWS", "AWS::KMS::Key", "KMS Key"},
	{"AWS", "AWS::KMS::ReplicaKey", "KMS ReplicaKey"},
	{"AWS", "AWS::LakeFormation::DataCellsFilter", "LakeFormation DataCellsFilter"},
	{"AWS", "AWS::LakeFormation::DataLakeSettings", "LakeFormation DataLakeSettings"},
	{"AWS", "AWS::LakeFormation::Permissions", "LakeFormation Permissions"},
	{"AWS", "AWS::LakeFormation::PrincipalPermissions", "LakeFormation PrincipalPermissions"},
	{"AWS", "AWS::LakeFormation::Resource", "LakeFormation Resource"},
	{"AWS", "AWS::LakeFormation::Tag", "LakeFormation Tag"},
	{"AWS", "AWS::Lambda::Alias", "Lambda Alias"},
	{"AWS", "AWS::Lambda::CodeSigningConfig", "Lambda CodeSigningConfig"},
	{"AWS", "AWS::Lambda::EventInvokeConfig", "Lambda EventInvokeConfig"},
	{"AWS", "AWS::Lambda::EventSourceMapping", "Lambda EventSourceMapping"},
	{"AWS", "AWS::Lambda::Function", "Lambda Function"},
	{"AWS", "AWS::Lambda::Permission", "Lambda Permission"},
	{"AWS", "AWS::Lambda::Url", "Lambda Url"},
	{"AWS", "AWS::Lambda::Version", "Lambda Version"},
	{"AWS", "AWS::Lex::Bot", "Lex Bot"},
	{"AWS", "AWS::Lex::BotAlias", "Lex BotAlias"},
	{"AWS", "AWS::LicenseManager::Grant", "LicenseManager Grant"},
	{"AWS", "AWS::LicenseManager::License", "LicenseManager License"},
	{"AWS", "AWS::Lightsail::Alarm", "Lightsail Alarm"},
	{"AWS", "AWS::Lightsail::Bucket", "Lightsail Bucket"},
	{"AWS", "AWS::Lightsail::Certificate", "Lightsail Certificate"},
	{"AWS", "AWS::Lightsail::Container", "Lightsail Container"},
	{"AWS", "AWS::Lightsail::Database", "Lightsail Database"},
	{"AWS", "AWS::Lightsail::Disk", "Lightsail Disk"},
	{"AWS", "AWS::Lightsail::Distribution", "Lightsail Distribution"},
	{"AWS", "AWS::Lightsail::Instance", "Lightsail Instance"},
	{"AWS", "AWS::Lightsail::LoadBalancer", "Lightsail LoadBalancer"},
	{"AWS", "AWS::Lightsail::LoadBalancerTlsCertificate", "Lightsail LoadBalancerTlsCertificate"},
	{"AWS", "AWS::Lightsail::StaticIp", "Lightsail StaticIp"},
	{"AWS", "AWS::Location::GeofenceCollection", "Location GeofenceCollection"},
	{"AWS", "AWS::Location::Map", "Location Map"},
	{"AWS", "AWS::Location::Tracker", "Location Tracker"},
	{"AWS", "AWS::Logs::Destination", "Logs Destination"},
	{"AWS", "AWS::Logs::LogGroup", "Logs LogGroup"},
	{"AWS", "AWS::Logs::LogStream", "Logs LogStream"},
	{"AWS", "AWS::LookoutMetrics::AnomalyDetector", "LookoutMetrics AnomalyDetector"},
	{"AWS", "AWS::LookoutVision::Project", "LookoutVision Project"},
	{"AWS", "AWS::SDB::Domain", "SDB Domain"},
	{"AWS", "AWS::SecretsManager::RotationSchedule", "SecretsManager RotationSchedule"},
	{"AWS", "AWS::SecretsManager::Secret", "SecretsManager Secret"},
	{"AWS", "AWS::SecurityHub::Hub", "SecurityHub Hub"},
	{"AWS", "AWS::ServiceDiscovery::Instance", "Service Discovery Instance"},
	{"AWS", "AWS::SES::ConfigurationSet", "SES ConfigurationSet"},
	{"AWS", "AWS::SES::ContactList", "SES ContactList"},
	{"AWS", "AWS::SES::DedicatedIpPool", "SES DedicatedIpPool"},
	{"AWS", "AWS::SES::EmailIdentity", "SES EmailIdentity"},
	{"AWS", "AWS::SES::Template", "SES Template"},
	{"AWS", "AWS::SNS::Subscription", "SNS Subscription"},
	{"AWS", "AWS::SNS::Topic", "SNS Topic"},
	{"AWS", "AWS::SQS::Queue", "SQS Queue"},
	{"AWS", "AWS::SSM::Document", "SSM Document"},
	{"AWS", "AWS::SSM::PatchBaseline", "SSM PatchBaseline"},
	{"AWS", "AWS::SSO::Assignment", "SSO Assignment"},
	{"AWS", "AWS::SSO::PermissionSet", "SSO PermissionSet"},
	{"AWS", "AWS::StepFunctions::Activity", "StepFunctions Activity"},
	{"AWS", "AWS::StepFunctions::StateMachine", "StepFunctions StateMachine"},
	{"AWS", "AWS::Synthetics::Canary", "Synthetics Canary"},
	{"AWS", "AWS::Timestream::Database", "Timestream Database"},
	{"AWS", "AWS::Timestream::Table", "Timestream Table"},
	{"AWS", "AWS::Transfer::Server", "Transfer Server"},
	{"AWS", "AWS::Transfer::User", "Transfer User"},
	{"AWS", "AWS::Transfer::Workflow", "Transfer Workflow"},
	{"AWS", "AWS::VoiceID::Domain", "VoiceID Domain"},
	{"AWS", "AWS::WAF::ByteMatchSet", "WAF ByteMatchSet"},
	{"AWS", "AWS::WAF::IPSet", "WAF IPSet"},
	{"AWS", "AWS::WAF::Rule", "WAF Rule"},
	{"AWS", "AWS::WAF::WebACL", "WAF WebACL"},
	{"AWS", "AWS::WAF::XssMatchSet", "WAF XssMatchSet"},
	{"AWS", "AWS::WAFRegional::IPSet", "WAFRegional IPSet"},
	{"AWS", "AWS::WAFRegional::Rule", "WAFRegional Rule"},
	{"AWS", "AWS::WAFRegional::WebACL", "WAFRegional WebACL"},
	{"AWS", "AWS::WAFv2::RuleGroup", "WAFv2 RuleGroup"},
	{"AWS", "AWS::WAFv2::WebACL", "WAFv2 WebACL"},
	{"AWS", "AWS::Wisdom::Assistant", "Wisdom Assistant"},
	{"AWS", "AWS::WorkSpaces::Workspace", "WorkSpaces Workspace"},
	{"AWS", "AWS::XRay::Group", "XRay Group"},
	{"Azure", "Microsoft.AAD/DomainServices", "Microsoft Domain Service"},
	{"Azure", "Microsoft.ADHybridHealthService/addsservices", "AD DS Hybrid Health Service"},
	{"Azure", "Microsoft.Advisor/recommendations", "Recommendations"},
	{"Azure", "Microsoft.AlertsManagement/actionRules", "Action Rules"},
	{"Azure", "Microsoft.AlertsManagement/alerts", "Alert"},
	{"Azure", "Microsoft.AlertsManagement/alertsMetaData", "Alert Metadata"},
	{"Azure", "Microsoft.AlertsManagement/smartDetectorAlertRules", "Detector Alert Rule"},
	{"Azure", "Microsoft.AlertsManagement/smartGroups", "Smart Group"},
	{"Azure", "Microsoft.AnalysisServices/servers", "Analysis Service Server"},
	{"Azure", "Microsoft.ApiManagement/service", "API Management Service"},
	{"Azure", "Microsoft.App/containerApps", "App Container App"},
	{"Azure", "Microsoft.App/managedEnvironments", "App Managed Environment"},
	{"Azure", "Microsoft.AppConfiguration/configurationStores", "Configuration Store"},
	{"Azure", "Microsoft.AzureActiveDirectory/b2cDirectories", "B2C Directories"},
	{"Azure", "Microsoft.AzureActiveDirectory/b2ctenants", "B2C Tenants"},
	{"Azure", "Microsoft.Batch/batchAccounts", "Batch Account"},
	{"Azure", "Microsoft.Blueprint/blueprints", "Blueprints"},
	{"Azure", "Microsoft.Compute/availabilitySets", "Availability Set"},
	{"Azure", "Microsoft.Compute/capacityReservationGroups", "Capacity Reservation Group"},
	{"Azure", "Microsoft.Compute/capacityReservationGroups/capacityReservations", "Capacity Reservation"},
	{"Azure", "Microsoft.Compute/cloudServices", "Cloud Service"},
	{"Azure", "Microsoft.Compute/cloudServices/networkInterfaces", "Cloud Service Network Interface"},
	{"Azure", "Microsoft.Compute/cloudServices/publicIPAddresses", "Cloud Service Public IP Address"},
	{"Azure", "Microsoft.Compute/disks", "VM Disk"},
	{"Azure", "Microsoft.Compute/galleries", "VM Gallery"},
	{"Azure", "Microsoft.Compute/galleries/applications", "VM Gallery Application"},
	{"Azure", "Microsoft.Compute/galleries/images", "VM Gallery Image"},
	{"Azure", "Microsoft.Compute/hostGroups", "Host Group"},
	{"Azure", "Microsoft.Compute/hostGroups/hosts", "Host Group Host"},
	{"Azure", "Microsoft.Compute/images", "VM Image"},
	{"Azure", "Microsoft.Compute/restorePointCollections", "Restore Point Collection"},
	{"Azure", "Microsoft.Compute/sharedVMImages", "Share VM Image"},
	{"Azure", "Microsoft.Compute/snapshots", "VM Disk Snapshot"},
	{"Azure", "Microsoft.Compute/virtualMachines", "Virtual Machine"},
	{"Azure", "Microsoft.Compute/virtualMachines/extensions", "VM Extension"},
	{"Azure", "Microsoft.Compute/virtualMachineScaleSets", "VM Scale Set"},
	{"Azure", "Microsoft.Compute/virtualMachineScaleSets/extensions", "VM Scale Set Extension"},
	{"Azure", "Microsoft.Compute/virtualMachineScaleSets/networkInterfaces", "Scale Set Network Interface"},
	{"Azure", "Microsoft.Compute/virtualMachineScaleSets/publicIPAddresses", "VM Scale Set Public IP Address"},
	{"Azure", "Microsoft.Compute/virtualMachineScaleSets/virtualMachines", "Scale Set VM"},
	{"Azure", "Microsoft.Compute/virtualMachineScaleSets/virtualMachines/extensions", "Scale Set VM Extension"},
	{"Azure", "Microsoft.Compute/virtualMachineScaleSets/virtualMachines/networkInterfaces", "Scale Set VM Net Interface"},
	{"Azure", "Microsoft.Network/applicationGateways", "Application Gateway"},
	{"Azure", "Microsoft.Network/applicationSecurityGroups", "Application Security Group"},
	{"Azure", "Microsoft.Network/azureFirewalls", "Azure Firewall"},
	{"Azure", "Microsoft.Network/bastionHosts", "Bastion Host"},
	{"Azure", "Microsoft.Network/dnsResolvers", "DNS Resolver"},
	{"Azure", "Microsoft.Network/dnszones", "DNS Zone"},
	{"Azure", "Microsoft.Network/expressRouteCircuits", "Express Route Circuit"},
	{"Azure", "Microsoft.Network/expressRouteGateways", "Express Route Gateway"},
	{"Azure", "Microsoft.Network/firewallPolicies", "Firewall Policy"},
	{"Azure", "Microsoft.Network/frontdoors", "Frontdoor"},
	{"Azure", "Microsoft.Network/loadBalancers", "Load Balancers"},
	{"Azure", "Microsoft.Network/localNetworkGateways", "Local Network Gateway"},
	{"Azure", "Microsoft.Network/natGateways", "NAT Gateway"},
	{"Azure", "Microsoft.Network/networkInterfaces", "Network Interface"},
	{"Azure", "Microsoft.Network/networkManagers", "Network Manager"},
	{"Azure", "Microsoft.Network/networkSecurityGroups", "Network Security Group"},
	{"Azure", "Microsoft.Network/networkVirtualAppliances", "Network Virtual Appliance"},
	{"Azure", "Microsoft.Network/networkWatchers", "Network Watcher"},
	{"Azure", "Microsoft.Network/p2sVpnGateways", "Point to Site VPN Gateway"},
	{"Azure", "Microsoft.Network/privateDnsZones", "Private DNS Zone"},
	{"Azure", "Microsoft.Network/privateEndpoints", "Private Endpoints"},
	{"Azure", "Microsoft.Network/publicIPAddresses", "Public IP Address"},
	{"Azure", "Microsoft.Network/routeTables", "Route Table"},
	{"Azure", "Microsoft.Network/trafficmanagerprofiles", "Traffic Manager Profile"},
	{"Azure", "Microsoft.Network/virtualHubs", "Virtual Hub"},
	{"Azure", "Microsoft.Network/virtualNetworkGateways", "Virtual Network Gateway"},
	{"Azure", "Microsoft.Network/virtualNetworks", "Virtual Network"},
	{"Azure", "Microsoft.Network/virtualRouters", "Virtual Router"},
	{"Azure", "Microsoft.Network/virtualWans", "Virtual WAN"},
	{"Azure", "Microsoft.Network/vpnGateways", "VPN Gateway"},
	{"Azure", "Microsoft.Network/vpnSites", "VPN Site"},
	{"Azure", "Microsoft.Storage/storageAccounts", "Storage Account"},
	{"Azure", "Microsoft.Storage/storageAccounts/blobServices", "Storage Account Blob"},
	{"Azure", "Microsoft.Storage/storageAccounts/fileServices", "Storage Account Files"},
	{"Azure", "Microsoft.Storage/storageAccounts/queueServices", "Storage Account Queue"},
	{"Azure", "Microsoft.Storage/storageAccounts/tableServices", "Storage Account Table"},
	{"Azure", "Microsoft.TimeSeriesInsights/environments", "Time Series Insight Environment"},
	{"Azure", "Microsoft.VirtualMachineImages/imageTemplates", "Image Templates"},
	{"Azure", "Microsoft.VisualStudio/account", "Account"},
	{"Azure", "Microsoft.VisualStudio/account/extension", "Account Extension"},
	{"Azure", "Microsoft.VisualStudio/account/project", "Project"},
	{"Azure", "Microsoft.VSOnline/accounts", "Account"},
	{"Azure", "Microsoft.VSOnline/plans", "Plan"},
	{"Azure", "Microsoft.Web/connectionGateways", "Connection Gateway"},
	{"Azure", "Microsoft.Web/containerApps", "Container App"},
	{"Azure", "Microsoft.Web/customApis", "Custom API"},
	{"Azure", "Microsoft.Web/functionAppStacks", "Function App Stack"},
	{"Azure", "Microsoft.Web/georegions", "Geo Regions"},
	{"Azure", "Microsoft.Web/runtimes", "Web Runtime"},
	{"Azure", "Microsoft.Web/serverFarms", "Server Farms"},
	{"Azure", "Microsoft.Web/sites", "Site"},
	{"Azure", "Microsoft.Web/sites/networkConfig", "Sites Network Config"},
	{"Azure", "Microsoft.Web/sites/slots", "Sites Slot"},
	{"Azure", "Microsoft.Web/staticSites", "Static Site"},
	{"Azure", "Microsoft.Web/webAppStacks", "Web App Stack"},
	{"Azure", "Microsoft.Web/workerApps", "Worker App"},
	{"Azure", "Microsoft.WorkloadMonitor/monitors", "Monitor"},
}

var serviceNameConvertMap = []ServiceName{
	{"AWS", "aws::account::", "Account Management"},
	{"AWS", "aws::amplify::", "Amplify"},
	{"AWS", "aws::amplifybackend::", "Amplify Admin"},
	{"AWS", "aws::amplifyuibuilder::", "Amplify UI Builder"},
	{"AWS", "aws::kafka::", "Apache Kafka APIs for MSK clusters"},
	{"AWS", "aws::execute-api::", "API Gateway"},
	{"AWS", "aws::apigateway::", "API Gateway Management"},
	{"AWS", "aws::appmesh::", "App Mesh"},
	{"AWS", "aws::appmesh-preview::", "App Mesh Preview"},
	{"AWS", "aws::apprunner::", "App Runner"},
	{"AWS", "aws::appconfig::", "AppConfig"},
	{"AWS", "aws::appflow::", "AppFlow"},
	{"AWS", "aws::app-integrations::", "AppIntegrations"},
	{"AWS", "aws::mgn::", "Application Migration Service"},
	{"AWS", "aws::appstream::", "AppStream 2.0"},
	{"AWS", "aws::appsync::", "AppSync"},
	{"AWS", "aws::artifact::", "Artifact"},
	{"AWS", "aws::athena::", "Athena"},
	{"AWS", "aws::auditmanager::", "Audit Manager"},
	{"AWS", "aws::backup::", "Backup"},
	{"AWS", "aws::backup-gateway::", "Backup Gateway"},
	{"AWS", "aws::batch::", "Batch"},
	{"AWS", "aws::billingconductor::", "Billing Conductor"},
	{"AWS", "aws::braket::", "Braket"},
	{"AWS", "aws::budgets::", "Budget Service"},
	{"AWS", "aws::bugbust::", "BugBust"},
	{"AWS", "aws::acm::", "Certificate Manager"},
	{"AWS", "aws::acm-pca::", "Private Certificate Authority"},
	{"AWS", "aws::chatbot::", "Chatbot"},
	{"AWS", "aws::chime::", "Chime"},
	{"AWS", "aws::clouddirectory::", "Cloud Directory"},
	{"AWS", "aws::servicediscovery::", "Cloud Map"},
	{"AWS", "aws::cloud9::", "Cloud9"},
	{"AWS", "aws::cloudformation::", "CloudFormation"},
	{"AWS", "aws::cloudfront::", "CloudFront"},
	{"AWS", "aws::cloudhsm::", "CloudHSM"},
	{"AWS", "aws::cloudsearch::", "CloudSearch"},
	{"AWS", "aws::cloudshell::", "CloudShell"},
	{"AWS", "aws::cloudtrail::", "CloudTrail"},
	{"AWS", "aws::cloudwatch::", "CloudWatch"},
	{"AWS", "aws::evidently::", "CloudWatch Evidently"},
	{"AWS", "aws::logs::", "CloudWatch Logs"},
	{"AWS", "aws::rum::", "CloudWatch RUM"},
	{"AWS", "aws::synthetics::", "CloudWatch Synthetics"},
	{"AWS", "aws::codeartifact::", "CodeArtifact"},
	{"AWS", "aws::codebuild::", "CodeBuild"},
	{"AWS", "aws::codecommit::", "CodeCommit"},
	{"AWS", "aws::codedeploy::", "CodeDeploy"},
	{"AWS", "aws::codeguru-profiler::", "CodeGuru Profiler"},
	{"AWS", "aws::codeguru-reviewer::", "CodeGuru Reviewer"},
	{"AWS", "aws::codepipeline::", "CodePipeline"},
	{"AWS", "aws::codestar::", "CodeStar"},
	{"AWS", "aws::codestar-connections::", "CodeStar Connections"},
	{"AWS", "aws::codestar-notifications::", "CodeStar Notifications"},
	{"AWS", "aws::cognito-identity::", "Cognito Identity"},
	{"AWS", "aws::cognito-sync::", "Cognito Sync"},
	{"AWS", "aws::cognito-idp::", "Cognito User Pools"},
	{"AWS", "aws::comprehend::", "Comprehend"},
	{"AWS", "aws::config::", "Config"},
	{"AWS", "aws::connect::", "Connect"},
	{"AWS", "aws::profile::", "Connect Customer Profiles"},
	{"AWS", "aws::voiceid::", "Connect Voice ID"},
	{"AWS", "aws::wisdom::", "Connect Wisdom"},
	{"AWS", "aws::awsconnector::", "Connector Service"},
	{"AWS", "aws::controltower::", "Control Tower"},
	{"AWS", "aws::cur::", "Cost and Usage Report"},
	{"AWS", "aws::ce::", "Cost Explorer Service"},
	{"AWS", "aws::dataexchange::", "Data Exchange"},
	{"AWS", "aws::dlm::", "Data Lifecycle Manager"},
	{"AWS", "aws::datapipeline::", "Data Pipeline"},
	{"AWS", "aws::dms::", "Database Migration Service"},
	{"AWS", "aws::dbqms::", "Database Query Metadata Service"},
	{"AWS", "aws::datasync::", "DataSync"},
	{"AWS", "aws::deepcomposer::", "DeepComposer"},
	{"AWS", "aws::deeplens::", "DeepLens"},
	{"AWS", "aws::deepracer::", "DeepRacer"},
	{"AWS", "aws::detective::", "Detective"},
	{"AWS", "aws::devicefarm::", "Device Farm"},
	{"AWS", "aws::devops-guru::", "DevOps Guru"},
	{"AWS", "aws::directconnect::", "Direct Connect"},
	{"AWS", "aws::ds::", "Directory Service"},
	{"AWS", "aws::dynamodb::", "DynamoDB"},
	{"AWS", "aws::dax::", "DynamoDB Accelerator (DAX)"},
	{"AWS", "aws::ec2::", "EC2"},
	{"AWS", "aws::autoscaling::", "EC2 Auto Scaling"},
	{"AWS", "aws::imagebuilder::", "EC2 Image Builder"},
	{"AWS", "aws::elasticbeanstalk::", "Elastic Beanstalk"},
	{"AWS", "aws::ecr::", "Elastic Container Registry (ECR)"},
	{"AWS", "aws::ecr-public::", "Elastic Container Registry Public"},
	{"AWS", "aws::ecs::", "Elastic Container Service"},
	{"AWS", "aws::drs::", "Elastic Disaster Recovery"},
	{"AWS", "aws::efs::", "Elastic File System"},
	{"AWS", "aws::elastic-inference::", "Elastic Inference"},
	{"AWS", "aws::eks::", "Elastic Kubernetes Service"},
	{"AWS", "aws::elasticloadbalancing::", "Elastic Load Balancing"},
	{"AWS", "aws::elasticmapreduce::", "Elastic MapReduce"},
	{"AWS", "aws::elastictranscoder::", "Elastic Transcoder"},
	{"AWS", "aws::elasticache::", "ElastiCache"},
	{"AWS", "aws::elemental-appliances-software::", "Elemental Appliances and Software"},
	{"AWS", "aws::elemental-activations::", "Elemental Appliances and Software Activation Service"},
	{"AWS", "aws::mediaconnect::", "Elemental MediaConnect"},
	{"AWS", "aws::mediaconvert::", "Elemental MediaConvert"},
	{"AWS", "aws::medialive::", "Elemental MediaLive"},
	{"AWS", "aws::mediapackage::", "Elemental MediaPackage"},
	{"AWS", "aws::mediapackage-vod::", "Elemental MediaPackage VOD"},
	{"AWS", "aws::mediastore::", "Elemental MediaStore"},
	{"AWS", "aws::mediatailor::", "Elemental MediaTailor"},
	{"AWS", "aws::emr-containers::", "EMR on EKS (EMR Containers)"},
	{"AWS", "aws::emr-serverless::", "EMR Serverless"},
	{"AWS", "aws::events::", "EventBridge"},
	{"AWS", "aws::schemas::", "EventBridge Schemas"},
	{"AWS", "aws::fis::", "Fault Injection Simulator"},
	{"AWS", "aws::finspace::", "FinSpace"},
	{"AWS", "aws::fms::", "Firewall Manager"},
	{"AWS", "aws::forecast::", "Forecast"},
	{"AWS", "aws::frauddetector::", "Fraud Detector"},
	{"AWS", "aws::freertos::", "FreeRTOS"},
	{"AWS", "aws::fsx::", "FSx"},
	{"AWS", "aws::gamelift::", "GameLift"},
	{"AWS", "aws::gamesparks::", "GameSparks"},
	{"AWS", "aws::globalaccelerator::", "Global Accelerator"},
	{"AWS", "aws::glue::", "Glue"},
	{"AWS", "aws::databrew::", "Glue DataBrew"},
	{"AWS", "aws::groundstation::", "Ground Station"},
	{"AWS", "aws::guardduty::", "GuardDuty"},
	{"AWS", "aws::health::", "Health APIs and Notifications"},
	{"AWS", "aws::healthlake::", "HealthLake"},
	{"AWS", "aws::connect-campaigns::", "High-volume outbound communications"},
	{"AWS", "aws::honeycode::", "Honeycode"},
	{"AWS", "aws::access-analyzer::", "IAM Access Analyzer"},
	{"AWS", "aws::iam::", "Identity And Access Management (IAM)"},
	{"AWS", "aws::rolesanywhere::", "IAM Roles Anywhere"},
	{"AWS", "aws::identitystore::", "Identity Store"},
	{"AWS", "aws::identity-sync::", "Identity Synchronization Service"},
	{"AWS", "aws::importexport::", "Import Export Disk Service"},
	{"AWS", "aws::inspector::", "Inspector"},
	{"AWS", "aws::inspector2::", "Inspector2"},
	{"AWS", "aws::ivs::", "Interactive Video Service"},
	{"AWS", "aws::ivschat::", "Interactive Video Service Chat"},
	{"AWS", "aws::iot::", "IoT"},
	{"AWS", "aws::iot1click::", "IoT 1-Click"},
	{"AWS", "aws::iotanalytics::", "IoT Analytics"},
	{"AWS", "aws::iotdeviceadvisor::", "IoT Core Device Advisor"},
	{"AWS", "aws::iotwireless::", "IoT Core for LoRaWAN"},
	{"AWS", "aws::iot-device-tester::", "IoT Device Tester"},
	{"AWS", "aws::iotevents::", "IoT Events"},
	{"AWS", "aws::iotfleethub::", "IoT Fleet Hub for Device Management"},
	{"AWS", "aws::iotfleetwise::", "IoT FleetWise"},
	{"AWS", "aws::greengrass::", "IoT Greengrass"},
	{"AWS", "aws::iotjobsdata::", "IoT Jobs DataPlane"},
	{"AWS", "aws::iotroborunner::", "IoT RoboRunner"},
	{"AWS", "aws::iotsitewise::", "IoT SiteWise"},
	{"AWS", "aws::iotthingsgraph::", "IoT Things Graph"},
	{"AWS", "aws::iottwinmaker::", "IoT TwinMaker"},
	{"AWS", "aws::iq::", "IQ"},
	{"AWS", "aws::iq-permission::", "IQ Permissions"},
	{"AWS", "aws::kendra::", "Kendra"},
	{"AWS", "aws::kms::", "Key Management Service"},
	{"AWS", "aws::cassandra::", "Keyspaces (for Apache Cassandra)"},
	{"AWS", "aws::kinesis::", "Kinesis"},
	{"AWS", "aws::kinesisanalytics::", "Kinesis Analytics"},
	{"AWS", "aws::firehose::", "Kinesis Firehose"},
	{"AWS", "aws::kinesisvideo::", "Kinesis Video Streams"},
	{"AWS", "aws::lakeformation::", "Lake Formation"},
	{"AWS", "aws::lambda::", "Lambda"},
	{"AWS", "aws::launchwizard::", "Launch Wizard"},
	{"AWS", "aws::lex::", "Lex"},
	{"AWS", "aws::license-manager::", "License Manager"},
	{"AWS", "aws::lightsail::", "Lightsail"},
	{"AWS", "aws::geo::", "Location"},
	{"AWS", "aws::lookoutequipment::", "Lookout for Equipment"},
	{"AWS", "aws::lookoutmetrics::", "Lookout for Metrics"},
	{"AWS", "aws::lookoutvision::", "Lookout for Vision"},
	{"AWS", "aws::machinelearning::", "Machine Learning"},
	{"AWS", "aws::macie2::", "Macie"},
	{"AWS", "aws::m2::", "Mainframe Modernization Service"},
	{"AWS", "aws::managedblockchain::", "Managed Blockchain"},
	{"AWS", "aws::grafana::", "Managed Grafana"},
	{"AWS", "aws::aps::", "Managed Service for Prometheus"},
	{"AWS", "aws::kafka::", "Managed Streaming for Apache Kafka"},
	{"AWS", "aws::kafkaconnect::", "Managed Streaming for Kafka Connect"},
	{"AWS", "aws::airflow::", "Managed Workflows for Apache Airflow"},
	{"AWS", "aws::aws-marketplace::", "Marketplace"},
	{"AWS", "aws::marketplacecommerceanalytics::", "Marketplace Commerce Analytics Service"},
	{"AWS", "aws::aws-marketplace-management::", "Marketplace Management"},
	{"AWS", "aws::mechanicalturk::", "Mechanical Turk"},
	{"AWS", "aws::memorydb::", "MemoryDB"},
	{"AWS", "aws::ec2messages::", "Message Delivery Service"},
	{"AWS", "aws::serviceextract::", "Microservice Extractor for .NET"},
	{"AWS", "aws::mgh::", "Migration Hub"},
	{"AWS", "aws::migrationhub-orchestrator::", "Migration Hub Orchestrator"},
	{"AWS", "aws::refactor-spaces::", "Migration Hub Refactor Spaces"},
	{"AWS", "aws::migrationhub-strategy::", "Migration Hub Strategy Recommendations"},
	{"AWS", "aws::mobileanalytics::", "Mobile Analytics"},
	{"AWS", "aws::mobilehub::", "Mobile Hub"},
	{"AWS", "aws::monitron::", "Monitron"},
	{"AWS", "aws::mq::", "MQ"},
	{"AWS", "aws::neptune-db::", "Neptune"},
	{"AWS", "aws::network-firewall::", "Network Firewall"},
	{"AWS", "aws::networkmanager::", "Network Manager"},
	{"AWS", "aws::nimble::", "Nimble Studio"},
	{"AWS", "aws::es::", "OpenSearch Service"},
	{"AWS", "aws::opsworks::", "OpsWorks"},
	{"AWS", "aws::opsworks-cm)::", "OpsWorks Configuration Management"},
	{"AWS", "aws::organizations::", "Organizations"},
	{"AWS", "aws::outposts::", "Outposts"},
	{"AWS", "aws::panorama::", "Panorama"},
	{"AWS", "aws::pi::", "Performance Insights"},
	{"AWS", "aws::personalize::", "Personalize"},
	{"AWS", "aws::mobiletargeting::", "Pinpoint"},
	{"AWS", "aws::sms-voice::", "Pinpoint SMS and Voice Service"},
	{"AWS", "aws::polly::", "Polly"},
	{"AWS", "aws::proton::", "Proton"},
	{"AWS", "aws::qldb::", "QLDB"},
	{"AWS", "aws::quicksight::", "QuickSight"},
	{"AWS", "aws::rds::", "RDS"},
	{"AWS", "aws::rds-db::", "RDS IAM Authentication"},
	{"AWS", "aws::rbin::", "Recycle Bin"},
	{"AWS", "aws::redshift::", "Redshift"},
	{"AWS", "aws::redshift-serverless::", "Redshift Serverless"},
	{"AWS", "aws::rekognition::", "Rekognition"},
	{"AWS", "aws::resiliencehub::", "Resilience Hub Service"},
	{"AWS", "aws::ram::", "Resource Access Manager"},
	{"AWS", "aws::resource-groups::", "Resource Groups"},
	{"AWS", "aws::rhelkb::", "RHEL Knowledgebase Portal"},
	{"AWS", "aws::robomaker::", "RoboMaker"},
	{"AWS", "aws::route53::", "Route 53"},
	{"AWS", "aws::route53domains::", "Route 53 Domains"},
	{"AWS", "aws::route53-recovery-cluster::", "Route 53 Recovery Cluster"},
	{"AWS", "aws::route53-recovery-control-config::", "Route 53 Recovery Controls"},
	{"AWS", "aws::route53-recovery-readiness::", "Route 53 Recovery Readiness"},
	{"AWS", "aws::route53resolver::", "Route 53 Resolver"},
	{"AWS", "aws::s3::", "S3"},
	{"AWS", "aws::glacier::", "S3 Glacier"},
	{"AWS", "aws::s3-object-lambda::", "S3 Object Lambda"},
	{"AWS", "aws::s3-outposts::", "S3 on Outposts"},
	{"AWS", "aws::sagemaker::", "SageMaker"},
	{"AWS", "aws::sagemaker-groundtruth-synthetic::", "SageMaker Ground Truth Synthetic"},
	{"AWS", "aws::savingsplans::", "Savings Plans"},
	{"AWS", "aws::secretsmanager::", "Secrets Manager"},
	{"AWS", "aws::securityhub::", "Security Hub"},
	{"AWS", "aws::sts::", "Security Token Service"},
	{"AWS", "aws::sms::", "Server Migration Service"},
	{"AWS", "aws::serverlessrepo::", "Serverless Application Repository"},
	{"AWS", "aws::servicecatalog::", "Service Catalog"},
	{"AWS", "aws::servicequotas::", "Service Quotas"},
	{"AWS", "aws::ssmmessages::", "Session Manager Message Gateway Service"},
	{"AWS", "aws::shield::", "Shield"},
	{"AWS", "aws::signer::", "Signer"},
	{"AWS", "aws::ses::", "Simple Email Service (SES)"},
	{"AWS", "aws::sns::", "Simple Notification Service (SNS)"},
	{"AWS", "aws::swf::", "Simple Workflow Service"},
	{"AWS", "aws::sdb::", "SimpleDB"},
	{"AWS", "aws::snow-device-management::", "Snow Device Management"},
	{"AWS", "aws::snowball::", "Snowball"},
	{"AWS", "aws::sqlworkbench::", "SQL Workbench"},
	{"AWS", "aws::sqs::", "SQS"},
	{"AWS", "aws::sso::", "SSO"},
	{"AWS", "aws::sso-directory::", "SSO Directory"},
	{"AWS", "aws::states::", "Step Functions"},
	{"AWS", "aws::storagegateway::", "Storage Gateway"},
	{"AWS", "aws::sumerian::", "Sumerian"},
	{"AWS", "aws::support::", "Support"},
	{"AWS", "aws::sustainability::", "Sustainability"},
	{"AWS", "aws::ssm::", "Systems Manager (SSM)"},
	{"AWS", "aws::ssm-guiconnect::", "Systems Manager GUI Connect"},
	{"AWS", "aws::ssm-incidents::", "Systems Manager Incident Manager"},
	{"AWS", "aws::ssm-contacts::", "Systems Manager Incident Manager Contacts"},
	{"AWS", "aws::resource-explorer)::", "Tag Editor"},
	{"AWS", "aws::tax::", "Tax Settings"},
	{"AWS", "aws::textract::", "Textract"},
	{"AWS", "aws::timestream::", "Timestream"},
	{"AWS", "aws::transcribe::", "Transcribe"},
	{"AWS", "aws::transfer::", "Transfer Family"},
	{"AWS", "aws::trustedadvisor::", "Trusted Advisor"},
	{"AWS", "aws::waf::", "WAF"},
	{"AWS", "aws::waf-regional::", "WAF Regional"},
	{"AWS", "aws::wafv2::", "WAF V2"},
	{"AWS", "aws::wellarchitected::", "Well-Architected Tool"},
	{"AWS", "aws::workdocs::", "WorkDocs"},
	{"AWS", "aws::worklink::", "WorkLink"},
	{"AWS", "aws::workmail::", "WorkMail"},
	{"AWS", "aws::workmailmessageflow::", "WorkMail Message Flow"},
	{"AWS", "aws::workspaces::", "WorkSpaces"},
	{"AWS", "aws::workspaces-web::", "WorkSpaces Web"},
	{"AWS", "aws::xray::", "X-Ray"},

	{"Azure", "Microsoft.AAD", "ActiveÂ DirectoryÂ DomainÂ Services"},
	{"Azure", "Microsoft.App", "App"},
	{"Azure", "Microsoft.ADHybridHealthService", "AD Hybrid HealthService"},
	{"Azure", "Microsoft.Advisor", "Advisor"},
	{"Azure", "Microsoft.AlertsManagement", "Alerts Management"},
	{"Azure", "Microsoft.AnalysisServices", "AnalysisÂ Services"},
	{"Azure", "Microsoft.ApiManagement", "APIÂ Management"},
	{"Azure", "Microsoft.AppConfiguration", "App Configuration"},
	{"Azure", "Microsoft.AppPlatform", "AppPlatform"},
	{"Azure", "Microsoft.Attestation", "Attestation Service"},
	{"Azure", "Microsoft.Authorization", "Resource Manager"},
	{"Azure", "Microsoft.Automation", "Automation"},
	{"Azure", "Microsoft.AutonomousSystems", "Autonomous Systems"},
	{"Azure", "Microsoft.AVS", "VMware Solution"},
	{"Azure", "Microsoft.AzureActiveDirectory", "ActiveÂ DirectoryÂ B2C"},
	{"Azure", "Microsoft.AzureArcData", "Arc-enabled data services"},
	{"Azure", "Microsoft.AzureData", "SQL Server registry"},
	{"Azure", "Microsoft.AzureStack", "Azure Stack"},
	{"Azure", "Microsoft.AzureStackHCI", "AzureStack HCI"},
	{"Azure", "Microsoft.Batch", "Batch"},
	{"Azure", "Microsoft.Billing", "Billing"},
	{"Azure", "Microsoft.BingMaps", "Bing Maps"},
	{"Azure", "Microsoft.Blockchain", "Blockchain"},
	{"Azure", "Microsoft.BlockchainTokens", "Blockchain Tokens"},
	{"Azure", "Microsoft.Blueprint", "Blueprint"},
	{"Azure", "Microsoft.BotService", "Bot Service"},
	{"Azure", "Microsoft.Cache", "Cache"},
	{"Azure", "Microsoft.Capacity", "Capacity"},
	{"Azure", "Microsoft.Cdn", "ContentÂ DeliveryÂ Network"},
	{"Azure", "Microsoft.CertificateRegistration", "CertificateRegistration"},
	{"Azure", "Microsoft.ChangeAnalysis", "Change Analysis"},
	{"Azure", "Microsoft.ClassicCompute", "Classic VM"},
	{"Azure", "Microsoft.ClassicInfrastructureMigrate", "Classic deployment model migration"},
	{"Azure", "Microsoft.ClassicNetwork", "Classic Network"},
	{"Azure", "Microsoft.ClassicStorage", "Classic Storage"},
	{"Azure", "Microsoft.ClassicSubscription", "Classic Subscription"},
	{"Azure", "Microsoft.CognitiveServices", "Cognitive Services"},
	{"Azure", "Microsoft.Compute", "Compute"},
	{"Azure", "Microsoft.Consumption", "Consumption"},
	{"Azure", "Microsoft.ContainerInstance", "ContainerÂ Instances"},
	{"Azure", "Microsoft.ContainerRegistry", "ContainerÂ Registry"},
	{"Azure", "Microsoft.ContainerService", "ContainerService"},
	{"Azure", "Microsoft.CostManagement", "CostÂ Management"},
	{"Azure", "Microsoft.CostManagementExports", "Cost Management Exports"},
	{"Azure", "Microsoft.CustomerLockbox", "Customer Lockbox for Microsoft Azure"},
	{"Azure", "Microsoft.CustomProviders", "Custom Providers"},
	{"Azure", "Microsoft.DataBox", "DataÂ Box"},
	{"Azure", "Microsoft.DataBoxEdge", "DataBoxEdge"},
	{"Azure", "Microsoft.Databricks", "Databricks"},
	{"Azure", "Microsoft.DataCatalog", "DataÂ Catalog"},
	{"Azure", "Microsoft.DataFactory", "DataÂ Factory"},
	{"Azure", "Microsoft.DataLakeAnalytics", "DataÂ LakeÂ Analytics"},
	{"Azure", "Microsoft.DataLakeStore", "Data Lake Storage Gen2"},
	{"Azure", "Microsoft.DataMigration", "DatabaseÂ MigrationÂ Service"},
	{"Azure", "Microsoft.DataProtection", "Data Protection"},
	{"Azure", "Microsoft.DataShare", "Data Share"},
	{"Azure", "Microsoft.DBforMariaDB", "DatabaseÂ forÂ MariaDB"},
	{"Azure", "Microsoft.DBforMySQL", "DatabaseÂ forÂ MySQL"},
	{"Azure", "Microsoft.DBforPostgreSQL", "DatabaseÂ forÂ PostgreSQL"},
	{"Azure", "Microsoft.DesktopVirtualization", "DesktopVirtualization"},
	{"Azure", "Microsoft.Devices", "Devices"},
	{"Azure", "Microsoft.DeviceUpdate", "DeviceUpdate"},
	{"Azure", "Microsoft.DevOps", "DevOps"},
	{"Azure", "Microsoft.DevSpaces", "DevSpaces"},
	{"Azure", "Microsoft.DevTestLab", "DevTestLab"},
	{"Azure", "Microsoft.DigitalTwins", "DigitalTwins"},
	{"Azure", "Microsoft.DocumentDB", "DocumentDB"},
	{"Azure", "Microsoft.DomainRegistration", "Domain Registration"},
	{"Azure", "Microsoft.DynamicsLcs", "DynamicsLcs"},
	{"Azure", "Microsoft.EnterpriseKnowledgeGraph", "Enterprise Knowledge Graph"},
	{"Azure", "Microsoft.EventGrid", "EventGrid"},
	{"Azure", "Microsoft.EventHub", "EventHub"},
	{"Azure", "Microsoft.Features", "Features"},
	{"Azure", "Microsoft.GuestConfiguration", "Guest Configuration"},
	{"Azure", "Microsoft.HanaOnAzure", "Hana On Azure"},
	{"Azure", "Microsoft.HardwareSecurityModules", "HardwareSecurityModules"},
	{"Azure", "Microsoft.HDInsight", "HDInsight"},
	{"Azure", "Microsoft.HealthcareApis (API for FHIR)", "API for FHIR"},
	{"Azure", "Microsoft.HealthcareApis (Healthcare APIs)", "Healthcare APIs"},
	{"Azure", "Microsoft.HybridCompute", "HybridCompute"},
	{"Azure", "Microsoft.HybridData", "Hybrid Data"},
	{"Azure", "Microsoft.HybridNetwork", "Hybrid Network"},
	{"Azure", "Microsoft.ImportExport", "Import/Export"},
	{"Azure", "Microsoft.Insights", "Monitor"},
	{"Azure", "Microsoft.IoTCentral", "IoTÂ Central"},
	{"Azure", "Microsoft.IoTSpaces", "IoT Spaces"},
	{"Azure", "Microsoft.Intune", "Intune"},
	{"Azure", "Microsoft.KeyVault", "KeyVault"},
	{"Azure", "Microsoft.Kubernetes", "Kubernetes"},
	{"Azure", "Microsoft.KubernetesConfiguration", "Kubernetes Configuration"},
	{"Azure", "Microsoft.Kusto", "Kusto"},
	{"Azure", "Microsoft.LabServices", "LabServices"},
	{"Azure", "Microsoft.Logic", "Logic"},
	{"Azure", "Microsoft.MachineLearning", "MachineÂ LearningÂ Studio"},
	{"Azure", "Microsoft.MachineLearningServices", "Machine Learning"},
	{"Azure", "Microsoft.Maintenance", "Maintenance"},
	{"Azure", "Microsoft.ManagedIdentity", "Managed identities for resources"},
	{"Azure", "Microsoft.ManagedNetwork", "ManagedNetwork"},
	{"Azure", "Microsoft.ManagedServices", "Lighthouse"},
	{"Azure", "Microsoft.Management", "Management Groups"},
	{"Azure", "Microsoft.Maps", "Maps"},
	{"Azure", "Microsoft.Marketplace", "Marketplace"},
	{"Azure", "Microsoft.MarketplaceApps", "Marketplace Apps"},
	{"Azure", "Microsoft.MarketplaceOrdering", "Marketplace Ordering"},
	{"Azure", "Microsoft.Media", "Media Services"},
	{"Azure", "Microsoft.Microservices4Spring", "Microservices4Spring"},
	{"Azure", "Microsoft.Migrate", "Migrate"},
	{"Azure", "Microsoft.MixedReality", "MixedReality"},
	{"Azure", "Microsoft.NetApp", "NetApp"},
	{"Azure", "Microsoft.Network", "Network"},
	{"Azure", "Microsoft.Notebooks", "Notebooks"},
	{"Azure", "Microsoft.NotificationHubs", "NotificationHubs"},
	{"Azure", "Microsoft.ObjectStore", "ObjectStore"},
	{"Azure", "Microsoft.OffAzure", "OffAzure"},
	{"Azure", "Microsoft.OperationalInsights", "OperationalInsights"},
	{"Azure", "Microsoft.OperationsManagement", "OperationsManagement"},
	{"Azure", "Microsoft.Peering", "Peering"},
	{"Azure", "Microsoft.PolicyInsights", "Policy Insights"},
	{"Azure", "Microsoft.Portal", "Portal"},
	{"Azure", "Microsoft.PowerBI", "PowerBI"},
	{"Azure", "Microsoft.PowerBIDedicated", "PowerBI Dedicated"},
	{"Azure", "Microsoft.PowerPlatform", "Power Platform"},
	{"Azure", "Microsoft.ProjectBabylon", "Project Babylon"},
	{"Azure", "Microsoft.Quantum", "Quantum"},
	{"Azure", "Microsoft.RecoveryServices", "Recovery Services"},
	{"Azure", "Microsoft.RedHatOpenShift", "RedHat OpenShift"},
	{"Azure", "Microsoft.Relay", "Relay"},
	{"Azure", "Microsoft.ResourceGraph", "Resource Graph"},
	{"Azure", "Microsoft.ResourceHealth", "Resource Health"},
	{"Azure", "Microsoft.Resources", "Resources"},
	{"Azure", "Microsoft.SaaS", "SaaS"},
	{"Azure", "Microsoft.Scheduler", "Scheduler"},
	{"Azure", "Microsoft.Search", "Search"},
	{"Azure", "Microsoft.Security", "Security"},
	{"Azure", "Microsoft.SecurityInsights", "Security Insights"},
	{"Azure", "Microsoft.SerialConsole", "SerialConsole"},
	{"Azure", "Microsoft.ServiceBus", "ServiceBus"},
	{"Azure", "Microsoft.ServiceFabric", "ServiceFabric"},
	{"Azure", "Microsoft.Services", "Services"},
	{"Azure", "Microsoft.SignalRService", "SignalR Service"},
	{"Azure", "Microsoft.SoftwarePlan", "SoftwarePlan"},
	{"Azure", "Microsoft.Solutions", "Solutions"},
	{"Azure", "Microsoft.Sql", "SQL Service"},
	{"Azure", "Microsoft.SqlVirtualMachine", "SQL Server on Virtual Machines"},
	{"Azure", "Microsoft.Storage", "Storage"},
	{"Azure", "Microsoft.StorageCache", "StorageCache"},
	{"Azure", "Microsoft.StorageSync", "StorageSync"},
	{"Azure", "Microsoft.StorSimple", "StorSimple"},
	{"Azure", "Microsoft.StreamAnalytics", "Stream Analytics"},
	{"Azure", "Microsoft.Subscription", "Subscription"},
	{"Azure", "microsoft.support", "support"},
	{"Azure", "Microsoft.Synapse", "Synapse Analytics"},
	{"Azure", "Microsoft.TimeSeriesInsights", "Time Series Insights"},
	{"Azure", "Microsoft.Token", "Token"},
	{"Azure", "Microsoft.VMware", "VMware"},
	{"Azure", "Microsoft.VMwareCloudSimple", "VMwareCloudSimple"},
	{"Azure", "Microsoft.VirtualMachineImages", "Virtual Machine Images"},
	{"Azure", "microsoft.visualstudio", "Visual Studio (DevOps)"},
	{"Azure", "Microsoft.VSOnline", "Visual Studio Online (DevOps)"},
	{"Azure", "Microsoft.Web", "Web"},
	{"Azure", "Microsoft.WindowsESU", "Windows Extended Security Updates"},
	{"Azure", "Microsoft.WindowsIoT", "Windows IoT"},
	{"Azure", "Microsoft.WorkloadMonitor", "Workload Monitor"},
}

var mapping = []ResourceType{
	{"AWS", "AWS::AccessAnalyzer::Analyzer", "AccessAnalyzer Analyzer", "Security", false},
	{"AWS", "AWS::ACMPCA::Certificate", "Private Certificate Authority Certificate", "Security", true},
	{"AWS", "AWS::ACMPCA::CertificateAuthority", "Private Certificate Authority CertificateAuthority", "Security", false},
	{"AWS", "AWS::ACMPCA::CertificateAuthorityActivation", "Private Certificate Authority CertificateAuthorityActivation", "Security", false},
	{"AWS", "AWS::ACMPCA::Permission", "Private Certificate Authority Permission", "Security", false},
	{"AWS", "aws::airflow::", "Managed Workflow for Airflow", "Workflow", true},
	{"AWS", "AWS::AmazonMQ::Broker", "AmazonMQ Broker", "Messaging", true},
	{"AWS", "AWS::AmazonMQ::Configuration", "AmazonMQ Configuration", "Messaging", false},
	{"AWS", "AWS::AmazonMQ::ConfigurationAssociation", "AmazonMQ ConfigurationAssociation", "Messaging", false},
	{"AWS", "AWS::Amplify::App", "Amplify App", "DevOps", true},
	{"AWS", "AWS::Amplify::Branch", "Amplify Branch", "DevOps", false},
	{"AWS", "AWS::Amplify::Domain", "Amplify Domain", "DevOps", false},
	{"AWS", "AWS::AmplifyUIBuilder::Component", "AmplifyUIBuilder Component", "DevOps", false},
	{"AWS", "AWS::AmplifyUIBuilder::Theme", "AmplifyUIBuilder Theme", "DevOps", false},
	{"AWS", "AWS::ApiGateway::Account", "API Gateway Account", "Networking", true},
	{"AWS", "AWS::ApiGateway::ApiKey", "API Gateway ApiKey", "Networking", false},
	{"AWS", "AWS::ApiGateway::Authorizer", "API Gateway Authorizer", "Networking", false},
	{"AWS", "AWS::ApiGateway::BasePathMapping", "API Gateway BasePathMapping", "Networking", false},
	{"AWS", "AWS::ApiGateway::ClientCertificate", "API Gateway ClientCertificate", "Networking", false},
	{"AWS", "AWS::ApiGateway::Deployment", "API Gateway Deployment", "Networking", false},
	{"AWS", "AWS::ApiGateway::DocumentationPart", "API Gateway DocumentationPart", "Networking", false},
	{"AWS", "AWS::ApiGateway::DocumentationVersion", "API Gateway DocumentationVersion", "Networking", false},
	{"AWS", "AWS::ApiGateway::DomainName", "API Gateway DomainName", "Networking", false},
	{"AWS", "AWS::ApiGateway::GatewayResponse", "API Gateway GatewayResponse", "Networking", false},
	{"AWS", "AWS::ApiGateway::Method", "API Gateway Method", "Networking", false},
	{"AWS", "AWS::ApiGateway::Model", "API Gateway Model", "Networking", false},
	{"AWS", "AWS::ApiGateway::RequestValidator", "API Gateway RequestValidator", "Networking", false},
	{"AWS", "AWS::ApiGateway::Resource", "API Gateway Resource", "Networking", false},
	{"AWS", "AWS::ApiGateway::RestApi", "API Gateway RestApi", "Networking", false},
	{"AWS", "AWS::ApiGateway::Stage", "API Gateway Stage", "Networking", false},
	{"AWS", "AWS::ApiGateway::UsagePlan", "API Gateway UsagePlan", "Networking", false},
	{"AWS", "AWS::ApiGateway::UsagePlanKey", "API Gateway UsagePlanKey", "Networking", false},
	{"AWS", "AWS::ApiGateway::VpcLink", "API Gateway VpcLink", "Networking", false},
	{"AWS", "AWS::ApiGatewayV2::Api", "API Gateway V2 Api", "Networking", true},
	{"AWS", "AWS::ApiGatewayV2::ApiGatewayManagedOverrides", "API Gateway V2 ApiGatewayManagedOverrides", "Networking", false},
	{"AWS", "AWS::ApiGatewayV2::ApiMapping", "API Gateway V2 ApiMapping", "Networking", false},
	{"AWS", "AWS::ApiGatewayV2::Authorizer", "API Gateway V2 Authorizer", "Networking", false},
	{"AWS", "AWS::ApiGatewayV2::Deployment", "API Gateway V2 Deployment", "Networking", false},
	{"AWS", "AWS::ApiGatewayV2::DomainName", "API Gateway V2 DomainName", "Networking", false},
	{"AWS", "AWS::ApiGatewayV2::Integration", "API Gateway V2 Integration", "Networking", false},
	{"AWS", "AWS::ApiGatewayV2::IntegrationResponse", "API Gateway V2 IntegrationResponse", "Networking", false},
	{"AWS", "AWS::ApiGatewayV2::Model", "API Gateway V2 Model", "Networking", false},
	{"AWS", "AWS::ApiGatewayV2::Route", "API Gateway V2 Route", "Networking", false},
	{"AWS", "AWS::ApiGatewayV2::RouteResponse", "API Gateway V2 RouteResponse", "Networking", false},
	{"AWS", "AWS::ApiGatewayV2::Stage", "API Gateway V2 Stage", "Networking", false},
	{"AWS", "AWS::ApiGatewayV2::VpcLink", "API Gateway V2 VpcLink", "Networking", false},
	{"AWS", "AWS::AppConfig::Application", "AppConfig Application", "Governance", true},
	{"AWS", "AWS::AppConfig::ConfigurationProfile", "AppConfig ConfigurationProfile", "Governance", false},
	{"AWS", "AWS::AppConfig::Deployment", "AppConfig Deployment", "Governance", false},
	{"AWS", "AWS::AppConfig::DeploymentStrategy", "AppConfig DeploymentStrategy", "Governance", false},
	{"AWS", "AWS::AppConfig::Environment", "AppConfig Environment", "Governance", false},
	{"AWS", "AWS::AppConfig::HostedConfigurationVersion", "AppConfig HostedConfigurationVersion", "Governance", false},
	{"AWS", "AWS::AppFlow::ConnectorProfile", "AppFlow ConnectorProfile", "Cloud App", false},
	{"AWS", "AWS::AppFlow::Flow", "AppFlow Flow", "Cloud App", false},
	{"AWS", "AWS::AppIntegrations::EventIntegration", "AppIntegrations EventIntegration", "Cloud App", true},
	{"AWS", "AWS::ApplicationAutoScaling::ScalableTarget", "Application Auto Scaling ScalableTarget", "Cloud App", false},
	{"AWS", "AWS::ApplicationAutoScaling::ScalingPolicy", "Application Auto Scaling ScalingPolicy", "Cloud App", false},
	{"AWS", "AWS::ApplicationAutoScaling::Target", "Auto Scaling Group Trager", "Elastic Workload", false},
	{"AWS", "AWS::AppMesh::GatewayRoute", "App Mesh GatewayRoute", "Cloud App", false},
	{"AWS", "AWS::AppMesh::Mesh", "App Mesh Mesh", "Cloud App", true},
	{"AWS", "AWS::AppMesh::Route", "App Mesh Route", "Cloud App", false},
	{"AWS", "AWS::AppMesh::VirtualGateway", "App Mesh VirtualGateway", "Cloud App", false},
	{"AWS", "AWS::AppMesh::VirtualNode", "App Mesh VirtualNode", "Cloud App", false},
	{"AWS", "AWS::AppMesh::VirtualRouter", "App Mesh VirtualRouter", "Cloud App", false},
	{"AWS", "AWS::AppMesh::VirtualService", "App Mesh VirtualService", "Cloud App", false},
	{"AWS", "AWS::AppRunner::autoscalingconfiguration", "App Runner Autoscaling Configuration", "Cloud App", false},
	{"AWS", "AWS::AppRunner::Connection", "App Runner Connection", "Cloud App", false},
	{"AWS", "AWS::AppRunner::Service", "App Runner Service", "Cloud App", false},
	{"AWS", "AWS::AppSync::ApiCache", "AppSync ApiCache", "EUC", false},
	{"AWS", "AWS::AppSync::ApiKey", "AppSync ApiKey", "EUC", false},
	{"AWS", "AWS::AppSync::DataSource", "AppSync DataSource", "EUC", false},
	{"AWS", "AWS::AppSync::DomainName", "AppSync DomainName", "EUC", false},
	{"AWS", "AWS::AppSync::DomainNameApiAssociation", "AppSync DomainNameApiAssociation", "EUC", false},
	{"AWS", "AWS::AppSync::FunctionConfiguration", "AppSync FunctionConfiguration", "EUC", false},
	{"AWS", "AWS::AppSync::GraphQLApi", "AppSync GraphQLApi", "EUC", false},
	{"AWS", "AWS::AppSync::GraphQLSchema", "AppSync GraphQLSchema", "EUC", false},
	{"AWS", "AWS::AppSync::Resolver", "AppSync Resolver", "EUC", false},
	{"AWS", "AWS::APS::RuleGroupsNamespace", "Managed Prometheus RuleGroupsNamespace", "Monitoring", false},
	{"AWS", "AWS::APS::Workspace", "Managed Prometheus Workspace", "Monitoring", true},
	{"AWS", "AWS::AutoScaling::AutoScalingGroup", "Auto Scaling Group", "Elastic Workload", true},
	{"AWS", "AWS::AutoScaling::LaunchConfiguration", "Auto Scaling LaunchConfiguration", "Elastic Workload", false},
	{"AWS", "AWS::AutoScaling::LifecycleHook", "Auto Scaling LifecycleHook", "Elastic Workload", false},
	{"AWS", "AWS::AutoScaling::ScalingPolicy", "Auto Scaling ScalingPolicy", "Elastic Workload", false},
	{"AWS", "AWS::AutoScaling::ScheduledAction", "Auto Scaling ScheduledAction", "Elastic Workload", false},
	{"AWS", "AWS::AutoScaling::WarmPool", "Auto Scaling WarmPool", "Elastic Workload", false},
	{"AWS", "AWS::Backup::Plan", "AWS Backup Plan", "Resiliency", true},
	{"AWS", "AWS::Backup::ProtectedResource", "AWS Backup Protected Resources", "Resiliency", false},
	{"AWS", "AWS::Backup::RecoveryPoint", "AWS Backup Recovery Point", "Resiliency", false},
	{"AWS", "AWS::Backup::Selection", "AWS Backup Selection", "Resiliency", false},
	{"AWS", "AWS::Backup::Vault", "AWS Backup Vault", "Resiliency", true},
	{"AWS", "AWS::Cassandra::Keyspace", "Keyspaces (Cassandra) Keyspace", "Database", true},
	{"AWS", "AWS::Cassandra::Table", "Keyspaces (Cassandra) Table", "Database", true},
	{"AWS", "AWS::CertificateManager::Account", "Certificate Manager Account", "Security", false},
	{"AWS", "AWS::CertificateManager::Certificate", "Certificate", "Security", true},
	{"AWS", "AWS::CloudFront::Distribution", "CloudFront Distribution", "Networking", true},
	{"AWS", "AWS::CloudTrail::Trail", "AWS CloudTrail", "Security", true},
	{"AWS", "aws::cloudwatch::", "CloudWatch", "Monitoring", true},
	{"AWS", "AWS::CloudWatch::Alarm", "CloudWatch Alarm", "Monitoring", true},
	{"AWS", "AWS::CodeBuild::Project", "CodeBuild Project", "DevOps", true},
	{"AWS", "AWS::CodeBuild::SourceCredential", "CodeBuild Credential", "DevOps", false},
	{"AWS", "AWS::Config::ConfigurationRecorder", "Config Recorder", "Governance", true},
	{"AWS", "AWS::CostExplorer::ByAccountMonthly", "Cost Explorer", "Governance", false},
	{"AWS", "AWS::CostExplorer::ByServiceMonthly", "Cost Explorer", "Governance", false},
	{"AWS", "AWS::DAX::Cluster", "DAX Cluster", "Database", true},
	{"AWS", "AWS::DMS::ReplicationInstance", "DMS Replication", "Database", true},
	{"AWS", "aws::drs::", "Elastic Disaster Recovery", "Resiliency", true},
	{"AWS", "AWS::DynamoDb::Table", "DynamoDB Table", "Database", true},
	{"AWS", "AWS::EC2::CapacityReservation", "EC2 CapacityReservation", "Infrastructure", false},
	{"AWS", "AWS::EC2::CapacityReservationFleet", "EC2 CapacityReservationFleet", "Infrastructure", false},
	{"AWS", "AWS::EC2::CarrierGateway", "EC2 CarrierGateway", "Networking", false},
	{"AWS", "AWS::EC2::ClientVpnAuthorizationRule", "EC2 ClientVpnAuthorizationRule", "Networking", false},
	{"AWS", "AWS::EC2::ClientVpnEndpoint", "EC2 ClientVpnEndpoint", "Networking", false},
	{"AWS", "AWS::EC2::ClientVpnRoute", "EC2 ClientVpnRoute", "Networking", false},
	{"AWS", "AWS::EC2::ClientVpnTargetNetworkAssociation", "EC2 ClientVpnTargetNetworkAssociation", "Networking", false},
	{"AWS", "AWS::EC2::CustomerGateway", "EC2 CustomerGateway", "Networking", true},
	{"AWS", "AWS::EC2::DHCPOptions", "EC2 DHCPOptions", "Networking", true},
	{"AWS", "AWS::EC2::EC2Fleet", "EC2 Fleet", "Infrastructure", true},
	{"AWS", "AWS::EC2::EgressOnlyInternetGateway", "EC2 EgressOnlyInternetGateway", "Networking", true},
	{"AWS", "AWS::EC2::EIP", "EC2 EIP", "Networking", true},
	{"AWS", "AWS::EC2::EIPAssociation", "EC2 EIPAssociation", "Networking", false},
	{"AWS", "AWS::EC2::EnclaveCertificateIamRoleAssociation", "EC2 EnclaveCertificateIamRoleAssociation", "Networking", false},
	{"AWS", "AWS::EC2::FlowLog", "EC2 FlowLog", "Security", true},
	{"AWS", "AWS::EC2::GatewayRouteTableAssociation", "EC2 GatewayRouteTableAssociation", "Networking", false},
	{"AWS", "AWS::EC2::Host", "EC2 Host", "Infrastructure", true},
	{"AWS", "AWS::EC2::Instance", "EC2 Instance", "Infrastructure", true},
	{"AWS", "AWS::EC2::InternetGateway", "EC2 InternetGateway", "Networking", true},
	{"AWS", "AWS::EC2::IPAM", "EC2 IPAM", "Networking", true},
	{"AWS", "AWS::EC2::IPAMAllocation", "EC2 IPAMAllocation", "Networking", false},
	{"AWS", "AWS::EC2::IPAMPool", "EC2 IPAM Pool", "Networking", false},
	{"AWS", "AWS::EC2::IPAMScope", "EC2 IPAM Scope", "Networking", false},
	{"AWS", "AWS::EC2::LaunchTemplate", "EC2 LaunchTemplate", "Infrastructure", false},
	{"AWS", "AWS::EC2::LocalGatewayRoute", "EC2 LocalGatewayRoute", "Networking", false},
	{"AWS", "AWS::EC2::LocalGatewayRouteTableVPCAssociation", "EC2 LocalGatewayRouteTableVPCAssociation", "Networking", false},
	{"AWS", "AWS::EC2::NatGateway", "NAT Gateway", "Networking", true},
	{"AWS", "AWS::EC2::NetworkAcl", "EC2 NetworkAcl", "Networking", true},
	{"AWS", "AWS::EC2::NetworkAclEntry", "EC2 NetworkAclEntry", "Networking", false},
	{"AWS", "AWS::EC2::NetworkInsightsAccessScope", "EC2 NetworkInsightsAccessScope", "Networking", false},
	{"AWS", "AWS::EC2::NetworkInsightsAccessScopeAnalysis", "EC2 NetworkInsightsAccessScopeAnalysis", "Networking", false},
	{"AWS", "AWS::EC2::NetworkInsightsAnalysis", "EC2 NetworkInsightsAnalysis", "Networking", false},
	{"AWS", "AWS::EC2::NetworkInsightsPath", "EC2 NetworkInsightsPath", "Networking", false},
	{"AWS", "AWS::EC2::NetworkInterface", "EC2 NetworkInterface", "Networking", true},
	{"AWS", "AWS::EFS::FileSystem", "EFS FileSystem", "Container", false},
	{"AWS", "AWS::EC2::NetworkInterfaceAttachment", "EC2 NetworkInterfaceAttachment", "Networking", false},
	{"AWS", "AWS::EC2::NetworkInterfacePermission", "EC2 NetworkInterfacePermission", "Networking", false},
	{"AWS", "AWS::EC2::PlacementGroup", "EC2 PlacementGroup", "Infrastructure", false},
	{"AWS", "AWS::EC2::PrefixList", "EC2 PrefixList", "Infrastructure", false},
	{"AWS", "AWS::EC2::Region", "Region", "Management", false},
	{"AWS", "AWS::EC2::RegionalSettings", "Regional Settings", "Management", false},
	{"AWS", "AWS::EC2::Route", "EC2 Route", "Networking", false},
	{"AWS", "AWS::EC2::RouteTable", "Route Table", "Networking", true},
	{"AWS", "AWS::EC2::SecurityGroup", "Security Group", "Security", true},
	{"AWS", "AWS::EC2::SecurityGroupEgress", "EC2 SecurityGroupEgress", "Security", false},
	{"AWS", "AWS::EC2::SecurityGroupIngress", "EC2 SecurityGroupIngress", "Security", false},
	{"AWS", "AWS::EC2::SpotFleet", "EC2 SpotFleet", "Networking", false},
	{"AWS", "AWS::EC2::Subnet", "EC2 Subnet", "Networking", true},
	{"AWS", "AWS::EC2::SubnetCidrBlock", "EC2 SubnetCidrBlock", "Networking", false},
	{"AWS", "AWS::EC2::SubnetNetworkAclAssociation", "EC2 SubnetNetworkAclAssociation", "Networking", false},
	{"AWS", "AWS::EC2::SubnetRouteTableAssociation", "EC2 SubnetRouteTableAssociation", "Networking", false},
	{"AWS", "AWS::EC2::TrafficMirrorFilter", "EC2 TrafficMirrorFilter", "Networking", false},
	{"AWS", "AWS::EC2::TrafficMirrorFilterRule", "EC2 TrafficMirrorFilterRule", "Networking", false},
	{"AWS", "AWS::EC2::TrafficMirrorSession", "EC2 TrafficMirrorSession", "Networking", false},
	{"AWS", "AWS::EC2::TrafficMirrorTarget", "EC2 TrafficMirrorTarget", "Networking", false},
	{"AWS", "AWS::EC2::TransitGateway", "EC2 TransitGateway", "Networking", true},
	{"AWS", "AWS::EC2::TransitGatewayAttachment", "EC2 TransitGatewayAttachment", "Networking", false},
	{"AWS", "AWS::EC2::TransitGatewayConnect", "EC2 TransitGatewayConnect", "Networking", false},
	{"AWS", "AWS::EC2::TransitGatewayMulticastDomain", "EC2 TransitGatewayMulticastDomain", "Networking", false},
	{"AWS", "AWS::EC2::TransitGatewayMulticastDomainAssociation", "EC2 TransitGatewayMulticastDomainAssociation", "Networking", false},
	{"AWS", "AWS::EC2::TransitGatewayMulticastGroupMember", "EC2 TransitGatewayMulticastGroupMember", "Networking", false},
	{"AWS", "AWS::EC2::TransitGatewayMulticastGroupSource", "EC2 TransitGatewayMulticastGroupSource", "Networking", false},
	{"AWS", "AWS::EC2::TransitGatewayPeeringAttachment", "EC2 TransitGatewayPeeringAttachment", "Networking", false},
	{"AWS", "AWS::EC2::TransitGatewayRoute", "EC2 TransitGatewayRoute", "Networking", false},
	{"AWS", "AWS::EC2::TransitGatewayRouteTable", "EC2 TransitGatewayRouteTable", "Networking", false},
	{"AWS", "AWS::EC2::TransitGatewayRouteTableAssociation", "EC2 TransitGatewayRouteTableAssociation", "Networking", false},
	{"AWS", "AWS::EC2::TransitGatewayRouteTablePropagation", "EC2 TransitGatewayRouteTablePropagation", "Networking", false},
	{"AWS", "AWS::EC2::TransitGatewayVpcAttachment", "EC2 TransitGatewayVpcAttachment", "Networking", false},
	{"AWS", "AWS::EC2::Volume", "EBS Volume", "Storage", true},
	{"AWS", "AWS::EC2::VolumeAttachment", "EBS VolumeAttachment", "Storage", false},
	{"AWS", "AWS::EC2::VolumeSnapshot", "EBS Volume Snapshot", "Storage", true},
	{"AWS", "AWS::EC2::VPC", "EC2 VPC", "Networking", true},
	{"AWS", "AWS::EC2::VPCCidrBlock", "EC2 VPCCidrBlock", "Networking", false},
	{"AWS", "AWS::EC2::VPCDHCPOptionsAssociation", "EC2 VPCDHCPOptionsAssociation", "Networking", false},
	{"AWS", "AWS::EC2::VPCEndpoint", "EC2 VPCEndpoint", "Networking", false},
	{"AWS", "AWS::EC2::VPCEndpointConnectionNotification", "EC2 VPCEndpointConnectionNotification", "Networking", false},
	{"AWS", "AWS::EC2::VPCEndpointService", "EC2 VPCEndpointService", "Networking", false},
	{"AWS", "AWS::EC2::VPCEndpointServicePermissions", "EC2 VPCEndpointServicePermissions", "Networking", false},
	{"AWS", "AWS::EC2::VPCGatewayAttachment", "EC2 VPCGatewayAttachment", "Networking", false},
	{"AWS", "AWS::EC2::VPCPeeringConnection", "EC2 VPCPeeringConnection", "Networking", false},
	{"AWS", "AWS::EC2::VPNConnection", "EC2 VPNConnection", "Networking", false},
	{"AWS", "AWS::EC2::VPNConnectionRoute", "EC2 VPNConnectionRoute", "Networking", false},
	{"AWS", "AWS::EC2::VPNGateway", "EC2 VPNGateway", "Networking", false},
	{"AWS", "AWS::EC2::VPNGatewayRoutePropagation", "EC2 VPNGatewayRoutePropagation", "Networking", false},
	{"AWS", "AWS::ECR::PublicRepository", "ECR PublicRepository", "Container", true},
	{"AWS", "AWS::ECR::RegistryPolicy", "ECR RegistryPolicy", "Container", false},
	{"AWS", "AWS::ECR::ReplicationConfiguration", "ECR ReplicationConfiguration", "Container", false},
	{"AWS", "AWS::ECR::Repository", "ECR Repository", "Container", true},
	{"AWS", "AWS::ECS::CapacityProvider", "ECS CapacityProvider", "Container", false},
	{"AWS", "AWS::ECS::Cluster", "ECS Cluster", "Container", true},
	{"AWS", "AWS::ECS::ClusterCapacityProviderAssociations", "ECS ClusterCapacityProviderAssociations", "Container", false},
	{"AWS", "AWS::ECS::PrimaryTaskSet", "ECS PrimaryTaskSet", "Container", false},
	{"AWS", "AWS::ECS::Service", "ECS Service", "Container", true},
	{"AWS", "AWS::ECS::TaskDefinition", "ECS TaskDefinition", "Container", false},
	{"AWS", "AWS::ECS::TaskSet", "ECS TaskSet", "Container", false},
	{"AWS", "AWS::EFS::AccessPoint", "EFS AccessPoint", "Container", false},
	{"AWS", "AWS::EFS::MountTarget", "EFS MountTarget", "Container", false},
	{"AWS", "AWS::ElasticLoadBalancingV2::LoadBalancer", "ELB v2 LoadBalancer", "Networking", true},
	{"AWS", "AWS::FSx::FileSystem", "FSx FileSystem", "Storage", true},
	{"AWS", "AWS::S3::StorageLens", "S3 StorageLens", "Storage", true},
	{"AWS", "AWS::EKS::Addon", "EKS Addon", "Container", false},
	{"AWS", "AWS::EKS::Cluster", "EKS Cluster", "Container", true},
	{"AWS", "AWS::EKS::FargateProfile", "EKS FargateProfile", "Container", false},
	{"AWS", "AWS::EKS::Nodegroup", "EKS Nodegroup", "Container", false},
	{"AWS", "AWS::ElastiCache::CacheCluster", "ElastiCache CacheCluster", "Data Service", true},
	{"AWS", "AWS::ElastiCache::GlobalReplicationGroup", "ElastiCache GlobalReplicationGroup", "Data Service", false},
	{"AWS", "AWS::ElastiCache::ParameterGroup", "ElastiCache ParameterGroup", "Data Service", false},
	{"AWS", "AWS::ElastiCache::ReplicationGroup", "ElastiCache ReplicationGroup", "Data Service", false},
	{"AWS", "AWS::ElastiCache::SecurityGroup", "ElastiCache SecurityGroup", "Data Service", true},
	{"AWS", "AWS::ElastiCache::SecurityGroupIngress", "ElastiCache SecurityGroupIngress", "Data Service", false},
	{"AWS", "AWS::ElastiCache::SubnetGroup", "ElastiCache SubnetGroup", "Data Service", true},
	{"AWS", "AWS::ElastiCache::User", "ElastiCache User", "Data Service", false},
	{"AWS", "AWS::ElastiCache::UserGroup", "ElastiCache UserGroup", "Data Service", false},
	{"AWS", "AWS::ElasticBeanstalk::Application", "Elastic Beanstalk Application", "Cloud App", true},
	{"AWS", "AWS::ElasticBeanstalk::ApplicationVersion", "Elastic Beanstalk ApplicationVersion", "Cloud App", false},
	{"AWS", "AWS::ElasticBeanstalk::ConfigurationTemplate", "Elastic Beanstalk ConfigurationTemplate", "Cloud App", false},
	{"AWS", "AWS::ElasticBeanstalk::Environment", "Elastic Beanstalk Environment", "Cloud App", false},
	{"AWS", "AWS::elasticfilesystem::", "Elastic Fileshare", "Managed Fileshare", true},
	{"AWS", "AWS::ElasticLoadBalancing::LoadBalancer", "ELB LoadBalancer", "Networking", true},
	{"AWS", "AWS::ElasticLoadBalancingV2::Listener", "ELB v2 Listener", "Networking", false},
	{"AWS", "AWS::ElasticLoadBalancingV2::ListenerCertificate", "ELB v2 ListenerCertificate", "Networking", false},
	{"AWS", "AWS::ElasticLoadBalancingV2::ListenerRule", "ELB v2 ListenerRule", "Networking", false},
	{"AWS", "AWS::SecretsManager::Secret", "Secrets Manager Secret", "Security", false},
	{"AWS", "AWS::SecurityHub::Hub", "Security Hub Hub", "Security", true},
	{"AWS", "AWS::ElasticLoadBalancingV2::TargetGroup", "ELB v2 TargetGroup", "Networking", false},
	{"AWS", "AWS::Elasticsearch::Domain", "Elasticsearch Domain", "Database", true},
	{"AWS", "AWS::EMR::Cluster", "EMR Cluster", "Big data", true},
	{"AWS", "AWS::EMR::InstanceFleetConfig", "EMR InstanceFleetConfig", "Big data", false},
	{"AWS", "AWS::EMR::InstanceGroupConfig", "EMR InstanceGroupConfig", "Big data", false},
	{"AWS", "AWS::EMR::SecurityConfiguration", "EMR SecurityConfiguration", "Big data", false},
	{"AWS", "AWS::EMR::Step", "EMR Step", "Big data", true},
	{"AWS", "AWS::EMR::Studio", "EMR Studio", "Big data", true},
	{"AWS", "AWS::EMR::StudioSessionMapping", "EMR StudioSessionMapping", "Big data", false},
	{"AWS", "AWS::EMRContainers::VirtualCluster", "EMR Containers VirtualCluster", "Big data", false},
	{"AWS", "AWS::Events::ApiDestination", "Events ApiDestination", "Messaging", false},
	{"AWS", "AWS::Events::Archive", "Events Archive", "Messaging", false},
	{"AWS", "AWS::Events::Connection", "Events Connection", "Messaging", false},
	{"AWS", "AWS::Events::EventBus", "Events EventBus", "Messaging", true},
	{"AWS", "AWS::Events::EventBusPolicy", "Events EventBusPolicy", "Messaging", false},
	{"AWS", "AWS::Events::Rule", "Events Rule", "Messaging", false},
	{"AWS", "AWS::EventSchemas::Discoverer", "Event Schemas Discoverer", "Messaging", false},
	{"AWS", "AWS::EventSchemas::Registry", "Event Schemas Registry", "Messaging", true},
	{"AWS", "AWS::EventSchemas::RegistryPolicy", "Event Schemas RegistryPolicy", "Messaging", false},
	{"AWS", "AWS::EventSchemas::Schema", "Event Schemas Schema", "Messaging", false},
	{"AWS", "AWS::Evidently::Experiment", "Evidently Experiment", "Other", false},
	{"AWS", "AWS::Evidently::Feature", "Evidently Feature", "Other", false},
	{"AWS", "AWS::Evidently::Launch", "Evidently Launch", "Other", false},
	{"AWS", "AWS::Evidently::Project", "Evidently Project", "Other", true},
	{"AWS", "AWS::FinSpace::Environment", "FinSpace Environment", "Other", false},
	{"AWS", "AWS::FIS::ExperimentTemplate", "Fault Injection Simulator ExperimentTemplate", "Other", false},
	{"AWS", "AWS::FMS::NotificationChannelAWS::FMS::Policy", "Firewall Manager NotificationChannelAWS::FMS::Policy", "Other", false},
	{"AWS", "AWS::FraudDetector::Detector", "FraudDetector Detector", "Other", false},
	{"AWS", "AWS::FraudDetector::EntityType", "FraudDetector EntityType", "Other", false},
	{"AWS", "AWS::FraudDetector::EventType", "FraudDetector EventType", "Other", false},
	{"AWS", "AWS::FraudDetector::Label", "FraudDetector Label", "Other", false},
	{"AWS", "AWS::FraudDetector::Outcome", "FraudDetector Outcome", "Other", false},
	{"AWS", "AWS::FraudDetector::Variable", "FraudDetector Variable", "Other", false},
	{"AWS", "AWS::SNS::Subscription", "SNS Subscription", "Messaging", false},
	{"AWS", "AWS::SNS::Topic", "SNS Topic", "Messaging", false},
	{"AWS", "AWS::FSx::Snapshot", "FSx Snapshot", "Storage", false},
	{"AWS", "AWS::FSx::StorageVirtualMachine", "FSx StorageVirtualMachine", "Storage", false},
	{"AWS", "AWS::FSx::Volume", "FSx Volume", "Storage", true},
	{"AWS", "AWS::GameLift::Alias", "GameLift Alias", "Gaming", false},
	{"AWS", "AWS::GameLift::Build", "GameLift Build", "Gaming", false},
	{"AWS", "AWS::GameLift::Fleet", "GameLift Fleet", "Gaming", false},
	{"AWS", "AWS::GameLift::GameServerGroup", "GameLift GameServerGroup", "Gaming", false},
	{"AWS", "AWS::GameLift::GameSessionQueue", "GameLift GameSessionQueue", "Gaming", false},
	{"AWS", "AWS::GameLift::MatchmakingConfiguration", "GameLift MatchmakingConfiguration", "Gaming", false},
	{"AWS", "AWS::GameLift::MatchmakingRuleSet", "GameLift MatchmakingRuleSet", "Gaming", false},
	{"AWS", "AWS::GameLift::Script", "GameLift Script", "Gaming", false},
	{"AWS", "AWS::GlobalAccelerator::Accelerator", "Global Accelerator Accelerator", "Networking", true},
	{"AWS", "AWS::GlobalAccelerator::EndpointGroup", "Global Accelerator EndpointGroup", "Networking", false},
	{"AWS", "AWS::GlobalAccelerator::Listener", "Global Accelerator Listener", "Networking", false},
	{"AWS", "AWS::Glue::Classifier", "Glue Classifier", "Serverless", false},
	{"AWS", "AWS::Glue::Connection", "Glue Connection", "Serverless", false},
	{"AWS", "AWS::Glue::Crawler", "Glue Crawler", "Serverless", false},
	{"AWS", "AWS::Glue::Database", "Glue Database", "Serverless", true},
	{"AWS", "AWS::Glue::DataCatalogEncryptionSettings", "Glue DataCatalogEncryptionSettings", "Serverless", false},
	{"AWS", "AWS::Glue::DevEndpoint", "Glue DevEndpoint", "Serverless", false},
	{"AWS", "AWS::Glue::Job", "Glue Job", "Serverless", false},
	{"AWS", "AWS::Glue::MLTransform", "Glue MLTransform", "Serverless", false},
	{"AWS", "AWS::Glue::Partition", "Glue Partition", "Serverless", false},
	{"AWS", "AWS::Glue::Registry", "Glue Registry", "Serverless", false},
	{"AWS", "AWS::Glue::Schema", "Glue Schema", "Serverless", false},
	{"AWS", "AWS::Glue::SchemaVersion", "Glue SchemaVersion", "Serverless", false},
	{"AWS", "AWS::Glue::SchemaVersionMetadata", "Glue SchemaVersionMetadata", "Serverless", false},
	{"AWS", "AWS::Glue::SecurityConfiguration", "Glue SecurityConfiguration", "Serverless", false},
	{"AWS", "AWS::Glue::Table", "Glue Table", "Serverless", false},
	{"AWS", "AWS::Glue::Trigger", "Glue Trigger", "Serverless", false},
	{"AWS", "AWS::Glue::Workflow", "Glue Workflow", "Serverless", false},
	{"AWS", "AWS::Greengrass::Azure CoreDefinition", "Greengrass Azure CoreDefinition", "IoT", false},
	{"AWS", "AWS::Greengrass::Azure CoreDefinitionVersion", "Greengrass Azure CoreDefinitionVersion", "IoT", false},
	{"AWS", "AWS::Greengrass::ConnectorDefinition", "Greengrass ConnectorDefinition", "IoT", false},
	{"AWS", "AWS::Greengrass::ConnectorDefinitionVersion", "Greengrass ConnectorDefinitionVersion", "IoT", false},
	{"AWS", "AWS::Greengrass::DeviceDefinition", "Greengrass DeviceDefinition", "IoT", false},
	{"AWS", "AWS::Greengrass::DeviceDefinitionVersion", "Greengrass DeviceDefinitionVersion", "IoT", false},
	{"AWS", "AWS::Greengrass::FunctionDefinition", "Greengrass FunctionDefinition", "IoT", false},
	{"AWS", "AWS::Greengrass::FunctionDefinitionVersion", "Greengrass FunctionDefinitionVersion", "IoT", false},
	{"AWS", "AWS::Greengrass::Group", "Greengrass Group", "IoT", false},
	{"AWS", "AWS::Greengrass::GroupVersion", "Greengrass GroupVersion", "IoT", false},
	{"AWS", "AWS::Greengrass::LoggerDefinition", "Greengrass LoggerDefinition", "IoT", false},
	{"AWS", "AWS::Greengrass::LoggerDefinitionVersion", "Greengrass LoggerDefinitionVersion", "IoT", false},
	{"AWS", "AWS::Greengrass::ResourceDefinition", "Greengrass ResourceDefinition", "IoT", false},
	{"AWS", "AWS::Greengrass::ResourceDefinitionVersion", "Greengrass ResourceDefinitionVersion", "IoT", false},
	{"AWS", "AWS::Greengrass::SubscriptionDefinition", "Greengrass SubscriptionDefinition", "IoT", false},
	{"AWS", "AWS::Greengrass::SubscriptionDefinitionVersion", "Greengrass SubscriptionDefinitionVersion", "IoT", false},
	{"AWS", "AWS::GreengrassV2::ComponentVersion", "GreengrassV2 ComponentVersion", "IoT", false},
	{"AWS", "AWS::GroundStation::Config", "GroundStation Config", "Other", false},
	{"AWS", "AWS::GroundStation::DataflowEndpointGroup", "GroundStation DataflowEndpointGroup", "Other", false},
	{"AWS", "AWS::GroundStation::MissionProfile", "GroundStation MissionProfile", "Other", false},
	{"AWS", "AWS::GuardDuty::Detector", "GuardDuty Detector", "Security", true},
	{"AWS", "AWS::GuardDuty::Filter", "GuardDuty Filter", "Security", false},
	{"AWS", "AWS::GuardDuty::Finding", "Guard Duty", "Security", false},
	{"AWS", "AWS::GuardDuty::IPSet", "GuardDuty IPSet", "Security", false},
	{"AWS", "AWS::GuardDuty::Master", "GuardDuty Master", "Security", true},
	{"AWS", "AWS::GuardDuty::Member", "GuardDuty Member", "Security", false},
	{"AWS", "AWS::GuardDuty::ThreatIntelSet", "GuardDuty ThreatIntelSet", "Security", false},
	{"AWS", "AWS::HealthLake::FHIRDatastore", "Health Lake FHIRDatastore", "Security", false},
	{"AWS", "AWS::IAM::AccessKey", "IAM AccessKey", "Identity", false},
	{"AWS", "AWS::IAM::Account", "IAM Account", "Identity", true},
	{"AWS", "AWS::IAM::AccountSummary", "IAM Account Summary", "Identity", false},
	{"AWS", "AWS::IAM::CredentialReport", "IAM Credential Report", "Identity", false},
	{"AWS", "AWS::IAM::Group", "IAM Group", "Identity", true},
	{"AWS", "AWS::IAM::IAMAccountPasswordPolicy", "IAM Password Policy", "Identity", false},
	{"AWS", "AWS::IAM::InstanceProfile", "IAM InstanceProfile", "Identity", false},
	{"AWS", "AWS::IAM::ManagedPolicy", "IAM ManagedPolicy", "Identity", false},
	{"AWS", "AWS::IAM::OIDCProvider", "IAM OIDCProvider", "Identity", false},
	{"AWS", "AWS::IAM::Policy", "IAM Policy", "Identity", false},
	{"AWS", "AWS::IAM::Role", "IAM Role", "Identity", false},
	{"AWS", "AWS::IAM::SAMLProvider", "IAM SAMLProvider", "Identity", false},
	{"AWS", "AWS::IAM::ServerCertificate", "IAM ServerCertificate", "Identity", false},
	{"AWS", "AWS::IAM::ServiceLinkedRole", "IAM ServiceLinkedRole", "Identity", false},
	{"AWS", "AWS::IAM::User", "IAM User", "Identity", true},
	{"AWS", "AWS::IAM::UserToGroupAddition", "IAM UserToGroupAddition", "Identity", false},
	{"AWS", "AWS::IAM::VirtualMFADevice", "IAM VirtualMFADevice", "Identity", false},
	{"AWS", "AWS::ImageBuilder::Component", "ImageBuilder Component", "Infrastructure", false},
	{"AWS", "AWS::ImageBuilder::ContainerRecipe", "ImageBuilder ContainerRecipe", "Infrastructure", false},
	{"AWS", "AWS::ImageBuilder::DistributionConfiguration", "ImageBuilder DistributionConfiguration", "Infrastructure", false},
	{"AWS", "AWS::ImageBuilder::Image", "ImageBuilder Image", "Infrastructure", true},
	{"AWS", "AWS::ImageBuilder::ImagePipeline", "ImageBuilder ImagePipeline", "Infrastructure", false},
	{"AWS", "AWS::ImageBuilder::ImageRecipe", "ImageBuilder ImageRecipe", "Infrastructure", false},
	{"AWS", "AWS::ImageBuilder::InfrastructureConfiguration", "ImageBuilder InfrastructureConfiguration", "Infrastructure", false},
	{"AWS", "AWS::Inspector::AssessmentTarget", "Inspector AssessmentTarget", "Governance", false},
	{"AWS", "AWS::Inspector::AssessmentTemplate", "Inspector AssessmentTemplate", "Governance", false},
	{"AWS", "AWS::Inspector::ResourceGroup", "Inspector ResourceGroup", "Governance", false},
	{"AWS", "AWS::InspectorV2::Filter", "InspectorV2 Filter", "Governance", false},
	{"AWS", "AWS::IoT::AccountAuditConfiguration", "IoT AccountAuditConfiguration", "IoT", false},
	{"AWS", "AWS::IoT::Authorizer", "IoT Authorizer", "IoT", false},
	{"AWS", "AWS::IoT::Certificate", "IoT Certificate", "IoT", false},
	{"AWS", "AWS::IoT::CustomMetric", "IoT CustomMetric", "IoT", false},
	{"AWS", "AWS::IoT::Dimension", "IoT Dimension", "IoT", false},
	{"AWS", "AWS::IoT::DomainConfiguration", "IoT DomainConfiguration", "IoT", false},
	{"AWS", "AWS::IoT::FleetMetric", "IoT FleetMetric", "IoT", false},
	{"AWS", "AWS::IoT::JobTemplate", "IoT JobTemplate", "IoT", false},
	{"AWS", "AWS::IoT::Logging", "IoT Logging", "IoT", false},
	{"AWS", "AWS::IoT::MitigationAction", "IoT MitigationAction", "IoT", false},
	{"AWS", "AWS::IoT::Policy", "IoT Policy", "IoT", false},
	{"AWS", "AWS::IoT::PolicyPrincipalAttachment", "IoT PolicyPrincipalAttachment", "IoT", false},
	{"AWS", "AWS::IoT::ProvisioningTemplate", "IoT ProvisioningTemplate", "IoT", false},
	{"AWS", "AWS::IoT::ResourceSpecificLogging", "IoT ResourceSpecificLogging", "IoT", false},
	{"AWS", "AWS::IoT::ScheduledAudit", "IoT ScheduledAudit", "IoT", false},
	{"AWS", "AWS::IoT::SecurityProfile", "IoT SecurityProfile", "IoT", false},
	{"AWS", "AWS::IoT::Thing", "IoT Thing", "IoT", false},
	{"AWS", "AWS::IoT::ThingPrincipalAttachment", "IoT ThingPrincipalAttachment", "IoT", false},
	{"AWS", "AWS::IoT::TopicRule", "IoT TopicRule", "IoT", false},
	{"AWS", "AWS::IoT::TopicRuleDestination", "IoT TopicRuleDestination", "IoT", false},
	{"AWS", "AWS::IoT1Click::Device", "IoT1Click Device", "IoT", false},
	{"AWS", "AWS::IoT1Click::Placement", "IoT1Click Placement", "IoT", false},
	{"AWS", "AWS::IoT1Click::Project", "IoT1Click Project", "IoT", false},
	{"AWS", "AWS::IoTAnalytics::Channel", "IoTAnalytics Channel", "IoT", false},
	{"AWS", "AWS::IoTAnalytics::Dataset", "IoTAnalytics Dataset", "IoT", false},
	{"AWS", "AWS::IoTAnalytics::Datastore", "IoTAnalytics Datastore", "IoT", false},
	{"AWS", "AWS::IoTAnalytics::Pipeline", "IoTAnalytics Pipeline", "IoT", false},
	{"AWS", "AWS::IoTAzure CoreDeviceAdvisor::SuiteDefinition", "IoTAzure CoreDeviceAdvisor SuiteDefinition", "IoT", false},
	{"AWS", "AWS::IoTEvents::DetectorModel", "IoTEvents DetectorModel", "IoT", false},
	{"AWS", "AWS::IoTEvents::Input", "IoTEvents Input", "IoT", false},
	{"AWS", "AWS::IoTFleetHub::Application", "IoTFleetHub Application", "IoT", false},
	{"AWS", "AWS::IoTSiteWise::AccessPolicy", "IoTSiteWise AccessPolicy", "IoT", false},
	{"AWS", "AWS::IoTSiteWise::Asset", "IoTSiteWise Asset", "IoT", false},
	{"AWS", "AWS::IoTSiteWise::AssetModel", "IoTSiteWise AssetModel", "IoT", false},
	{"AWS", "AWS::IoTSiteWise::Dashboard", "IoTSiteWise Dashboard", "IoT", false},
	{"AWS", "AWS::IoTSiteWise::Gateway", "IoTSiteWise Gateway", "IoT", false},
	{"AWS", "AWS::IoTSiteWise::Portal", "IoTSiteWise Portal", "IoT", false},
	{"AWS", "AWS::IoTSiteWise::Project", "IoTSiteWise Project", "IoT", false},
	{"AWS", "AWS::IVS::Channel", "Interactive Video Service Channel", "Media", false},
	{"AWS", "AWS::IVS::PlaybackKeyPair", "Interactive Video Service PlaybackKeyPair", "Media", false},
	{"AWS", "AWS::IVS::RecordingConfiguration", "Interactive Video Service RecordingConfiguration", "Media", false},
	{"AWS", "AWS::IVS::StreamKey", "Interactive Video Service StreamKey", "Media", false},
	{"AWS", "aws::kafkaconnect::", "Managed Streaming for Kafka", "Messaging", true},
	{"AWS", "AWS::Kendra::DataSource", "Kendra DataSource", "Database", false},
	{"AWS", "AWS::Kendra::Faq", "Kendra Faq", "Database", false},
	{"AWS", "AWS::Kendra::Index", "Kendra Index", "Database", false},
	{"AWS", "AWS::KinesisAnalyticsV2::Application", "Kinesis Analytics (V2) Application", "Database", true},
	{"AWS", "AWS::KinesisAnalyticsV2::ApplicationCloudWatchLoggingOption", "Kinesis Analytics (V2) ApplicationCloudWatchLoggingOption", "Database", false},
	{"AWS", "AWS::KinesisAnalyticsV2::ApplicationOutput", "Kinesis Analytics (V2) ApplicationOutput", "Database", false},
	{"AWS", "AWS::KinesisAnalyticsV2::ApplicationReferenceDataSource", "Kinesis Analytics (V2) ApplicationReferenceDataSource", "Database", false},
	{"AWS", "AWS::KinesisFirehose::DeliveryStream", "Kinesis Firehose DeliveryStream", "Database", false},
	{"AWS", "AWS::KMS::Alias", "KMS Alias", "Security", false},
	{"AWS", "AWS::KMS::Key", "KMS Key", "Security", true},
	{"AWS", "AWS::KMS::ReplicaKey", "KMS ReplicaKey", "Security", false},
	{"AWS", "AWS::LakeFormation::DataLakeSettings", "LakeFormation DataLakeSettings", "Management", false},
	{"AWS", "AWS::LakeFormation::Permissions", "LakeFormation Permissions", "Management", false},
	{"AWS", "AWS::LakeFormation::Resource", "LakeFormation Resource", "Management", false},
	{"AWS", "AWS::Lambda::Alias", "Lambda Alias", "Serverless", false},
	{"AWS", "AWS::Lambda::CodeSigningConfig", "Lambda CodeSigningConfig", "Serverless", false},
	{"AWS", "AWS::Lambda::EventInvokeConfig", "Lambda EventInvokeConfig", "Serverless", false},
	{"AWS", "AWS::Lambda::EventSourceMapping", "Lambda EventSourceMapping", "Serverless", false},
	{"AWS", "AWS::Lambda::Function", "Lambda Function", "Serverless", true},
	{"AWS", "AWS::Lambda::LayerVersion", "Lambda LayerVersion", "Serverless", false},
	{"AWS", "AWS::Lambda::LayerVersionPermission", "Lambda LayerVersionPermission", "Serverless", false},
	{"AWS", "AWS::Lambda::Permission", "Lambda Permission", "Serverless", false},
	{"AWS", "AWS::Lambda::Version", "Lambda Version", "Serverless", false},
	{"AWS", "AWS::Lex::Bot", "Lex Bot", "AI + ML", true},
	{"AWS", "AWS::Lex::BotAlias", "Lex BotAlias", "AI + ML", false},
	{"AWS", "AWS::Lex::BotVersion", "Lex BotVersion", "AI + ML", false},
	{"AWS", "AWS::Lex::ResourcePolicy", "Lex ResourcePolicy", "AI + ML", false},
	{"AWS", "AWS::LicenseManager::Grant", "License Manager Grant", "Management", false},
	{"AWS", "AWS::LicenseManager::License", "License Manager License", "Management", false},
	{"AWS", "AWS::Lightsail::Alarm", "Lightsail Alarm", "Cloud App", false},
	{"AWS", "AWS::Lightsail::Bucket", "Lightsail Bucket", "Cloud App", false},
	{"AWS", "AWS::Lightsail::Certificate", "Lightsail Certificate", "Cloud App", false},
	{"AWS", "AWS::Lightsail::Container", "Lightsail Container", "Cloud App", false},
	{"AWS", "AWS::Lightsail::Database", "Lightsail Database", "Cloud App", false},
	{"AWS", "AWS::Lightsail::Disk", "Lightsail Disk", "Cloud App", false},
	{"AWS", "AWS::Lightsail::Distribution", "Lightsail Distribution", "Cloud App", false},
	{"AWS", "AWS::Lightsail::Instance", "Lightsail Instance", "Cloud App", true},
	{"AWS", "AWS::Lightsail::LoadBalancer", "Lightsail LoadBalancer", "Cloud App", true},
	{"AWS", "AWS::Lightsail::LoadBalancerTlsCertificate", "Lightsail LoadBalancerTlsCertificate", "Cloud App", false},
	{"AWS", "AWS::Lightsail::StaticIp", "Lightsail StaticIp", "Cloud App", false},
	{"AWS", "AWS::Location::GeofenceCollection", "Location GeofenceCollection", "Other", false},
	{"AWS", "AWS::Location::Map", "Location Map", "Other", false},
	{"AWS", "AWS::Location::PlaceIndex", "Location PlaceIndex", "Other", false},
	{"AWS", "AWS::Location::RouteCalculator", "Location RouteCalculator", "Other", false},
	{"AWS", "AWS::Location::Tracker", "Location Tracker", "Other", false},
	{"AWS", "AWS::Location::TrackerConsumer", "Location TrackerConsumer", "Other", false},
	{"AWS", "AWS::Logs::LogGroup", "Log Group", "Monitoring", false},
	{"AWS", "AWS::Logs::MetricFilter", "Log Metric Filter", "Monitoring", false},
	{"AWS", "AWS::LookoutEquipment::InferenceScheduler", "Lookout Equipment InferenceScheduler", "Other", false},
	{"AWS", "AWS::LookoutMetrics::Alert", "Lookout Metrics Alert", "Other", false},
	{"AWS", "AWS::LookoutMetrics::AnomalyDetector", "Lookout Metrics AnomalyDetector", "Other", false},
	{"AWS", "AWS::LookoutVision::Project", "LookoutVision Project", "Other", false},
	{"AWS", "AWS::Macie::CustomDataIdentifier", "Macie CustomDataIdentifier", "Security", false},
	{"AWS", "AWS::Macie::FindingsFilter", "Macie FindingsFilter", "Security", false},
	{"AWS", "AWS::Macie::Session", "Macie Session", "Security", false},
	{"AWS", "AWS::ManagedBlockchain::Member", "Managed Blockchain Member", "Other", false},
	{"AWS", "AWS::ManagedBlockchain::Node", "Managed Blockchain Node", "Other", false},
	{"AWS", "AWS::MediaConnect::Flow", "Media Connect Flow", "Media", false},
	{"AWS", "AWS::MediaConnect::FlowEntitlement", "Media Connect FlowEntitlement", "Media", false},
	{"AWS", "AWS::MediaConnect::FlowOutput", "Media Connect FlowOutput", "Media", false},
	{"AWS", "AWS::MediaConnect::FlowSource", "Media Connect FlowSource", "Media", false},
	{"AWS", "AWS::MediaConnect::FlowVpcInterface", "Media Connect FlowVpcInterface", "Media", false},
	{"AWS", "AWS::MediaConvert::JobTemplate", "Media Convert JobTemplate", "Media", false},
	{"AWS", "AWS::MediaConvert::Preset", "Media Convert Preset", "Media", false},
	{"AWS", "AWS::MediaConvert::Queue", "Media Convert Queue", "Media", false},
	{"AWS", "AWS::MediaLive::Channel", "Media Live Channel", "Media", false},
	{"AWS", "AWS::MediaLive::Input", "Media Live Input", "Media", false},
	{"AWS", "AWS::MediaLive::InputSecurityGroup", "Media Live InputSecurityGroup", "Media", false},
	{"AWS", "AWS::MediaPackage::Asset", "Media Package Asset", "Media", false},
	{"AWS", "AWS::MediaPackage::Channel", "Media Package Channel", "Media", false},
	{"AWS", "AWS::MediaPackage::OriginEndpoint", "Media Package OriginEndpoint", "Media", false},
	{"AWS", "AWS::MediaPackage::PackagingConfiguration", "Media Package PackagingConfiguration", "Media", false},
	{"AWS", "AWS::MediaPackage::PackagingGroup", "Media Package PackagingGroup", "Media", false},
	{"AWS", "AWS::MediaStore::Container", "MediaStore Container", "Media", false},
	{"AWS", "AWS::MemoryDB::ACL", "MemoryDB ACL", "Database", false},
	{"AWS", "AWS::MemoryDB::Cluster", "MemoryDB Cluster", "Database", true},
	{"AWS", "AWS::MemoryDB::ParameterGroup", "MemoryDB ParameterGroup", "Database", false},
	{"AWS", "AWS::MemoryDB::SubnetGroup", "MemoryDB SubnetGroup", "Database", false},
	{"AWS", "AWS::MemoryDB::User", "MemoryDB User", "Database", false},
	{"AWS", "AWS::MWAA::Environment", "Managed Airflow Environment", "Database", false},
	{"AWS", "AWS::Neptune::DBCluster", "Neptune DBCluster", "Database", false},
	{"AWS", "AWS::Neptune::DBClusterParameterGroup", "Neptune DBClusterParameterGroup", "Database", false},
	{"AWS", "AWS::Neptune::DBInstance", "Neptune DBInstance", "Database", true},
	{"AWS", "AWS::Neptune::DBParameterGroup", "Neptune DBParameterGroup", "Database", false},
	{"AWS", "AWS::Neptune::DBSubnetGroup", "Neptune DBSubnetGroup", "Database", false},
	{"AWS", "AWS::NetworkFirewall::Firewall", "NetworkFirewall Firewall", "Security", true},
	{"AWS", "AWS::NetworkFirewall::FirewallPolicy", "NetworkFirewall FirewallPolicy", "Security", false},
	{"AWS", "AWS::NetworkFirewall::LoggingConfiguration", "NetworkFirewall LoggingConfiguration", "Security", false},
	{"AWS", "AWS::NetworkFirewall::RuleGroup", "NetworkFirewall RuleGroup", "Security", false},
	{"AWS", "AWS::NetworkManager::CustomerGatewayAssociation", "NetworkManager CustomerGatewayAssociation", "Networking", false},
	{"AWS", "AWS::NetworkManager::Device", "NetworkManager Device", "Networking", false},
	{"AWS", "AWS::NetworkManager::GlobalNetwork", "NetworkManager GlobalNetwork", "Networking", false},
	{"AWS", "AWS::NetworkManager::Link", "NetworkManager Link", "Networking", false},
	{"AWS", "AWS::NetworkManager::LinkAssociation", "NetworkManager LinkAssociation", "Networking", false},
	{"AWS", "AWS::NetworkManager::Site", "NetworkManager Site", "Networking", false},
	{"AWS", "AWS::NetworkManager::TransitGatewayRegistration", "NetworkManager TransitGatewayRegistration", "Networking", false},
	{"AWS", "AWS::NimbleStudio::LaunchProfile", "NimbleStudio LaunchProfile", "Management", false},
	{"AWS", "AWS::NimbleStudio::StreamingImage", "NimbleStudio StreamingImage", "Management", false},
	{"AWS", "AWS::NimbleStudio::Studio", "NimbleStudio Studio", "Management", false},
	{"AWS", "AWS::NimbleStudio::StudioComponent", "NimbleStudio StudioComponent", "Management", false},
	{"AWS", "AWS::OpenSearchService::Domain", "OpenSearchService Domain", "Ops", false},
	{"AWS", "AWS::OpsWorks::App", "OpsWorks App", "Ops", false},
	{"AWS", "AWS::OpsWorks::ElasticLoadBalancerAttachment", "OpsWorks ElasticLoadBalancerAttachment", "Ops", false},
	{"AWS", "AWS::OpsWorks::Instance", "OpsWorks Instance", "Ops", false},
	{"AWS", "AWS::OpsWorks::Layer", "OpsWorks Layer", "Ops", false},
	{"AWS", "AWS::OpsWorks::Stack", "OpsWorks Stack", "Ops", false},
	{"AWS", "AWS::OpsWorks::UserProfile", "OpsWorks UserProfile", "Ops", false},
	{"AWS", "AWS::OpsWorks::Volume", "OpsWorks Volume", "Ops", false},
	{"AWS", "AWS::OpsWorksCM::Server", "OpsWork Configuration Manager Server", "Ops", true},
	{"AWS", "aws::organization::", "Organization", "Management", true},
	{"AWS", "AWS::Panorama::ApplicationInstance", "Panorama ApplicationInstance", "Other", false},
	{"AWS", "AWS::Panorama::Package", "Panorama Package", "Other", false},
	{"AWS", "AWS::Panorama::PackageVersion", "Panorama PackageVersion", "Other", false},
	{"AWS", "AWS::Pinpoint::ADMChannel", "Pinpoint ADMChannel", "Other", false},
	{"AWS", "AWS::Pinpoint::APNSChannel", "Pinpoint APNSChannel", "Other", false},
	{"AWS", "AWS::Pinpoint::APNSSandboxChannel", "Pinpoint APNSSandboxChannel", "Other", false},
	{"AWS", "AWS::Pinpoint::APNSVoipChannel", "Pinpoint APNSVoipChannel", "Other", false},
	{"AWS", "AWS::Pinpoint::APNSVoipSandboxChannel", "Pinpoint APNSVoipSandboxChannel", "Other", false},
	{"AWS", "AWS::Pinpoint::App", "Pinpoint App", "Other", false},
	{"AWS", "AWS::Pinpoint::ApplicationSettings", "Pinpoint ApplicationSettings", "Other", false},
	{"AWS", "AWS::Pinpoint::BaiduChannel", "Pinpoint BaiduChannel", "Other", false},
	{"AWS", "AWS::Pinpoint::Campaign", "Pinpoint Campaign", "Other", false},
	{"AWS", "AWS::Pinpoint::EmailChannel", "Pinpoint EmailChannel", "Other", false},
	{"AWS", "AWS::Pinpoint::EmailTemplate", "Pinpoint EmailTemplate", "Other", false},
	{"AWS", "AWS::Pinpoint::EventStream", "Pinpoint EventStream", "Other", false},
	{"AWS", "AWS::Pinpoint::GCMChannel", "Pinpoint GCMChannel", "Other", false},
	{"AWS", "AWS::Pinpoint::InAppTemplate", "Pinpoint InAppTemplate", "Other", false},
	{"AWS", "AWS::Pinpoint::PushTemplate", "Pinpoint PushTemplate", "Other", false},
	{"AWS", "AWS::Pinpoint::Segment", "Pinpoint Segment", "Other", false},
	{"AWS", "AWS::Pinpoint::SMSChannel", "Pinpoint SMSChannel", "Other", false},
	{"AWS", "AWS::Pinpoint::SmsTemplate", "Pinpoint SmsTemplate", "Other", false},
	{"AWS", "AWS::Pinpoint::VoiceChannel", "Pinpoint VoiceChannel", "Other", false},
	{"AWS", "AWS::PinpointEmail::ConfigurationSet", "Pinpoint Email ConfigurationSet", "Other", false},
	{"AWS", "AWS::PinpointEmail::ConfigurationSetEventDestination", "Pinpoint Email ConfigurationSetEventDestination", "Other", false},
	{"AWS", "AWS::PinpointEmail::DedicatedIpPool", "Pinpoint Email DedicatedIpPool", "Other", false},
	{"AWS", "AWS::PinpointEmail::Identity", "Pinpoint Email Identity", "Other", false},
	{"AWS", "AWS::QLDB::Ledger", "QLDB Ledger", "Analytics", true},
	{"AWS", "AWS::QLDB::Stream", "QLDB Stream", "Analytics", true},
	{"AWS", "AWS::QuickSight::Analysis", "QuickSight Analysis", "Analytics", false},
	{"AWS", "AWS::QuickSight::Dashboard", "QuickSight Dashboard", "Analytics", false},
	{"AWS", "AWS::QuickSight::DataSet", "QuickSight DataSet", "Analytics", false},
	{"AWS", "AWS::QuickSight::DataSource", "QuickSight DataSource", "Analytics", false},
	{"AWS", "AWS::QuickSight::Template", "QuickSight Template", "Analytics", false},
	{"AWS", "AWS::QuickSight::Theme", "QuickSight Theme", "Analytics", false},
	{"AWS", "AWS::RAM::ResourceShare", "Resource Access Manager (RAM) ResourceShare", "Management", false},
	{"AWS", "AWS::RDS::DBCluster", "RDS DBCluster", "Database", true},
	{"AWS", "AWS::RDS::DBClusterParameterGroup", "RDS DBClusterParameterGroup", "Database", false},
	{"AWS", "AWS::RDS::DBClusterSnapshot", "DB Cluster Snapshot", "Database", false},
	{"AWS", "AWS::RDS::DBEventSubscription", "DB Event Subscription", "Database", false},
	{"AWS", "AWS::RDS::DBInstance", "RDS DBInstance", "Database", true},
	{"AWS", "AWS::RDS::DBParameterGroup", "RDS DBParameterGroup", "Database", true},
	{"AWS", "AWS::RDS::DBProxy", "RDS DBProxy", "Database", false},
	{"AWS", "AWS::RDS::DBProxyEndpoint", "RDS DBProxyEndpoint", "Database", false},
	{"AWS", "AWS::RDS::DBProxyTargetGroup", "RDS DBProxyTargetGroup", "Database", false},
	{"AWS", "AWS::RDS::DBSecurityGroup", "RDS DBSecurityGroup", "Database", false},
	{"AWS", "AWS::RDS::DBSecurityGroupIngress", "RDS DBSecurityGroupIngress", "Database", false},
	{"AWS", "AWS::RDS::DBSubnetGroup", "RDS DBSubnetGroup", "Database", true},
	{"AWS", "AWS::RDS::EventSubscription", "RDS EventSubscription", "Database", false},
	{"AWS", "AWS::RDS::GlobalCluster", "RDS GlobalCluster", "Database", false},
	{"AWS", "AWS::RDS::OptionGroup", "RDS OptionGroup", "Database", false},
	{"AWS", "AWS::Redshift::Cluster", "Redshift Cluster", "Database", true},
	{"AWS", "AWS::Redshift::ClusterParameterGroup", "Redshift ClusterParameterGroup", "Database", false},
	{"AWS", "AWS::Redshift::ClusterSecurityGroup", "Redshift ClusterSecurityGroup", "Database", false},
	{"AWS", "AWS::Redshift::ClusterSecurityGroupIngress", "Redshift ClusterSecurityGroupIngress", "Database", false},
	{"AWS", "AWS::Redshift::ClusterSubnetGroup", "Redshift ClusterSubnetGroup", "Database", false},
	{"AWS", "AWS::Redshift::EndpointAccess", "Redshift EndpointAccess", "Database", false},
	{"AWS", "AWS::Redshift::EndpointAuthorization", "Redshift EndpointAuthorization", "Database", false},
	{"AWS", "AWS::Redshift::EventSubscription", "Redshift EventSubscription", "Database", false},
	{"AWS", "AWS::Redshift::ScheduledAction", "Redshift ScheduledAction", "Database", false},
	{"AWS", "AWS::RefactorSpaces::Application", "Refactor Spaces Application", "Other", false},
	{"AWS", "AWS::RefactorSpaces::Environment", "Refactor Spaces Environment", "Other", false},
	{"AWS", "AWS::RefactorSpaces::Route", "Refactor Spaces Route", "Other", false},
	{"AWS", "AWS::RefactorSpaces::Service", "Refactor Spaces Service", "Other", false},
	{"AWS", "AWS::Rekognition::Project", "Rekognition Project", "Other", false},
	{"AWS", "AWS::ResilienceHub::App", "Resilience Hub App", "Other", false},
	{"AWS", "AWS::ResilienceHub::ResiliencyPolicy", "Resilience Hub ResiliencyPolicy", "Other", false},
	{"AWS", "AWS::ResourceGroups::Group", "Resource Groups Group", "Governance", false},
	{"AWS", "AWS::RoboMaker::Fleet", "RoboMaker Fleet", "Other", false},
	{"AWS", "AWS::RoboMaker::Robot", "RoboMaker Robot", "Other", false},
	{"AWS", "AWS::RoboMaker::RobotApplication", "RoboMaker RobotApplication", "Other", false},
	{"AWS", "AWS::RoboMaker::RobotApplicationVersion", "RoboMaker RobotApplicationVersion", "Other", false},
	{"AWS", "AWS::RoboMaker::SimulationApplication", "RoboMaker SimulationApplication", "Other", false},
	{"AWS", "AWS::RoboMaker::SimulationApplicationVersion", "RoboMaker SimulationApplicationVersion", "Other", false},
	{"AWS", "AWS::Route53::DNSSEC", "Route53 DNSSEC", "Networking", false},
	{"AWS", "AWS::Route53::HealthCheck", "Route53 HealthCheck", "Networking", false},
	{"AWS", "AWS::Route53::HostedZone", "Route53 HostedZone", "Networking", true},
	{"AWS", "AWS::Route53::KeySigningKey", "Route53 KeySigningKey", "Networking", false},
	{"AWS", "AWS::Route53::RecordSet", "Route53 RecordSet", "Networking", false},
	{"AWS", "AWS::Route53::RecordSetGroup", "Route53 RecordSetGroup", "Networking", false},
	{"AWS", "AWS::Route53RecoveryControl::Cluster", "Route53 Recovery Control Cluster", "Networking", false},
	{"AWS", "AWS::Route53RecoveryControl::ControlPanel", "Route53 Recovery Control ControlPanel", "Networking", false},
	{"AWS", "AWS::Route53RecoveryControl::RoutingControl", "Route53 Recovery Control RoutingControl", "Networking", false},
	{"AWS", "AWS::Route53RecoveryControl::SafetyRule", "Route53 Recovery Control SafetyRule", "Networking", false},
	{"AWS", "AWS::Route53RecoveryReadiness::Cell", "Route53 Recovery Readiness Cell", "Networking", false},
	{"AWS", "AWS::Route53RecoveryReadiness::ReadinessCheck", "Route53 Recovery Readiness ReadinessCheck", "Networking", false},
	{"AWS", "AWS::Route53RecoveryReadiness::RecoveryGroup", "Route53 Recovery Readiness RecoveryGroup", "Networking", false},
	{"AWS", "AWS::Route53RecoveryReadiness::ResourceSet", "Route53 Recovery Readiness ResourceSet", "Networking", false},
	{"AWS", "AWS::Route53Resolver::FirewallDomainList", "Route53 Resolver FirewallDomainList", "Networking", false},
	{"AWS", "AWS::Route53Resolver::FirewallRuleGroup", "Route53 Resolver FirewallRuleGroup", "Networking", false},
	{"AWS", "AWS::Route53Resolver::FirewallRuleGroupAssociation", "Route53 Resolver FirewallRuleGroupAssociation", "Networking", false},
	{"AWS", "AWS::Route53Resolver::ResolverConfig", "Route53 Resolver ResolverConfig", "Networking", false},
	{"AWS", "AWS::Route53Resolver::ResolverDNSSECConfig", "Route53 Resolver ResolverDNSSECConfig", "Networking", false},
	{"AWS", "AWS::Route53Resolver::ResolverEndpoint", "Route53 Resolver ResolverEndpoint", "Networking", false},
	{"AWS", "AWS::Route53Resolver::ResolverQueryLoggingConfig", "Route53 Resolver ResolverQueryLoggingConfig", "Networking", false},
	{"AWS", "AWS::Route53Resolver::ResolverQueryLoggingConfigAssociation", "Route53 Resolver ResolverQueryLoggingConfigAssociation", "Networking", false},
	{"AWS", "AWS::Route53Resolver::ResolverRule", "Route53 Resolver ResolverRule", "Networking", false},
	{"AWS", "AWS::Route53Resolver::ResolverRuleAssociation", "Route53 Resolver ResolverRuleAssociation", "Networking", false},
	{"AWS", "AWS::RUM::AppMonitor", "CloudWatch RUM AppMonitor", "Other", true},
	{"AWS", "AWS::S3::AccessPoint", "S3 AccessPoint", "Storage", false},
	{"AWS", "AWS::S3::AccountSetting", "S3 Account Setting", "Storage", false},
	{"AWS", "AWS::S3::Bucket", "S3 Bucket", "Storage", true},
	{"AWS", "AWS::S3::BucketPolicy", "S3 BucketPolicy", "Storage", false},
	{"AWS", "AWS::S3::MultiRegionAccessPoint", "S3 MultiRegionAccessPoint", "Storage", true},
	{"AWS", "AWS::S3::MultiRegionAccessPointPolicy", "S3 MultiRegionAccessPointPolicy", "Storage", false},
	{"AWS", "AWS::SQS::Queue", "SQS Queue", "Messaging", true},
	{"Azure", "Microsoft.Compute", "Azure Compute", "Infrastructure", true},
	{"AWS", "AWS::S3ObjectLambda::AccessPoint", "S3ObjectLambda AccessPoint", "Storage", false},
	{"AWS", "AWS::S3ObjectLambda::AccessPointPolicy", "S3ObjectLambda AccessPointPolicy", "Storage", false},
	{"AWS", "AWS::S3Outposts::AccessPoint", "S3Outposts AccessPoint", "Storage", false},
	{"AWS", "AWS::S3Outposts::Bucket", "S3Outposts Bucket", "Storage", false},
	{"AWS", "AWS::S3Outposts::BucketPolicy", "S3Outposts BucketPolicy", "Storage", false},
	{"AWS", "AWS::S3Outposts::Endpoint", "S3Outposts Endpoint", "Storage", false},
	{"AWS", "AWS::SageMaker::App", "SageMaker App", "AI + ML", true},
	{"AWS", "AWS::SageMaker::AppImageConfig", "SageMaker AppImageConfig", "AI + ML", false},
	{"AWS", "AWS::SageMaker::CodeRepository", "SageMaker CodeRepository", "AI + ML", false},
	{"AWS", "AWS::SageMaker::DataQualityJobDefinition", "SageMaker DataQualityJobDefinition", "AI + ML", false},
	{"AWS", "AWS::SageMaker::Device", "SageMaker Device", "AI + ML", false},
	{"AWS", "AWS::SageMaker::DeviceFleet", "SageMaker DeviceFleet", "AI + ML", false},
	{"AWS", "AWS::SageMaker::Domain", "SageMaker Domain", "AI + ML", false},
	{"AWS", "AWS::SageMaker::Endpoint", "SageMaker Endpoint", "AI + ML", false},
	{"AWS", "AWS::SageMaker::EndpointConfig", "SageMaker EndpointConfig", "AI + ML", false},
	{"AWS", "AWS::SageMaker::EndpointConfiguration", "SageMaker EndpointConfig", "AI + ML", false},
	{"AWS", "AWS::SageMaker::FeatureGroup", "SageMaker FeatureGroup", "AI + ML", false},
	{"AWS", "AWS::SageMaker::Image", "SageMaker Image", "AI + ML", false},
	{"AWS", "AWS::SageMaker::ImageVersion", "SageMaker ImageVersion", "AI + ML", false},
	{"AWS", "AWS::SageMaker::Model", "SageMaker Model", "AI + ML", false},
	{"AWS", "AWS::SageMaker::ModelBiasJobDefinition", "SageMaker ModelBiasJobDefinition", "AI + ML", false},
	{"AWS", "AWS::SageMaker::ModelExplainabilityJobDefinition", "SageMaker ModelExplainabilityJobDefinition", "AI + ML", false},
	{"AWS", "AWS::SageMaker::ModelPackageGroup", "SageMaker ModelPackageGroup", "AI + ML", false},
	{"AWS", "AWS::SageMaker::ModelQualityJobDefinition", "SageMaker ModelQualityJobDefinition", "AI + ML", false},
	{"AWS", "AWS::SageMaker::MonitoringSchedule", "SageMaker MonitoringSchedule", "AI + ML", false},
	{"AWS", "AWS::SageMaker::NotebookInstance", "SageMaker NotebookInstance", "AI + ML", false},
	{"AWS", "AWS::SageMaker::NotebookInstanceLifecycleConfig", "SageMaker NotebookInstanceLifecycleConfig", "AI + ML", false},
	{"AWS", "AWS::SageMaker::Pipeline", "SageMaker Pipeline", "AI + ML", false},
	{"AWS", "AWS::SageMaker::Project", "SageMaker Project", "AI + ML", false},
	{"AWS", "AWS::SageMaker::UserProfile", "SageMaker UserProfile", "AI + ML", false},
	{"AWS", "AWS::SageMaker::Workteam", "SageMaker Workteam", "AI + ML", false},
	{"AWS", "AWS::SDB::Domain", "SimpleDB Domain", "Messaging", true},
	{"AWS", "AWS::SecretsManager::ResourcePolicy", "Secrets Manager ResourcePolicy", "Security", false},
	{"AWS", "AWS::SecretsManager::RotationSchedule", "Secrets Manager RotationSchedule", "Security", false},
	{"Azure", "Microsoft.Devices", "Azure IoT Device", "IoT", false},
	{"Azure", "Microsoft.Network", "Network Service", "Networking", true},
	{"AWS", "AWS::SecretsManager::SecretTargetAttachment", "Secrets Manager SecretTargetAttachment", "Security", false},
	{"Azure", "Microsoft.Sql", "Azure SQL", "Database", true},
	{"Azure", "Microsoft.Web", "Microsoft Web", "Cloud App", true},
	{"AWS", "AWS::ServiceCatalog::AcceptedPortfolioShare", "Service Catalog AcceptedPortfolioShare", "Governance", false},
	{"AWS", "AWS::ServiceCatalog::CloudFormationProduct", "Service Catalog CloudFormationProduct", "Governance", false},
	{"AWS", "AWS::ServiceCatalog::CloudFormationProvisionedProduct", "Service Catalog CloudFormationProvisionedProduct", "Governance", false},
	{"AWS", "AWS::ServiceCatalog::LaunchNotificationConstraint", "Service Catalog LaunchNotificationConstraint", "Governance", false},
	{"AWS", "AWS::ServiceCatalog::LaunchRoleConstraint", "Service Catalog LaunchRoleConstraint", "Governance", false},
	{"AWS", "AWS::ServiceCatalog::LaunchTemplateConstraint", "Service Catalog LaunchTemplateConstraint", "Governance", false},
	{"AWS", "AWS::ServiceCatalog::Portfolio", "Service Catalog Portfolio", "Governance", false},
	{"AWS", "AWS::ServiceCatalog::PortfolioPrincipalAssociation", "Service Catalog PortfolioPrincipalAssociation", "Governance", false},
	{"AWS", "AWS::ServiceCatalog::PortfolioProductAssociation", "Service Catalog PortfolioProductAssociation", "Governance", false},
	{"AWS", "AWS::ServiceCatalog::PortfolioShare", "Service Catalog PortfolioShare", "Governance", false},
	{"AWS", "AWS::ServiceCatalog::ResourceUpdateConstraint", "Service Catalog ResourceUpdateConstraint", "Governance", false},
	{"AWS", "AWS::ServiceCatalog::ServiceAction", "Service Catalog ServiceAction", "Governance", false},
	{"AWS", "AWS::ServiceCatalog::ServiceActionAssociation", "Service Catalog ServiceActionAssociation", "Governance", false},
	{"AWS", "AWS::ServiceCatalog::StackSetConstraint", "Service Catalog StackSetConstraint", "Governance", false},
	{"AWS", "AWS::ServiceCatalog::TagOption", "Service Catalog TagOption", "Governance", false},
	{"AWS", "AWS::ServiceCatalog::TagOptionAssociation", "Service Catalog TagOptionAssociation", "Governance", false},
	{"AWS", "AWS::ServiceCatalogAppRegistry::Application", "Service Catalog AppRegistry Application", "Governance", false},
	{"AWS", "AWS::ServiceCatalogAppRegistry::AttributeGroup", "Service Catalog AppRegistry AttributeGroup", "Governance", false},
	{"AWS", "AWS::ServiceCatalogAppRegistry::AttributeGroupAssociation", "Service Catalog AppRegistry AttributeGroupAssociation", "Governance", false},
	{"AWS", "AWS::ServiceCatalogAppRegistry::ResourceAssociation", "Service Catalog AppRegistry ResourceAssociation", "Governance", false},
	{"AWS", "AWS::SES::ConfigurationSet", "SES ConfigurationSet", "Messaging", true},
	{"AWS", "AWS::SES::ConfigurationSetEventDestination", "SES ConfigurationSetEventDestination", "Messaging", false},
	{"AWS", "AWS::SES::ContactList", "SES ContactList", "Messaging", false},
	{"AWS", "AWS::SES::ReceiptFilter", "SES ReceiptFilter", "Messaging", false},
	{"AWS", "AWS::SES::ReceiptRule", "SES ReceiptRule", "Messaging", false},
	{"AWS", "AWS::SES::ReceiptRuleSet", "SES ReceiptRuleSet", "Messaging", false},
	{"AWS", "AWS::SES::Template", "SES Template", "Messaging", false},
	{"AWS", "aws::shield::", "Shield", "Security", true},
	{"AWS", "AWS::Signer::ProfilePermission", "Signer ProfilePermission", "Messaging", false},
	{"AWS", "AWS::Signer::SigningProfile", "Signer SigningProfile", "Messaging", false},
	{"AWS", "AWS::SNS::TopicPolicy", "SNS TopicPolicy", "Messaging", false},
	{"AWS", "aws::sqlworkbench::", "SQL Workbench", "Data Services", false},
	{"AWS", "AWS::SQS::QueuePolicy", "SQS QueuePolicy", "Messaging", false},
	{"AWS", "AWS::SSM::Association", "SSM Association", "Management", false},
	{"AWS", "AWS::SSM::Document", "SSM Document", "Management", true},
	{"AWS", "AWS::SSM::MaintenanceWindow", "SSM MaintenanceWindow", "Management", false},
	{"AWS", "AWS::SSM::MaintenanceWindowTarget", "SSM MaintenanceWindowTarget", "Management", false},
	{"AWS", "AWS::SSM::MaintenanceWindowTask", "SSM MaintenanceWindowTask", "Management", false},
	{"AWS", "AWS::SSM::ManagedInstance", "SSM Managed Instance", "Ops", true},
	{"AWS", "AWS::SSM::ManagedInstanceCompliance", "SSM Managed Instance Compliance", "Ops", false},
	{"AWS", "AWS::SSM::Parameter", "SSM Parameter", "Management", false},
	{"AWS", "AWS::SSM::PatchBaseline", "SSM PatchBaseline", "Management", false},
	{"AWS", "AWS::SSM::ResourceDataSync", "SSM ResourceDataSync", "Management", false},
	{"AWS", "AWS::SSMContacts::Contact", "SSMContacts Contact", "Governance", false},
	{"AWS", "AWS::SSMContacts::ContactChannel", "SSMContacts ContactChannel", "Governance", false},
	{"AWS", "AWS::SSMIncidents::ReplicationSet", "SSMIncidents ReplicationSet", "Governance", false},
	{"AWS", "AWS::SSMIncidents::ResponsePlan", "SSMIncidents ResponsePlan", "Governance", false},
	{"AWS", "AWS::SSO::Assignment", "AWS SSO Assignment", "Identity", false},
	{"AWS", "AWS::SSO::InstanceAccessControlAttributeConfiguration", "AWS SSO InstanceAccessControlAttributeConfiguration", "Identity", false},
	{"AWS", "AWS::SSO::PermissionSet", "AWS SSO PermissionSet", "Identity", false},
	{"AWS", "AWS::StepFunctions::Activity", "Step Functions Activity", "Automation", false},
	{"AWS", "AWS::StepFunctions::StateMachine", "Step Functions StateMachine", "Automation", false},
	{"AWS", "aws::swf::", "Simple Workflow", "Management", true},
	{"AWS", "AWS::Timestream::Database", "Timestream Database", "Database", true},
	{"AWS", "AWS::Timestream::ScheduledQuery", "Timestream ScheduledQuery", "Database", false},
	{"AWS", "AWS::Timestream::Table", "Timestream Table", "Database", false},
	{"AWS", "AWS::Transfer::Server", "Transfer Server", "Migration", true},
	{"AWS", "AWS::Transfer::User", "Transfer User", "Migration", false},
	{"AWS", "AWS::Transfer::Workflow", "Transfer Workflow", "Migration", false},
	{"AWS", "AWS::WAF::ByteMatchSet", "WAF v1 ByteMatchSet", "Security", false},
	{"AWS", "AWS::WAF::IPSet", "WAF v1 IPSet", "Security", false},
	{"AWS", "AWS::WAF::Rule", "WAF v1 Rule", "Security", false},
	{"AWS", "AWS::WAF::SizeConstraintSet", "WAF v1 SizeConstraintSet", "Security", false},
	{"AWS", "AWS::WAF::SqlInjectionMatchSet", "WAF v1 SqlInjectionMatchSet", "Security", false},
	{"AWS", "AWS::WAF::WebACL", "WAF v1 WebACL", "Security", false},
	{"AWS", "AWS::WAF::XssMatchSet", "WAF v1 XssMatchSet", "Security", false},
	{"AWS", "AWS::WAFRegional::ByteMatchSet", "Regional WAF ByteMatchSet", "Security", false},
	{"AWS", "AWS::WAFRegional::GeoMatchSet", "Regional WAF GeoMatchSet", "Security", false},
	{"AWS", "AWS::WAFRegional::IPSet", "Regional WAF IPSet", "Security", false},
	{"AWS", "AWS::WAFRegional::RateBasedRule", "Regional WAF RateBasedRule", "Security", false},
	{"AWS", "AWS::WAFRegional::RegexPatternSet", "Regional WAF RegexPatternSet", "Security", false},
	{"AWS", "AWS::WAFRegional::Rule", "Regional WAF Rule", "Security", false},
	{"AWS", "AWS::WAFRegional::SizeConstraintSet", "Regional WAF SizeConstraintSet", "Security", false},
	{"AWS", "AWS::WAFRegional::SqlInjectionMatchSet", "Regional WAF SqlInjectionMatchSet", "Security", false},
	{"AWS", "AWS::WAFRegional::WebACL", "Regional WAF WebACL", "Security", false},
	{"AWS", "AWS::WAFRegional::WebACLAssociation", "Regional WAF WebACLAssociation", "Security", false},
	{"AWS", "AWS::WAFRegional::XssMatchSet", "Regional WAF XssMatchSet", "Security", false},
	{"AWS", "AWS::WAFv2::IPSet", "WAF v2 IPSet", "Security", false},
	{"AWS", "AWS::WAFv2::LoggingConfiguration", "WAF v2 LoggingConfiguration", "Security", false},
	{"AWS", "AWS::WAFv2::RegexPatternSet", "WAF v2 RegexPatternSet", "Security", false},
	{"AWS", "AWS::WAFv2::RuleGroup", "WAF v2 RuleGroup", "Security", false},
	{"AWS", "AWS::WAFv2::WebACL", "WAF v2 WebACL", "Security", false},
	{"AWS", "AWS::WAFv2::WebACLAssociation", "WAF v2 WebACLAssociation", "Security", false},
	{"AWS", "AWS::Wisdom::Assistant", "Wisdom Assistant", "Other", false},
	{"AWS", "AWS::Wisdom::AssistantAssociation", "Wisdom AssistantAssociation", "Other", false},
	{"AWS", "AWS::Wisdom::KnowledgeBase", "Wisdom KnowledgeBase", "Other", false},
	{"AWS", "AWS::WorkSpaces::ConnectionAlias", "WorkSpaces ConnectionAlias", "EUC", false},
	{"AWS", "AWS::WorkSpaces::Workspace", "WorkSpaces Workspace", "EUC", false},
	{"AWS", "AWS::XRay::Group", "XRay Group", "Monitoring", false},
	{"AWS", "AWS::XRay::SamplingRule", "XRay SamplingRule", "Monitoring", false},
	{"Azure", "Microsoft.AAD", "Azure Active Directory", "Identity", true},
	{"Azure", "Microsoft.Addons", "Azure Core", "Other", false},
	{"Azure", "Microsoft.ADHybridHealthService - registered", "Azure Active Directory Hybrid Health", "Identity", false},
	{"Azure", "Microsoft.Advisor", "Azure Advisor", "Security", false},
	{"Azure", "Microsoft.AlertsManagement", "Azure Monitor", "Monitoring", false},
	{"Azure", "Microsoft.AnalysisServices", "Azure Analysis Services", "Analytics", false},
	{"Azure", "Microsoft.ApiManagement", "API Management", "PaaS", true},
	{"Azure", "Microsoft.ApiManagement/service", "API Management Service", "Cloud App", true},
	{"Azure", "Microsoft.App", "Container Apps", "Container", true},
	{"Azure", "Microsoft.AppConfiguration", "Azure App Configuration", "PaaS", false},
	{"Azure", "Microsoft.AppConfiguration/configurationStores", "App Config Storage", "Cloud App", false},
	{"Azure", "Microsoft.AppPlatform", "Azure Spring Cloud", "PaaS", false},
	{"Azure", "Microsoft.AppPlatform/Spring", "App Platform", "Cloud App", false},
	{"Azure", "Microsoft.Attestation", "Azure Attestation Service", "Governance", false},
	{"Azure", "Microsoft.Authorization - registered", "Azure Resource Manager", "Management", false},
	{"Azure", "Microsoft.Authorization/elevateAccessRoleAssignment", "Access Assignement", "Security", false},
	{"Azure", "Microsoft.Authorization/policyAssignments", "Policy Assignments", "Security", false},
	{"Azure", "Microsoft.Authorization/roleDefinitions", "Role Definitions", "Security", false},
	{"Azure", "Microsoft.Automation", "Automation", "Serverless", false},
	{"Azure", "Microsoft.AutonomousSystems", "Autonomous Systems", "Serverless", false},
	{"Azure", "Microsoft.AVS", "Azure VMware Solution", "Hybrid Cloud", false},
	{"Azure", "Microsoft.AzureActiveDirectory", "Azure Active Directory B2C", "Identity", true},
	{"Azure", "Microsoft.AzureArcData", "Azure Arc-enabled data services", "Database", false},
	{"Azure", "Microsoft.AzureData", "SQL Server registry", "Database", false},
	{"Azure", "Microsoft.AzureStack", "Azure Core", "Other", false},
	{"Azure", "Microsoft.AzureStackHCI", "Azure Stack HCI", "Other", false},
	{"Azure", "Microsoft.Batch", "Batch", "Serverless", true},
	{"Azure", "Microsoft.Batch/batchAccounts", "Batch Accounts", "Other", false},
	{"Azure", "Microsoft.Billing - registered", "Cost Management and Billing", "Governance", false},
	{"Azure", "Microsoft.BingMaps", "Bing Maps", "Other", false},
	{"Azure", "Microsoft.Blockchain", "Azure Blockchain Service", "Other", false},
	{"Azure", "Microsoft.BlockchainTokens", "Azure Blockchain Tokens", "Other", false},
	{"Azure", "Microsoft.Blueprint", "Azure Blueprints", "Governance", false},
	{"Azure", "Microsoft.Blueprint/blueprints", "Blueprints", "Governance", false},
	{"Azure", "Microsoft.Blueprint/blueprints/artifacts", "Blueprint Artifacts", "Governance", false},
	{"Azure", "Microsoft.BotService", "Azure Bot Service", "Governance", false},
	{"Azure", "Microsoft.Cache", "Azure Cache for Redis", "Data Services", true},
	{"Azure", "Microsoft.Cache/redis", "Azure Redis", "Data Services", true},
	{"Azure", "Microsoft.Capacity", "Azure Core", "Other", false},
	{"Azure", "Microsoft.Cdn", "Content Delivery Network", "Networking", false},
	{"Azure", "Microsoft.CertificateRegistration", "App Service Certificates", "Cloud App", false},
	{"Azure", "Microsoft.ChangeAnalysis", "Azure Monitor", "Monitoring", false},
	{"Azure", "Microsoft.ClassicCompute", "Classic deployment model virtual machine", "Classic", true},
	{"Azure", "Microsoft.ClassicInfrastructureMigrate", "Classic deployment model migration", "Classic", false},
	{"Azure", "Microsoft.ClassicNetwork", "Classic deployment model virtual network", "Classic", true},
	{"Azure", "Microsoft.ClassicNetwork/networkSecurityGroups", "Network Security Grouos", "Other", false},
	{"Azure", "Microsoft.ClassicStorage", "Classic deployment model storage", "Classic", false},
	{"Azure", "Microsoft.ClassicSubscription - registered", "Classic deployment model", "Classic", false},
	{"Azure", "Microsoft.CognitiveServices", "Cognitive Services", "AI + ML", false},
	{"Azure", "Microsoft.CognitiveServices/accounts", "Cognitive Services Account", "AI + ML", false},
	{"Azure", "Microsoft.Commerce - registered", "Azure Core", "Other", false},
	{"Azure", "Microsoft.Compute/diskAccesses", "Disk Access", "Storage", false},
	{"Azure", "Microsoft.Compute/disks", "Disk", "Storage", true},
	{"Azure", "Microsoft.Compute/virtualMachines", "Virtual Machine", "Infrastructure", true},
	{"Azure", "Microsoft.Compute/virtualMachineScaleSets", "ScaleSet", "Elastic Workload", true},
	{"Azure", "Microsoft.Consumption - registered", "Cost Management", "Governance", false},
	{"Azure", "Microsoft.ContainerInstance", "Container Instances", "Container", false},
	{"Azure", "Microsoft.ContainerRegistry", "Container Registry", "Container", true},
	{"Azure", "Microsoft.ContainerRegistry/registries", "Container Registry", "Container", true},
	{"Azure", "Microsoft.ContainerService", "Azure Kubernetes Service (AKS)", "Container", true},
	{"Azure", "Microsoft.ContainerService/managedClusters", "Container Cluster", "Container", false},
	{"Azure", "Microsoft.CostManagement - registered", "Cost Management", "Governance", false},
	{"Azure", "Microsoft.CostManagementExports", "Cost Management", "Governance", false},
	{"Azure", "Microsoft.CustomerLockbox", "Customer Lockbox for Microsoft Azure", "Security", false},
	{"Azure", "Microsoft.CustomProviders", "Azure Custom Providers", "Governance", false},
	{"Azure", "Microsoft.DataBox", "Azure Data Box", "Data Services", false},
	{"Azure", "Microsoft.DataBoxEdge", "Azure Stack Edge", "Data Services", true},
	{"Azure", "Microsoft.DataBoxEdge/dataBoxEdgeDevices", "Edge", "Other", false},
	{"Azure", "Microsoft.Databricks", "Azure Databricks", "Data Services", false},
	{"Azure", "Microsoft.DataCatalog", "Data Catalog", "Data Services", false},
	{"Azure", "Microsoft.DataFactory", "Data Factory", "Data Services", false},
	{"Azure", "Microsoft.DataFactory/factories", "Data Factory", "Big Data", false},
	{"Azure", "Microsoft.DataLakeAnalytics", "Data Lake Analytics", "Data Services", false},
	{"Azure", "Microsoft.DataLakeAnalytics/accounts", "Data Lake Analytics", "Analytics", true},
	{"Azure", "Microsoft.DataLakeStore", "Azure Data Lake Storage Gen2", "Data Services", false},
	{"Azure", "Microsoft.DataLakeStore/accounts", "Data Lake Storage Accounts", "Analytics", true},
	{"Azure", "Microsoft.DataMigration", "Azure Database Migration Service", "Data Services", false},
	{"Azure", "Microsoft.DataProtection", "Data Protection", "Security", false},
	{"Azure", "Microsoft.DataShare", "Azure Data Share", "Data Services", false},
	{"Azure", "Microsoft.DBforMariaDB", "Azure Database for MariaDB", "Database", true},
	{"Azure", "Microsoft.DBforMariaDB/servers", "MariaDB Server", "Database", true},
	{"Azure", "Microsoft.DBforMySQL", "Azure Database for MySQL", "Database", true},
	{"Azure", "Microsoft.DBforMySQL/servers", "MySQL DB Server", "Database", true},
	{"Azure", "Microsoft.DBforPostgreSQL", "Azure Database for PostgreSQL", "Database", true},
	{"Azure", "Microsoft.DBforPostgreSQL/servers", "PostgreSQL Server", "Database", true},
	{"Azure", "Microsoft.DesktopVirtualization", "Azure Virtual Desktop", "EUC", false},
	{"Azure", "Microsoft.Devices/iotHubs", "IOT Hub", "IoT", false},
	{"Azure", "Microsoft.Devices/provisioningServices/certificates", "Certificaites", "Security", false},
	{"Azure", "Microsoft.DeviceUpdate", "Device Update for IoT Hub", "IoT", false},
	{"Azure", "Microsoft.DevOps", "Azure DevOps", "DevOps", true},
	{"Azure", "Microsoft.DevSpaces", "Azure Dev Spaces", "DevOps", false},
	{"Azure", "Microsoft.DevTestLab", "Azure Lab Services", "DevOps", false},
	{"Azure", "Microsoft.DigitalTwins", "Azure Digital Twins", "Other", false},
	{"Azure", "Microsoft.DocumentDB", "Azure Cosmos DB", "Database", false},
	{"Azure", "Microsoft.DocumentDB/databaseAccounts", "Document DB Accounts", "Database", true},
	{"Azure", "Microsoft.DocumentDB/databaseAccounts/sqlDatabases", "Document DB SQL Database", "Database", false},
	{"Azure", "Microsoft.DomainRegistration", "App Service", "Cloud App", true},
	{"Azure", "Microsoft.DynamicsLcs", "Lifecycle Services", "Database", false},
	{"Azure", "Microsoft.EnterpriseKnowledgeGraph", "Enterprise Knowledge Graph", "Database", false},
	{"Azure", "Microsoft.EventGrid", "Event Grid", "Messaging", true},
	{"Azure", "Microsoft.EventGrid/domains", "Event Grid Domains", "Messaging", false},
	{"Azure", "Microsoft.EventGrid/domains/topics", "Event Grid Domain Topics", "Messaging", false},
	{"Azure", "Microsoft.EventGrid/topics", "Event Grid Topics", "Messaging", false},
	{"Azure", "Microsoft.EventHub", "Event Hubs", "Messaging", true},
	{"Azure", "Microsoft.EventHub/namespaces", "Event Grid Namespaces", "Messaging", true},
	{"Azure", "Microsoft.Features - registered", "Azure Resource Manager", "Governance", false},
	{"Azure", "Microsoft.GuestConfiguration", "Azure Policy", "Security", false},
	{"Azure", "Microsoft.HanaOnAzure", "SAP HANA on Azure Large Instances", "Other", false},
	{"Azure", "Microsoft.HardwareSecurityModules", "Azure Dedicated HSM", "Other", false},
	{"Azure", "Microsoft.HDInsight", "HDInsight", "Big Data", true},
	{"Azure", "Microsoft.HDInsight/clusters", "HDInsight Cluster", "Big Data", true},
	{"Azure", "Microsoft.HealthcareApis (Azure API for FHIR)", "Azure API for FHIR", "Governance", false},
	{"Azure", "Microsoft.HealthcareApis (Healthcare APIs)", "Healthcare APIs", "Governance", false},
	{"Azure", "Microsoft.HealthcareApis/services", "Health API Services", "Cloud App", false},
	{"Azure", "Microsoft.HybridCompute", "Azure Arc-enabled servers", "Hybrid Cloud", false},
	{"Azure", "Microsoft.HybridCompute/machines", "Hybid Machines", "Other", false},
	{"Azure", "Microsoft.HybridData", "StorSimple", "Storage", false},
	{"Azure", "Microsoft.HybridNetwork", "Network Function Manager", "Networking", false},
	{"Azure", "Microsoft.ImportExport", "Azure Import/Export", "Hybrid Cloud", false},
	{"Azure", "Microsoft.Insights", "Azure Monitor", "Monitoring", false},
	{"Azure", "Microsoft.Insights/activityLogAlerts", "Activity Log Alerts", "Monitoring", false},
	{"Azure", "Microsoft.Insights/guestDiagnosticSettings", "Guest Diagnostic Settings", "Monitoring", false},
	{"Azure", "Microsoft.Insights/logProfiles", "Log Profiles", "Monitoring", false},
	{"Azure", "Microsoft.Intune", "Azure Monitor", "Monitoring", false},
	{"Azure", "Microsoft.IoTCentral", "Azure IoT Central", "IoT", false},
	{"Azure", "Microsoft.IoTSpaces", "Azure Digital Twins", "IoT", false},
	{"Azure", "Microsoft.KeyVault", "Key Vault", "Security", false},
	{"Azure", "Microsoft.KeyVault/managedHsms", "Azure KeyVault KSM", "Security", false},
	{"Azure", "Microsoft.KeyVault/vaults", "Azure KeyVault", "Security", true},
	{"Azure", "Microsoft.KeyVault/vaults/keys", "Azure KeyVault Keys", "Security", false},
	{"Azure", "Microsoft.KeyVault/vaults/secrets", "Azure KeyVault Secrets", "Security", false},
	{"Azure", "Microsoft.Kubernetes", "Azure Arc-enabled Kubernetes", "Container", true},
	{"Azure", "Microsoft.KubernetesConfiguration", "Azure Arc-enabled Kubernetes", "Container", false},
	{"Azure", "Microsoft.Kusto", "Azure Data Explorer", "Data Services", false},
	{"Azure", "Microsoft.Kusto/clusters", "Kusto Clusters", "Other", false},
	{"Azure", "Microsoft.LabServices", "Azure Lab Services", "DevOps", false},
	{"Azure", "Microsoft.Logic", "Logic Apps", "Cloud App", true},
	{"Azure", "Microsoft.Logic/workflows", "Logic Wokrflows", "Serverless", true},
	{"Azure", "Microsoft.MachineLearning", "Machine Learning Studio", "AI + ML", false},
	{"Azure", "Microsoft.MachineLearningServices", "Azure Machine Learning", "AI + ML", false},
	{"Azure", "Microsoft.MachineLearningServices/workspaces", "Machine Learning Workspace", "AI + ML", false},
	{"Azure", "Microsoft.Maintenance", "Azure Maintenance", "Management", false},
	{"Azure", "Microsoft.ManagedIdentity", "Managed identities for Azure resources", "Identity", false},
	{"Azure", "Microsoft.ManagedNetwork", "Virtual networks managed by PaaS services", "Networking", false},
	{"Azure", "Microsoft.ManagedServices", "Azure Lighthouse", "Management", false},
	{"Azure", "Microsoft.Management", "Management Groups", "Management", true},
	{"Azure", "Microsoft.Maps", "Azure Maps", "SaaS", false},
	{"Azure", "Microsoft.Marketplace", "Azure Core", "Other", false},
	{"Azure", "Microsoft.MarketplaceApps", "Azure Core", "Other", false},
	{"Azure", "Microsoft.MarketplaceOrdering - registered", "Azure Core", "Other", false},
	{"Azure", "Microsoft.Media", "Media Services", "Media", false},
	{"Azure", "Microsoft.Microservices4Spring", "Azure Spring Cloud", "Cloud App", false},
	{"Azure", "Microsoft.Migrate", "Azure Migrate", "Migration", false},
	{"Azure", "Microsoft.MixedReality", "Azure Spatial Anchors", "AI + ML", false},
	{"Azure", "Microsoft.NetApp", "Azure NetApp Files", "Network Storage", true},
	{"Azure", "Microsoft.Network/applicationGateways", "Application Gateway", "Networking", true},
	{"Azure", "Microsoft.Network/frontDoors", "Azure Front Door Service", "Networking", true},
	{"Azure", "Microsoft.Network/networkInterfaces", "Network Interface", "Networking", true},
	{"Azure", "Microsoft.Network/networkWatchers", "Network Watcher", "Networking", false},
	{"Azure", "Microsoft.Network/networkWatchers/flowLogs", "Network Watcher Flowlogs", "Networking", false},
	{"Azure", "Microsoft.Network/virtualNetworks", "Virtual Network", "Networking", true},
	{"Azure", "Microsoft.Network/virtualNetworks/subnets", "Azure Subnet", "Networking", true},
	{"Azure", "Microsoft.Notebooks", "Azure Notebooks", "Other", false},
	{"Azure", "Microsoft.NotificationHubs", "Notification Hubs", "Monitoring", false},
	{"Azure", "Microsoft.ObjectStore", "Object Store", "Storage", false},
	{"Azure", "Microsoft.OffAzure", "Azure Migrate", "Migration", false},
	{"Azure", "Microsoft.OperationalInsights", "Azure Monitor", "Monitoring", true},
	{"Azure", "Microsoft.OperationsManagement", "Azure Monitor", "Monitoring", false},
	{"Azure", "Microsoft.Peering", "Azure Peering Service", "Networking", false},
	{"Azure", "Microsoft.PolicyInsights", "Azure Policy", "Governance", false},
	{"Azure", "Microsoft.Portal - registered", "Azure portal", "Other", false},
	{"Azure", "Microsoft.PowerBI", "Power BI", "Analytics", true},
	{"Azure", "Microsoft.PowerBIDedicated", "Power BI Embedded", "Analytics", false},
	{"Azure", "Microsoft.PowerPlatform", "Power Platform", "Analytics", false},
	{"Azure", "Microsoft.ProjectBabylon", "Azure Data Catalog", "Data Services", false},
	{"Azure", "Microsoft.Quantum", "Azure Quantum", "Data Services", false},
	{"Azure", "Microsoft.RecoveryServices", "Azure Site Recovery", "Resiliency", false},
	{"Azure", "Microsoft.RedHatOpenShift", "Azure Red Hat OpenShift", "Other", false},
	{"Azure", "Microsoft.Relay", "Azure Relay", "Other", false},
	{"Azure", "Microsoft.ResourceGraph - registered", "Azure Resource Graph", "Governance", false},
	{"Azure", "Microsoft.ResourceHealth", "Azure Service Health", "Monitoring", false},
	{"Azure", "Microsoft.Resources - registered", "Azure Resource Manager", "Other", false},
	{"Azure", "Microsoft.Resources/links", "Resource Links", "Governance", false},
	{"Azure", "Microsoft.Resources/subscriptions", "Azure Subscription", "Management", true},
	{"Azure", "Microsoft.Resources/subscriptions/locations", "Subscription Location", "Management", false},
	{"Azure", "Microsoft.Resources/subscriptions/resourceGroups", "Resource Groups", "Management", true},
	{"Azure", "Microsoft.Resources/tenants", "Azure Tenant", "Management", true},
	{"Azure", "Microsoft.Resources/users", "Azure Users", "Management", true},
	{"Azure", "Microsoft.SaaS", "Azure Core", "Other", false},
	{"Azure", "Microsoft.Scheduler", "Scheduler", "Automation", false},
	{"Azure", "Microsoft.Search", "Azure Cognitive Search", "AI + ML", false},
	{"Azure", "Microsoft.Search/searchServices", "Azure Service Services", "AI + ML", false},
	{"Azure", "Microsoft.Security", "Security Center", "Security", true},
	{"Azure", "Microsoft.Security/autoProvisioningSettings", "Security Autoprovision", "Security", false},
	{"Azure", "Microsoft.Security/locations/jitNetworkAccessPolicies", "Security JIT Network Acces", "Security", false},
	{"Azure", "Microsoft.Security/pricings", "Security Pricing", "Security", false},
	{"Azure", "Microsoft.Security/securityContacts", "Security Contact", "Security", false},
	{"Azure", "Microsoft.Security/settings", "Security Settings", "Security", false},
	{"Azure", "Microsoft.SecurityInsights", "Microsoft Sentinel", "Security", true},
	{"Azure", "Microsoft.SerialConsole - registered", "Azure Serial Console for Windows", "Other", false},
	{"Azure", "Microsoft.ServiceBus", "Service Bus", "Messaging", true},
	{"Azure", "Microsoft.ServiceBus/namespaces", "Service Bus Namespaces", "Messaging", true},
	{"Azure", "Microsoft.ServiceBus/namespaces/queues", "ServiceBus Queues", "Messaging", false},
	{"Azure", "Microsoft.ServiceBus/namespaces/topics", "ServiceBus Topics", "Messaging", false},
	{"Azure", "Microsoft.ServiceFabric", "Service Fabric", "Cloud App", true},
	{"Azure", "Microsoft.ServiceFabric/clusters", "Service Fabric Cluster", "Messaging", false},
	{"Azure", "Microsoft.Services", "Azure Core", "Other", false},
	{"Azure", "Microsoft.SignalRService", "Azure SignalR Service", "AI + ML", false},
	{"Azure", "Microsoft.SignalRService/signalR", "SignalR", "Other", false},
	{"Azure", "Microsoft.SoftwarePlan", "License", "Other", false},
	{"Azure", "Microsoft.Solutions", "Azure Managed Applications", "Other", true},
	{"Azure", "Microsoft.Sql/managedInstances", "Managed Instance", "Database", true},
	{"Azure", "Microsoft.Sql/servers", "SQL Server registry", "Database", true},
	{"Azure", "Microsoft.Sql/servers/databases", "SQL Server", "Database", true},
	{"Azure", "Microsoft.SqlVirtualMachine", "SQL Server on Azure Virtual Machines", "Database", true},
	{"Azure", "Microsoft.Storage", "Storage", "Storage", true},
	{"Azure", "Microsoft.Storage/storageAccounts", "Storage Accounts", "Storage", false},
	{"Azure", "Microsoft.Storage/storageAccounts/containers", "Storage Account Container", "Storage", false},
	{"Azure", "Microsoft.StorageCache", "Azure HPC Cache", "Other", false},
	{"Azure", "Microsoft.StorageCache/caches", "Storage Cache", "Storage", false},
	{"Azure", "Microsoft.StorageSync", "Storage", "Storage", false},
	{"Azure", "Microsoft.StorageSync/storageSyncServices", "Storage Sync Service", "Storage", false},
	{"Azure", "Microsoft.StorSimple", "StorSimple", "Storage", false},
	{"Azure", "Microsoft.StreamAnalytics", "Azure Stream Analytics", "Analytics", false},
	{"Azure", "Microsoft.StreamAnalytics/streamingJobs", "Streaming Jobs", "Analytics", false},
	{"Azure", "Microsoft.Subscription", "Azure Core", "Subscription", false},
	{"Azure", "microsoft.support - registered", "Azure Core", "Other", false},
	{"Azure", "Microsoft.Synapse", "Azure Synapse Analytics", "Analytics", false},
	{"Azure", "Microsoft.Synapse/workspaces", "Synapses Workspace", "Analytics", false},
	{"Azure", "Microsoft.TimeSeriesInsights", "Azure Time Series Insights", "Database", false},
	{"Azure", "Microsoft.Token", "Token", "Security", true},
	{"Azure", "Microsoft.VirtualMachineImages", "Azure Image Builder", "Infrastructure", false},
	{"Azure", "microsoft.visualstudio", "Azure DevOps", "DevOps", true},
	{"Azure", "Microsoft.VMware", "Azure VMware Solution", "Hybrid Cloud", false},
	{"Azure", "Microsoft.VMwareCloudSimple", "Azure VMware Solution by CloudSimple", "Hybrid Cloud", false},
	{"Azure", "Microsoft.VSOnline", "Azure DevOps", "DevOps", true},
	{"Azure", "Microsoft.Web/hostingEnvironments", "Microsoft Web Hosting Environment", "Cloud App", false},
	{"Azure", "Microsoft.Web/sites", "Microsoft Web Sites", "Cloud App", true},
	{"Azure", "Microsoft.Web/staticSites", "Microsoft Web Sites", "Cloud App", false},
	{"Azure", "Microsoft.WindowsDefenderATP", "Microsoft Defender Advanced Threat Protection", "Security", false},
	{"Azure", "Microsoft.WindowsESU", "Extended Security Updates", "Other", false},
	{"Azure", "Microsoft.WindowsIoT", "Windows 10 IoT Azure Core Services", "IoT", false},
	{"Azure", "Microsoft.WorkloadMonitor", "Azure Monitor", "Monitoring", false},
}

func findRecord(resourceType string) *ResourceType {
	resourceType = strings.ToLower(resourceType)
	for _, v := range mapping {
		if strings.HasPrefix(resourceType, strings.ToLower(v.ResourceTypePrefix)) {
			return &v
		}
	}
	return nil
}

func findResourceTypeRecord(resourceType string) *ResourceTypeName {
	resourceType = strings.ToLower(resourceType)
	for _, v := range resourceTypeNameConvertMap {
		if resourceType == strings.ToLower(v.ResourceType) {
			return &v
		}
	}
	return nil
}

func findServiceRecord(resourceType string) *ServiceName {
	resourceType = strings.ToLower(resourceType)
	for _, v := range serviceNameConvertMap {
		if strings.HasPrefix(resourceType, strings.ToLower(v.ResourceTypePrefix)) {
			return &v
		}
	}
	return nil
}

func CategoryByResourceType(resourceType string) string {
	record := findRecord(resourceType)
	if record != nil {
		return record.Category
	}
	return ""
}

func CloudProviderByResourceType(resourceType string) string {
	record := findRecord(resourceType)
	if record != nil {
		return string(record.Provider)
	}
	return ""
}

func ServiceNameByResourceType(resourceType string) string {
	if record := findResourceTypeRecord(resourceType); record != nil {
		return record.Name
	}
	if record := findServiceRecord(resourceType); record != nil {
		return record.Name
	}
	return ""
}

func IsCommonByResourceType(resourceType string) bool {
	record := findRecord(resourceType)
	if record != nil {
		return record.Common
	}
	return false
}
